---
const {
    label = "Subir PDF",
    cuentaId,
    // La prop sigue llam√°ndose currentImage, pero ahora contendr√° la URL de un PDF
    currentImage = null, 
    size = "w-24 h-24", // Podr√≠as querer ajustar el tama√±o
    fieldName = "documento_pdf",
} = Astro.props;

const hasDocument = currentImage && currentImage !== null;
const initialColor = hasDocument ? "bg-green-600" : "bg-red-800";
const initialLabel = hasDocument ? "‚úì Documento" : label;
---
<!-- ‚úÖ Cambio: Usar un √∫nico contenedor con todos los datos -->
<div
    class={`relative ${size}`}
    data-cuenta-id={cuentaId}
    data-field-name={fieldName}
    data-current-image={currentImage || ""}
>
    <div
        id="upload-container"
        class={`${initialColor} text-white rounded-full flex items-center justify-center text-xs text-center p-2 cursor-pointer transition-colors duration-300 hover:opacity-80`}
    >
        <span id="upload-label">{initialLabel}</span>
    </div>

    <input
        type="file"
        accept="image/*"
        class="upload-input absolute top-0 left-0 w-full h-full opacity-0 cursor-pointer"
    />

    <!-- Indicador de carga -->
    <div
        class="loading-indicator absolute inset-0 bg-black bg-opacity-50 rounded-full items-center justify-center hidden"
    >
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-white">
        </div>
    </div>
</div>

<!-- Toast para mensajes -->
<div
    class="document-toast fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg hidden transition-all"
>
    <span class="document-toast-message"></span>
</div>

<script>
    import { actions } from "astro:actions";

    // ‚úÖ Usar event delegation para manejar m√∫ltiples instancias
    document.addEventListener("change", async (event) => {
        const target = event.target as HTMLInputElement;

        // Solo procesar si es un input de upload de documento
        if (!target.classList.contains("upload-input")) return;

        const file = target.files?.[0];
        if (!file) return;

        // Obtener el contenedor padre
        const container = target.closest("[data-cuenta-id]") as HTMLElement;
        if (!container) {
            console.error("‚ùå No se encontr√≥ el contenedor padre");
            return;
        }

        // Obtener datos del contenedor
        const cuentaId = container.getAttribute("data-cuenta-id");
        const fieldName = container.getAttribute("data-field-name");
        const currentImage = container.getAttribute("data-current-image");

        // Validar datos
        if (!cuentaId || !fieldName) {
            console.error("‚ùå Datos faltantes:", { cuentaId, fieldName });
            showToast(
                container,
                "Error: Datos de configuraci√≥n faltantes",
                "error",
            );
            return;
        }

        // Validaciones del archivo
        const maxSize = 10 * 1024 * 1024; // 10MB
        const allowedType = "application/pdf";

        if (file.size > maxSize) {
            showToast(container, "El PDF es demasiado grande. M√°ximo 10MB.", "error");
            return;
        }
        if (file.type !== allowedType) {
            showToast(container, "Tipo de archivo no permitido. Solo se aceptan PDFs.", "error");
            return;
        }

        // Obtener elementos del DOM
        const uploadLabel = container.querySelector(
            "#upload-label",
        ) as HTMLElement;
        const uploadContainer = container.querySelector(
            "#upload-container",
        ) as HTMLElement;
        const loadingIndicator = container.querySelector(
            ".loading-indicator",
        ) as HTMLElement;

        try {
            // Mostrar estado de carga
            showLoading(loadingIndicator, true);
            if (uploadLabel) uploadLabel.textContent = "Subiendo...";

            // Crear FormData
            const formData = new FormData();
            formData.append("cuentaId", cuentaId);
            formData.append("pdf", file);
            formData.append("fieldName", fieldName);

            console.log("üì§ Enviando a uploadDocumentImage...");

            // Llamar a la action
            const result = await actions.uploadDocumentPdf(formData);

            console.log("üì• Respuesta recibida:", result);

            if (result.data?.success) {
                updateButtonState(uploadContainer, uploadLabel, true, "‚úì Subido");
                showToast(container, "PDF subido exitosamente", "success");
            } else {
                updateButtonState(uploadContainer, uploadLabel, false, "Error");
                showToast(container, result.data?.message || "Error al subir el PDF", "error");
            }
        } catch (error) {
            console.error("‚ùå Error al subir PDF:", error);
            updateButtonState(uploadContainer, uploadLabel, false, "Error");
            showToast(container, "Error inesperado al subir el PDF", "error");
        } finally {
            showLoading(loadingIndicator, false);
            target.value = "";
        }
    });

    function updateButtonState(
        uploadContainer: HTMLElement,
        uploadLabel: HTMLElement,
        hasImage: boolean,
        label: string,
    ) {
        if (uploadLabel) uploadLabel.textContent = label;

        if (uploadContainer) {
            if (hasImage) {
                uploadContainer.classList.remove("bg-red-800");
                uploadContainer.classList.add("bg-green-600");
            } else {
                uploadContainer.classList.remove("bg-green-600");
                uploadContainer.classList.add("bg-red-800");
            }
        }
    }

    function showLoading(loadingIndicator: HTMLElement, show: boolean) {
        if (!loadingIndicator) return;

        if (show) {
            loadingIndicator.classList.remove("hidden");
            loadingIndicator.classList.add("flex");
        } else {
            loadingIndicator.classList.add("hidden");
            loadingIndicator.classList.remove("flex");
        }
    }

    function showToast(
        container: HTMLElement,
        message: string,
        type: "success" | "error",
    ) {
        const toast = container.querySelector(".document-toast") as HTMLElement;
        const toastMessage = container.querySelector(
            ".document-toast-message",
        ) as HTMLElement;

        if (!toast || !toastMessage) return;

        toastMessage.textContent = message;

        toast.classList.remove("bg-green-500", "bg-red-500", "text-white");

        if (type === "success") {
            toast.classList.add("bg-green-500", "text-white");
        } else {
            toast.classList.add("bg-red-500", "text-white");
        }

        toast.classList.remove("hidden");

        setTimeout(() => {
            toast.classList.add("hidden");
        }, 3000);
    }
</script>
