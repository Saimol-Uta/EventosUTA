---
import EventoCard from "./EventoCard.astro";
import RenderPageNum from "./RenderPageNum.astro";
import type { Eventos } from "../interface/eventosSimple";
import { actions } from "astro:actions";
import type { CustomUser } from "../../auth.config";
import { getSession } from "auth-astro/server";

// 1. Recibimos los props del componente padre.
//    No necesitamos obtener la sesión aquí de nuevo, ya que el padre nos pasa 'modoAdmin'.
const {
    filtros = {},
    page = 1,
    cursosPorPagina = 8,
    modoAdmin = false, // Usamos el prop directamente
} = Astro.props;

// 2. Llamamos a la acción optimizada.
//    Cambiamos el nombre de la variable para evitar confusión con el 'data' anidado.
const { data: responseData } = await Astro.callAction(
    actions.getEventosFiltrados,
    {
        ...filtros,
        page,
        cursosPorPagina,
    },
);

// 3. Extraemos los datos de la nueva estructura de respuesta { eventos, totalEventos }.
//    La información ahora viene dentro de la propiedad 'data' de la respuesta.
const eventosPagina = (responseData?.data?.eventos ||
    []) as unknown as Eventos[];
const totalEventos = responseData?.data?.totalEventos || 0;
console.log("Total de eventos:", eventosPagina);

// 4. Calculamos el total de páginas USANDO EL DATO CORRECTO que viene del backend.
//    Esto corrige la lógica de la paginación.
const totalPaginas = Math.ceil(totalEventos / cursosPorPagina);

// 5. Nos aseguramos de que la página actual esté en un rango válido.
const paginaActual = Math.min(Math.max(page, 1), totalPaginas || 1);

// 6. La función para construir la URL sigue siendo la misma y es correcta.
function construirUrl(pagina: number) {
    const url = new URL("/cursosCompleto", "http://dummybase");
    if (filtros.categoria) url.searchParams.set("categoria", filtros.categoria);
    if (filtros.duracion) url.searchParams.set("duracion", filtros.duracion);
    url.searchParams.set("page", pagina.toString());
    return url.pathname + url.search;
}
---

<div class="contenedor">
    {
        eventosPagina.length > 0 ? (
            eventosPagina.map((evento) => (
                <EventoCard
                    imagen={evento.img_eve}
                    titulo={evento.nom_eve}
                    estado={(evento._count?.inscripciones ?? 0).toString()}
                    horas={evento.dur_eve ?? 0}
                    slug={evento.id_eve}
                    modoAdmin={modoAdmin}
                    idEvento={evento.id_eve}
                    esDestacado={evento.es_destacado}
                    precio={evento.precio ?? 0}
                />
            ))
        ) : (
            <div class="sin-resultados">
                <p>No se encontraron resultados.</p>
            </div>
        )
    }
</div>

{
    totalPaginas > 1 && (
        <nav
            class="paginacion"
            role="navigation"
            aria-label="Paginación de cursos"
        >
            {paginaActual > 1 ? (
                <a
                    href={construirUrl(paginaActual - 1)}
                    aria-label="Página anterior"
                >
                    Anterior
                </a>
            ) : (
                <span
                    aria-disabled="true"
                    style="opacity: 0.5; cursor: default;"
                >
                    Anterior
                </span>
            )}

            {Array.from({ length: totalPaginas }, (_, i) => i + 1).map(
                (num) => (
                    <RenderPageNum
                        key={num}
                        num={num}
                        paginaActual={paginaActual}
                        construirUrl={construirUrl}
                    />
                ),
            )}

            {paginaActual < totalPaginas ? (
                <a
                    href={construirUrl(paginaActual + 1)}
                    aria-label="Página siguiente"
                >
                    Siguiente
                </a>
            ) : (
                <span
                    aria-disabled="true"
                    style="opacity: 0.5; cursor: default;"
                >
                    Siguiente
                </span>
            )}
        </nav>
    )
}

<style>
    .contenedor {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        place-items: center;
        justify-content: center;
        align-items: stretch;
        padding: 16px;
        gap: 16px;
    }

    .card {
        width: 100%;
        max-width: 320px;
        background: linear-gradient(145deg, #1e1e2f, #2a2a3f);
        color: #ffffff;
        border-radius: 16px;
        overflow: hidden;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        border: 1px solid #333347;
    }

    .card:hover {
        transform: scale(1.03);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
    }

    /* Imagen del evento */
    .card img {
        width: 100%;
        height: 180px;
        object-fit: cover;
    }

    /* Contenido */
    .card-content {
        padding: 18px 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .card-content h3 {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        color: #ffffff;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
    }

    .card-content p {
        font-size: 0.95rem;
        color: #ccc;
        margin: 0;
    }

    .card-footer {
        padding: 12px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 0.85rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #a2a2d0;
    }

    /* Botón o link dentro de la tarjeta */
    .card a,
    .card button {
        background-color: #5e3eff;
        color: white;
        padding: 8px 14px;
        border-radius: 8px;
        text-decoration: none;
        font-size: 0.85rem;
        transition: background-color 0.2s ease;
        border: none;
    }

    .card a:hover,
    .card button:hover {
        background-color: #7b5fff;
    }

    .sin-resultados {
        grid-column: 1 / -1;
        text-align: center;
        color: #444;
        margin-top: 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        background-color: #fff7f7;
        border: 1px solid #f3dada;
        border-radius: 12px;
    }

    .paginacion {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 30px;
    }

    .paginacion a,
    .paginacion span {
        padding: 8px 14px;
        border: 1px solid #8a1538;
        color: #8a1538;
        border-radius: 6px;
        text-decoration: none;
        cursor: pointer;
    }

    .paginacion .activo {
        background-color: #8a1538;
        color: white;
        cursor: default;
        padding: 8px 14px;
        border-radius: 6px;
        border: 1px solid #8a1538;
    }

    .paginacion a:hover {
        background-color: #c03434;
        color: white;
    }
</style>
