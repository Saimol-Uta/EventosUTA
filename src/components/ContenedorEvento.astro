---
import EventoCard from "./EventoCard2.astro";
import RenderPageNum from "./RenderPageNum.astro";
import type { Eventos } from "../interface/eventosSimple";
import { actions } from "astro:actions";

const {
    filtros = {},
    page = 1,
    cursosPorPagina = 8,
    modoAdmin = false,
} = Astro.props;

// 1. Configuración especial para búsquedas
const esBusqueda = !!filtros.busqueda;
const resultadosPorPagina = esBusqueda ? 1000 : cursosPorPagina;
const paginaActual = esBusqueda ? 1 : page;

// 2. Llamada a la acción con parámetros de búsqueda
const { data: responseData } = await Astro.callAction(
    actions.getEventosFiltrados,
    {
        ...filtros,
        page: paginaActual,
        cursosPorPagina: resultadosPorPagina,
        busqueda: filtros.busqueda || undefined // Envía undefined si no hay búsqueda
    }
);

// 3. Procesamiento de resultados
let eventosFiltrados = (responseData?.data?.eventos || []) as unknown as Eventos[];

// Filtrado adicional en frontend por si acaso (segunda capa de filtrado)
if (esBusqueda && filtros.busqueda) {
    const termino = filtros.busqueda.toLowerCase();
    eventosFiltrados = eventosFiltrados.filter(evento => 
        evento.nom_eve.toLowerCase().includes(termino) ||
        (evento.categorias_eventos?.nom_cat?.toLowerCase() || '').includes(termino)
    );
}

const totalEventos = esBusqueda 
    ? eventosFiltrados.length 
    : responseData?.data?.totalEventos || 0;

// 4. Configuración de paginación
const totalPaginas = esBusqueda 
    ? 1 
    : Math.ceil(totalEventos / cursosPorPagina);

// 5. Función para construir URLs manteniendo los filtros
function construirUrl(pagina: number) {
    const url = new URL("/cursosCompleto", "http://dummybase");
    
    Object.entries(filtros).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '') {
            url.searchParams.set(key, String(value));
        }
    });
    
    url.searchParams.set("page", String(pagina));
    return url.pathname + url.search;
}
---

<!-- Contenido principal -->
<div class="contenedor">
    {eventosFiltrados.length > 0 ? (
        eventosFiltrados.map((evento) => (
            <EventoCard
                imagen={evento.img_eve}
                titulo={evento.nom_eve}
                cuposDis={
                    evento.cup_max && evento.cup_max > 0 
                    ? Math.max(0, evento.cup_max - (evento._count?.inscripciones ?? 0)).toString()
                    : "Sin límite"
                }
                horas={evento.dur_eve ?? 0}
                slug={evento.id_eve}
                modoAdmin={modoAdmin}
                idEvento={evento.id_eve}
                esDestacado={evento.es_destacado}
                precio={evento.precio ?? 0}
                categoria={evento.categorias_eventos?.nom_cat ?? 'Sin categoría'}
            />
        ))
    ) : (
        <div class="sin-resultados">
            <p>No se encontraron resultados para "{filtros.busqueda}"</p>
        </div>
    )}
</div>

<!-- Paginación solo sin búsqueda -->
{!esBusqueda && totalPaginas > 1 && (
    <nav class="paginacion" role="navigation" aria-label="Paginación">
        {/* Controles de paginación existentes */}
    </nav>
)}
<!-- Estilos se mantienen igual -->


<style>
    .contenedor {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        place-items: center;
        justify-content: center;
        align-items: stretch;
        padding: 16px;
        gap: 22px;
    }

    .card {
        width: 100%;
        max-width: 320px;
        background: linear-gradient(145deg, #1e1e2f, #2a2a3f);
        color: #ffffff;
        overflow: hidden;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        border: 1px solid #333347;
    }

    .card:hover {
        transform: scale(1.03);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
    }

    /* Imagen del evento */
    .card img {
        width: 100%;
        height: 180px;
        object-fit: cover;
    }

    /* Contenido */
    .card-content {
        padding: 18px 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .card-content h3 {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 0;
        color: #ffffff;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
    }

    .card-content p {
        font-size: 0.95rem;
        color: #ccc;
        margin: 0;
    }

    .card-footer {
        padding: 12px 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        font-size: 0.85rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        color: #a2a2d0;
    }

    /* Botón o link dentro de la tarjeta */
    .card a,
    .card button {
        background-color: #5e3eff;
        color: white;
        padding: 8px 14px;
        text-decoration: none;
        font-size: 0.85rem;
        transition: background-color 0.2s ease;
        border: none;
    }

    .card a:hover,
    .card button:hover {
        background-color: #7b5fff;
    }

    .sin-resultados {
        grid-column: 1 / -1;
        text-align: center;
        color: #6C1313;
        margin-top: 40px;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
        background-color: #fff7f7;
        border: 1px solid #6C1313;
    }

    .paginacion {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 30px;
    }

    .paginacion a,
    .paginacion span {
        padding: 8px 14px;
        border: 1px solid rgb(108, 19, 19);
        color: rgb(108, 19, 19);
        text-decoration: none;
        cursor: pointer;
    }

    .paginacion .activo {
        background-color: rgb(108, 19, 19);
        color: white;
        cursor: default;
        padding: 8px 14px;
        border: 1px solid rgb(108, 19, 19);
    }

    .paginacion a:hover {
        background-color: rgb(108, 19, 19);
        color: white;
    }
</style>
