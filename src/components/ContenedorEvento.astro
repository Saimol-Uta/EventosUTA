---
import EventoCard from "./EventoCard.astro";
import RenderPageNum from "./RenderPageNum.astro";
import { getEventosFiltrados } from "../actions/Eventos/getFiltros";
import type { Eventos } from "../interface/eventosSimple";
import { actions } from "astro:actions";
import type { CustomUser } from "../../auth.config";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);
let esAdmin = false;

if (session && session.user) {
    const user = session.user as CustomUser;
    const rol = user.rol?.toUpperCase();
    if (rol === "ADMINISTRADOR" || rol === "MASTER") {
        esAdmin = true;
    }
}


const { filtros = {}, page = 1, cursosPorPagina = 8 } = Astro.props;

// Pasar paginación a la acción
const { data } = await Astro.callAction(getEventosFiltrados, {
  ...filtros,
  page,
  cursosPorPagina,
});


const listaEventos = (data?.eventos || []) as Eventos[];

const totalEventos = listaEventos.length;
const totalPaginas = Math.ceil(totalEventos / cursosPorPagina);

const paginaActual = Math.min(Math.max(page, 1), totalPaginas || 1);

// Ya no se hace slice, porque la paginación es en la base de datos
const eventosPagina = listaEventos;

function construirUrl(pagina: number) {
  const url = new URL("/cursosCompleto", "http://dummybase");
  if (filtros.categoria) url.searchParams.set("categoria", filtros.categoria);
  if (filtros.duracion) url.searchParams.set("duracion", filtros.duracion);
  url.searchParams.set("page", pagina.toString());
  return url.pathname + url.search;
}
---

<div class="contenedor">
  {eventosPagina.length > 0 ? (
    eventosPagina.map((evento) => (
      <EventoCard
        imagen={evento.img_eve}
        titulo={evento.nom_eve}
        estado={evento.asignaciones?.length?.toString() || "0"}
        horas={evento.dur_eve ?? 0}
        slug={evento.id_eve}
        modoAdmin={esAdmin}
        idEvento={evento.id_eve}
        esDestacado={evento.es_destacado}
       
      />
      
    ))
  ) : (
    <div class="sin-resultados">
    
      <p>No se encontraron resultados.</p>
    </div>
  )}
</div>

{totalPaginas > 1 && (
  <nav class="paginacion" role="navigation" aria-label="Paginación de cursos">
    {paginaActual > 1 ? (
      <a href={construirUrl(paginaActual - 1)} aria-label="Página anterior">Anterior</a>
    ) : (
      <span aria-disabled="true" style="opacity: 0.5; cursor: default;">Anterior</span>
    )}

    {Array.from({ length: totalPaginas }, (_, i) => i + 1).map((num) => (
      <RenderPageNum
        key={num}
        num={num}
        paginaActual={paginaActual}
        construirUrl={construirUrl}
      />
    ))}

    {paginaActual < totalPaginas ? (
      <a href={construirUrl(paginaActual + 1)} aria-label="Página siguiente">Siguiente</a>
    ) : (
      <span aria-disabled="true" style="opacity: 0.5; cursor: default;">Siguiente</span>
    )}
  </nav>
)}

<style>
.contenedor {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  place-items: center;
  justify-content: center;
  align-items: stretch;
  padding: 16px;
  gap: 16px;
}

.card {
  width: 100%;
  max-width: 320px;
  background: linear-gradient(145deg, #1e1e2f, #2a2a3f);
  color: #ffffff;
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  display: flex;
  flex-direction: column;
  border: 1px solid #333347;
}

.card:hover {
  transform: scale(1.03);
  box-shadow: 0 12px 32px rgba(0, 0, 0, 0.4);
}

/* Imagen del evento */
.card img {
  width: 100%;
  height: 180px;
  object-fit: cover;
}

/* Contenido */
.card-content {
  padding: 18px 20px;
  display: flex;
  flex-direction: column;
  gap: 10px;
}

.card-content h3 {
  font-size: 1.2rem;
  font-weight: 600;
  margin: 0;
  color: #ffffff;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.4);
}

.card-content p {
  font-size: 0.95rem;
  color: #ccc;
  margin: 0;
}

.card-footer {
  padding: 12px 20px;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  font-size: 0.85rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  color: #a2a2d0;
}

/* Botón o link dentro de la tarjeta */
.card a,
.card button {
  background-color: #5e3eff;
  color: white;
  padding: 8px 14px;
  border-radius: 8px;
  text-decoration: none;
  font-size: 0.85rem;
  transition: background-color 0.2s ease;
  border: none;
}

.card a:hover,
.card button:hover {
  background-color: #7b5fff;
}



.sin-resultados {
  grid-column: 1 / -1;
  text-align: center;
  color: #444;
  margin-top: 40px;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  background-color: #fff7f7;
  border: 1px solid #f3dada;
  border-radius: 12px;
}

.paginacion {
  display: flex;
  justify-content: center;
  gap: 10px;
  margin-top: 30px;
}

.paginacion a, .paginacion span {
  padding: 8px 14px;
  border: 1px solid #8a1538;
  color: #8a1538;
  border-radius: 6px;
  text-decoration: none;
  cursor: pointer;
}

.paginacion .activo {
  background-color: #8a1538;
  color: white;
  cursor: default;
  padding: 8px 14px;
  border-radius: 6px;
  border: 1px solid #8a1538;
}


.paginacion a:hover {
  background-color: #c03434;
  color: white;
}
</style>
