---
import "../styles/ModalDetallesInscripcion.css";
---

<div id="modalDetallesPago" class="modal">
    <div class="modal-contenido">
        <span class="cerrar" onclick="cerrarModalPagoInscripcion()"
            >&times;</span
        >
        <div class="detalles-reserva">
            <h2>Nombre del Evento</h2>

            <div class="seccion-detalles">
                <h3>Informaci√≥n del Usuario</h3>
                <div class="descripcion-completa-container">
                    <p>
                        <strong>Nombres:</strong>
                        <span id="usuario-nombres-pago"></span>
                    </p>
                    <p>
                        <strong>Apellidos:</strong>
                        <span id="usuario-apellidos-pago"></span>
                    </p>
                    <p>
                        <strong>Correo:</strong>
                        <span id="usuario-correo-pago"></span>
                    </p>
                    <p>
                        <strong>C√©dula:</strong>
                        <span id="usuario-cedula-pago"></span>
                    </p>
                </div>
            </div>
            <div class="seccion-detalles">
                <h3>Documentaci√≥n</h3>
                <div class="info-grid">
                    <p class="centrar campo-factura">
                        <strong>Factura o Comprobante de Pago:</strong>
                        <button
                            id="enlace-comprobante-pago"
                            class="btn-ver-documento"
                            style="display: none;"
                            type="button"
                        >
                            Ver comprobante
                        </button>
                        <span id="sin-comprobante" style="color: #dc2626;"
                            >No disponible</span
                        >
                    </p>
                </div>
            </div>
            <div class="contenedor-boton-modificar">
                <button
                    class="boton-modificar bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded mr-2 transition-colors duration-200 disabled:bg-gray-400 disabled:cursor-not-allowed"
                    id="boton-aprobar-pago"
                    disabled
                    onclick="if (!this.disabled) aprobarInscripcionPago()"
                    >Aprobar</button
                >
                <button
                    class="boton-modificar"
                    onclick="rechazarInscripcionPago()">Rechazar</button
                >
            </div>
        </div>
    </div>
</div>

<!-- Modal para visualizar documentos -->
<div id="modalVisualizarDocumentoPago" class="modal" style="z-index: 1001;">
    <div class="modal-contenido-documento">
        <span class="cerrar-documento" onclick="cerrarModalDocumentoPago()"
            >&times;</span
        >
        <div class="contenedor-documento">
            <h3 id="titulo-documento-pago">Visualizar Documento</h3>
            <div id="contenedor-preview-pago">
                <!-- Para im√°genes -->
                <img
                    id="preview-imagen-pago"
                    style="display: none; max-width: 100%; max-height: 80vh; object-fit: contain;"
                />
                <!-- Para PDFs -->
                <iframe
                    id="preview-pdf-pago"
                    style="display: none; width: 100%; height: 80vh; border: none;"
                ></iframe>
                <!-- Mensaje de carga -->
                <div
                    id="cargando-documento-pago"
                    style="text-align: center; padding: 2rem;"
                >
                    <p>Cargando documento...</p>
                </div>
                <!-- Mensaje de error -->
                <div
                    id="error-documento-pago"
                    style="display: none; text-align: center; padding: 2rem; color: #dc2626;"
                >
                    <p>Error al cargar el documento</p>
                </div>
                <!-- Para texto (carta de motivaci√≥n) -->
                <div
                    id="preview-texto-pago"
                    style="display: none; padding: 2rem; background-color: white; border-radius: 8px; margin: 1rem; box-shadow: 0 2px 4px rgba(0,0,0,0.1); max-height: 70vh; overflow-y: auto;"
                >
                    <div
                        id="contenido-texto-pago"
                        style="white-space: pre-wrap; line-height: 1.6; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;"
                    >
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    declare global {
        interface Window {
            cerrarModalPagoInscripcion: () => void;
            abrirModalPagoInscripcion: (inscripcionId: string) => void;
            aprobarInscripcionPago: () => void;
            rechazarInscripcionPago: () => void;
            aprobarInscripcion: (
                inscripcionId: string,
                tipo: "documentacion" | "pago",
            ) => Promise<void>;
            rechazarInscripcion: (
                inscripcionId: string,
                tipo: "documentacion" | "pago",
            ) => Promise<void>;
            currentInscripcionIdPago: string;
            abrirModalDocumentoPago: (url: string, titulo: string) => void;
            abrirModalTextoPago: (texto: string, titulo: string) => void;
            cerrarModalDocumentoPago: () => void;
        }
    }
    let currentInscripcionIdPago = "";

    function cerrarModalPagoInscripcion() {
        const modal = document.getElementById("modalDetallesPago");
        if (modal) modal.style.display = "none";
    }
    function abrirModalPagoInscripcion(inscripcionId: string) {
        console.log("üîç Intentando abrir modal de pago para:", inscripcionId);

        const modal = document.getElementById("modalDetallesPago");
        console.log("üîç Modal encontrado:", !!modal);

        if (modal) {
            modal.style.display = "block";
            console.log("‚úÖ Modal mostrado");
        } else {
            console.error(
                "‚ùå No se encontr√≥ el modal con ID 'modalDetallesPago'",
            );
            return;
        }

        currentInscripcionIdPago = inscripcionId;
        window.currentInscripcionIdPago = inscripcionId;
        console.log("Abriendo modal de pago para inscripci√≥n:", inscripcionId);

        // Cargar informaci√≥n del usuario
        cargarInformacionUsuarioPago(inscripcionId);
        // Cargar comprobante de pago din√°micamente
        cargarComprobantePago(inscripcionId);
        // Verificar requisitos y actualizar bot√≥n
        verificarRequisitosPagoYActualizarBoton();
    }

    function verificarRequisitosPagoYActualizarBoton() {
        const botonAprobar = document.getElementById(
            "boton-aprobar-pago",
        ) as HTMLButtonElement;

        if (!botonAprobar) return;

        // Deshabilitar por defecto
        botonAprobar.disabled = true;

        const inscripcionesData = (window as any).inscripcionesData || [];
        const inscripcion = inscripcionesData.find(
            (ins: any) => ins.id_ins === window.currentInscripcionIdPago,
        );

        if (!inscripcion) {
            console.warn("No se encontr√≥ la inscripci√≥n actual");
            return;
        }

        const evento = inscripcion.eventos || {};

        // Verificar si el evento es de pago
        const esPago =
            !evento.es_gratuito && evento.precio && Number(evento.precio) > 0;

        if (!esPago) {
            // Si el evento es gratuito, habilitar el bot√≥n
            botonAprobar.disabled = false;
            botonAprobar.title =
                "Evento gratuito - No requiere comprobante de pago";
            return;
        }

        // Si es evento de pago, verificar que existe el comprobante
        const tieneComprobante = isValidDocumentLink(
            inscripcion.enl_ord_pag_ins,
        );
        console.log(inscripcion.enl_ord_pag_ins, tieneComprobante);

        botonAprobar.disabled = !tieneComprobante;

        if (!tieneComprobante) {
            botonAprobar.title = `Evento de pago ($${Number(evento.precio).toFixed(2)}) - Falta comprobante de pago`;
        } else {
            botonAprobar.title = `Evento de pago ($${Number(evento.precio).toFixed(2)}) - Comprobante disponible`;
        }
    }

    function cargarComprobantePago(inscripcionId: string) {
        console.log("Cargando comprobante para inscripci√≥n:", inscripcionId);
        try {
            // Obtener datos de inscripci√≥n desde el contexto global
            const inscripcionesData = (window as any).inscripcionesData || [];
            const inscripcion = inscripcionesData.find(
                (ins: any) => ins.id_ins === inscripcionId,
            );

            if (!inscripcion) {
                console.warn(
                    "No se encontraron datos de inscripci√≥n:",
                    inscripcionId,
                );
                mostrarComprobanteNoDisponible();
                return;
            }

            console.log("Datos del comprobante:", {
                comprobante: inscripcion.enl_ord_pag_ins,
            });

            // Referencias a elementos DOM
            const enlaceComprobante = document.getElementById(
                "enlace-comprobante-pago",
            ) as HTMLButtonElement;
            const sinComprobante = document.getElementById(
                "sin-comprobante",
            ) as HTMLSpanElement; // Configurar bot√≥n del comprobante de pago
            if (isValidDocumentLink(inscripcion.enl_ord_pag_ins)) {
                console.log("Comprobante v√°lido, configurando bot√≥n...");
                console.log(
                    "URL del comprobante:",
                    inscripcion.enl_ord_pag_ins,
                );

                // Limpiar eventos anteriores
                enlaceComprobante.onclick = null;
                enlaceComprobante.removeEventListener(
                    "click",
                    handleComprobanteClick,
                );

                function handleComprobanteClick() {
                    console.log("üîç Click en bot√≥n comprobante detectado");
                    console.log("üîç URL a abrir:", inscripcion.enl_ord_pag_ins);
                    console.log(
                        "üîç Funci√≥n abrirModalDocumentoPago existe:",
                        typeof window.abrirModalDocumentoPago,
                    );

                    abrirModalDocumentoPago(
                        inscripcion.enl_ord_pag_ins,
                        "Comprobante de Pago",
                    );
                }
                enlaceComprobante.addEventListener(
                    "click",
                    handleComprobanteClick,
                );
                enlaceComprobante.style.display = "inline-block";
                sinComprobante.style.display = "none";

                console.log("‚úÖ Bot√≥n de comprobante configurado y mostrado");
                console.log("‚úÖ Estado del bot√≥n:", {
                    display: enlaceComprobante.style.display,
                    visible: enlaceComprobante.offsetWidth > 0,
                    disabled: enlaceComprobante.disabled,
                });
            } else {
                console.log("Comprobante no v√°lido, ocultando bot√≥n...");
                enlaceComprobante.style.display = "none";
                sinComprobante.style.display = "inline";
            }
        } catch (error) {
            console.error("Error al cargar comprobante de pago:", error);
            mostrarComprobanteNoDisponible();
        }
    }

    function cargarInformacionUsuarioPago(inscripcionId: string) {
        try {
            // Obtener datos de inscripci√≥n desde el contexto global
            const inscripcionesData = (window as any).inscripcionesData || [];
            const inscripcion = inscripcionesData.find(
                (ins: any) => ins.id_ins === inscripcionId,
            );

            if (!inscripcion || !inscripcion.usuarios) {
                console.warn(
                    "No se encontraron datos de usuario para la inscripci√≥n:",
                    inscripcionId,
                );
                return;
            }
            const usuario = inscripcion.usuarios;

            // Construir nombres y apellidos completos
            const nombreCompleto =
                `${usuario.nom_usu1 || ""} ${usuario.nom_usu2 || ""}`.trim();
            const apellidoCompleto =
                `${usuario.ape_usu1 || ""} ${usuario.ape_usu2 || ""}`.trim();
            const correo = usuario.cuentas?.[0]?.cor_cue || "No disponible";

            // Actualizar t√≠tulo del evento
            const tituloEvento = document.querySelector(
                "#modalDetallesPago h2",
            );
            if (tituloEvento && inscripcion.eventos) {
                tituloEvento.textContent =
                    inscripcion.eventos.nom_eve || "Evento";
            }

            // Actualizar elementos del DOM con la informaci√≥n del usuario (usando IDs √∫nicos del modal de pago)
            const usuarioNombres = document.getElementById(
                "usuario-nombres-pago",
            );
            const usuarioApellidos = document.getElementById(
                "usuario-apellidos-pago",
            );
            const usuarioCorreo = document.getElementById(
                "usuario-correo-pago",
            );
            const usuarioCedula = document.getElementById(
                "usuario-cedula-pago",
            );

            if (usuarioNombres)
                usuarioNombres.textContent = nombreCompleto || "No disponible";
            if (usuarioApellidos)
                usuarioApellidos.textContent =
                    apellidoCompleto || "No disponible";
            if (usuarioCorreo) usuarioCorreo.textContent = correo;
            if (usuarioCedula)
                usuarioCedula.textContent = usuario.ced_usu || "No disponible";
        } catch (error) {
            console.error(
                "Error al cargar informaci√≥n del usuario en modal de pago:",
                error,
            );
        }
    }

    function isValidDocumentLink(link: string | null | undefined): boolean {
        if (
            link === null ||
            link === undefined ||
            link.trim() === "" ||
            link === "null"
        ) {
            return false;
        }

        // Verificar si es una URL v√°lida
        try {
            new URL(link);
            return true;
        } catch {
            // Si no es una URL v√°lida, verificar si al menos parece un nombre de archivo
            const hasFileExtension =
                /\.(pdf|jpg|jpeg|png|gif|bmp|webp|doc|docx)$/i.test(link);
            return hasFileExtension;
        }
    }

    function mostrarComprobanteNoDisponible() {
        const enlaceComprobante = document.getElementById(
            "enlace-comprobante-pago",
        );
        const sinComprobante = document.getElementById("sin-comprobante");

        if (enlaceComprobante) enlaceComprobante.style.display = "none";
        if (sinComprobante) sinComprobante.style.display = "inline";
    }

    function aprobarInscripcionPago() {
        if (window.aprobarInscripcion && window.currentInscripcionIdPago) {
            window.aprobarInscripcion(window.currentInscripcionIdPago, "pago");
            cerrarModalPagoInscripcion();
        }
    }

    function rechazarInscripcionPago() {
        if (window.rechazarInscripcion && window.currentInscripcionIdPago) {
            window.rechazarInscripcion(window.currentInscripcionIdPago, "pago");
            cerrarModalPagoInscripcion();
        }
    }
    function cerrarModalDocumentoPago() {
        const modal = document.getElementById("modalVisualizarDocumentoPago");
        if (modal) modal.style.display = "none";

        // Limpiar contenido
        const previewImagen = document.getElementById(
            "preview-imagen-pago",
        ) as HTMLImageElement;
        const previewPdf = document.getElementById(
            "preview-pdf-pago",
        ) as HTMLIFrameElement;
        const previewTexto = document.getElementById("preview-texto-pago");

        if (previewImagen) {
            previewImagen.style.display = "none";
            previewImagen.src = "";
        }
        if (previewPdf) {
            previewPdf.style.display = "none";
            previewPdf.src = "";
        }
        if (previewTexto) {
            previewTexto.style.display = "none";
            const contenidoTexto = document.getElementById(
                "contenido-texto-pago",
            );
            if (contenidoTexto) contenidoTexto.textContent = "";
        }
    }
    function abrirModalDocumentoPago(url: string, titulo: string) {
        console.log("üî• INICIO abrirModalDocumentoPago");
        console.log("üî• Par√°metros recibidos:", { url, titulo });

        const modal = document.getElementById("modalVisualizarDocumentoPago");
        console.log("üî• Modal encontrado:", !!modal);
        const tituloElemento = document.getElementById("titulo-documento-pago");
        const previewImagen = document.getElementById(
            "preview-imagen-pago",
        ) as HTMLImageElement;
        const previewPdf = document.getElementById(
            "preview-pdf-pago",
        ) as HTMLIFrameElement;
        const previewTexto = document.getElementById("preview-texto-pago");
        const cargando = document.getElementById("cargando-documento-pago");
        const error = document.getElementById("error-documento-pago");

        console.log("üî• Elementos encontrados:", {
            modal: !!modal,
            titulo: !!tituloElemento,
            imagen: !!previewImagen,
            pdf: !!previewPdf,
            texto: !!previewTexto,
            cargando: !!cargando,
            error: !!error,
        });

        if (!modal || !url) {
            console.error("‚ùå Modal o URL no encontrados", {
                modal: !!modal,
                url,
            });
            return;
        } // Mostrar modal
        modal.style.display = "block";
        console.log(
            "‚úÖ Modal de comprobante mostrado, display:",
            modal.style.display,
        );

        // Verificar que el modal sea visible despu√©s de un peque√±o delay
        setTimeout(() => {
            console.log("üîç Verificaci√≥n del modal despu√©s de 100ms:");
            console.log("üîç Display:", modal.style.display);
            console.log(
                "üîç Visible:",
                modal.offsetWidth > 0 && modal.offsetHeight > 0,
            );
            console.log("üîç Z-index:", getComputedStyle(modal).zIndex);
            console.log("üîç Position:", getComputedStyle(modal).position);
        }, 100);

        // Actualizar t√≠tulo
        if (tituloElemento) {
            tituloElemento.textContent = titulo;
        } // Mostrar indicador de carga
        if (cargando) cargando.style.display = "block";
        if (error) error.style.display = "none";
        if (previewImagen) previewImagen.style.display = "none";
        if (previewPdf) previewPdf.style.display = "none";
        if (previewTexto) previewTexto.style.display = "none";

        // Detectar tipo de archivo por extensi√≥n
        const extension = url.split(".").pop()?.toLowerCase();
        const esImagen = ["jpg", "jpeg", "png", "gif", "bmp", "webp"].includes(
            extension || "",
        );
        const esPdf = extension === "pdf";

        console.log("Tipo de archivo detectado:", {
            extension,
            esImagen,
            esPdf,
        });

        if (esImagen) {
            // Cargar imagen
            previewImagen.onload = () => {
                console.log("Imagen cargada exitosamente");
                if (cargando) cargando.style.display = "none";
                previewImagen.style.display = "block";
            };
            previewImagen.onerror = () => {
                console.error("Error al cargar imagen");
                if (cargando) cargando.style.display = "none";
                if (error) error.style.display = "block";
            };
            previewImagen.src = url;
        } else if (esPdf) {
            // Cargar PDF
            try {
                previewPdf.onload = () => {
                    console.log("PDF cargado exitosamente");
                    if (cargando) cargando.style.display = "none";
                    previewPdf.style.display = "block";
                };
                previewPdf.onerror = () => {
                    console.error("Error al cargar PDF");
                    if (cargando) cargando.style.display = "none";
                    if (error) error.style.display = "block";
                };
                previewPdf.src = url;
            } catch (err) {
                console.error("Error al configurar PDF:", err);
                if (cargando) cargando.style.display = "none";
                if (error) error.style.display = "block";
            }
        } else {
            // URL inv√°lida o tipo de archivo no soportado
            console.log("URL inv√°lida o tipo de archivo no soportado:", url);
            if (cargando) cargando.style.display = "none";

            // Verificar si es una URL v√°lida
            try {
                new URL(url);
                // Es una URL v√°lida pero tipo no soportado, abrir en nueva pesta√±a
                window.open(url, "_blank");
                cerrarModalDocumentoPago();
            } catch {
                // URL inv√°lida, mostrar error
                if (error) {
                    error.style.display = "block";
                    const errorText = error.querySelector("p");
                    if (errorText) {
                        errorText.textContent =
                            "URL de comprobante inv√°lida: " + url;
                    }
                }
            }
        }
    }

    function abrirModalTextoPago(texto: string, titulo: string) {
        console.log("Abriendo modal para texto:", titulo);

        const modal = document.getElementById("modalVisualizarDocumentoPago");
        const tituloElemento = document.getElementById("titulo-documento-pago");
        const previewImagen = document.getElementById(
            "preview-imagen-pago",
        ) as HTMLImageElement;
        const previewPdf = document.getElementById(
            "preview-pdf-pago",
        ) as HTMLIFrameElement;
        const previewTexto = document.getElementById("preview-texto-pago");
        const contenidoTexto = document.getElementById("contenido-texto-pago");
        const cargando = document.getElementById("cargando-documento-pago");
        const error = document.getElementById("error-documento-pago");

        if (!modal || !texto) {
            console.error("Modal o texto no encontrados", { modal, texto });
            return;
        }

        // Mostrar modal
        modal.style.display = "block";
        console.log("Modal mostrado para texto");

        // Actualizar t√≠tulo
        if (tituloElemento) {
            tituloElemento.textContent = titulo;
        }

        // Ocultar otros elementos
        if (cargando) cargando.style.display = "none";
        if (error) error.style.display = "none";
        if (previewImagen) previewImagen.style.display = "none";
        if (previewPdf) previewPdf.style.display = "none";

        // Mostrar texto
        if (previewTexto && contenidoTexto) {
            contenidoTexto.textContent = texto;
            previewTexto.style.display = "block";
        }
    }

    window.onclick = function (event) {
        const modal = document.getElementById("modalDetallesPago");
        const modalDocumento = document.getElementById(
            "modalVisualizarDocumentoPago",
        );

        if (event.target === modal) cerrarModalPagoInscripcion();
        if (event.target === modalDocumento) cerrarModalDocumentoPago();
    }; // Exponer funciones al objeto window
    window.cerrarModalPagoInscripcion = cerrarModalPagoInscripcion;
    window.abrirModalPagoInscripcion = abrirModalPagoInscripcion;
    window.aprobarInscripcionPago = aprobarInscripcionPago;
    window.rechazarInscripcionPago = rechazarInscripcionPago;
    window.abrirModalDocumentoPago = abrirModalDocumentoPago;
    window.abrirModalTextoPago = abrirModalTextoPago;
    window.cerrarModalDocumentoPago = cerrarModalDocumentoPago; // Exponer tambi√©n las funciones auxiliares
    (window as any).cargarInformacionUsuarioPago = cargarInformacionUsuarioPago;
    (window as any).cargarComprobantePago = cargarComprobantePago;
    (window as any).verificarRequisitosPagoYActualizarBoton =
        verificarRequisitosPagoYActualizarBoton;
    (window as any).abrirModalTextoPago = abrirModalTextoPago;
    console.log("Funciones de pago expuestas al window:", {
        abrirModalDocumentoPago: typeof window.abrirModalDocumentoPago,
        abrirModalTextoPago: typeof (window as any).abrirModalTextoPago,
        cerrarModalDocumentoPago: typeof window.cerrarModalDocumentoPago,
        abrirModalPagoInscripcion: typeof window.abrirModalPagoInscripcion,
    });

    console.log("üöÄ Modal de pago completamente inicializado");
</script>
