---
import "../../styles/Inscripcion.css";
import { actions } from "astro:actions";

interface CampoProps {
  usuario: any;
  evento: any;
  requisitos: any[];
  inscripcion?: any;
}

const { usuario, evento, requisitos } = Astro.props as CampoProps;

const usuarioPlano = {
  id_usu: usuario?.id_usu,
  nom_usu1: usuario?.nom_usu1,
  ape_usu1: usuario?.ape_usu1,
  ced_usu: usuario?.ced_usu,
  cuentas: usuario?.cuentas?.map((c: { cor_cue: string, id_cue: string }) => ({ cor_cue: c.cor_cue, id_cue: c.id_cue }))
};

const eventoPlano = {
  id_eve: evento?.id_eve,
  precio: evento?.precio
};

const requisitosCompletos = Array.isArray(requisitos) && requisitos.length > 0;
const datosUsuarioCompletos = usuario?.nom_usu1 && usuario?.ape_usu1 && usuario?.ced_usu;
const esPagado = Number(evento?.precio ?? 0) > 0;

// Inicialización
let inscripcion = null;
let inscripcionResult = null;
let inscripcionError = null;

const idUsuarioBusqueda = usuario?.cuentas?.[0]?.id_cue || usuario?.id_usu || "";
const idEventoBusqueda = evento?.id_eve || "";

// Procesamiento del POST
if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const idUsuario = formData.get("idUsuario") ?? "";
  const idEvento = formData.get("idEvento") ?? "";
  let metodoPago = formData.get("metodoPago") ?? "";
  let enlaceComprobante: string | undefined = undefined;

  // Procesamiento para cursos pagados
  if (esPagado) {
    // Normaliza el método de pago a los valores válidos de la base de datos
    if (typeof metodoPago === "string") {
      const metodo = metodoPago.trim().toUpperCase();
      if (["TRANSFERENCIA", "DEPOSITO", "ONLINE"].includes(metodo)) {
        metodoPago = metodo;
      } else if (metodo === "EFECTIVO") {
        metodoPago = "DEPOSITO";
      } else {
        metodoPago = "TRANSFERENCIA";
      }
    }

    // Procesa el comprobante si existe
    const comprobante = formData.get("comprobante");
    if (
      comprobante &&
      typeof comprobante === "object" &&
      "name" in comprobante &&
      typeof comprobante.name === "string" &&
      comprobante.name.length > 0
    ) {
      enlaceComprobante = `https://banco.com/comprobante/${comprobante.name}`;
    }
  }

  try {
    // Define el tipo correcto para los parámetros según la action
    const params: {
      idUsuario: string;
      idEvento: string;
      metodoPago?: string;
      enlaceComprobante?: string;
    } = {
      idUsuario: typeof idUsuario === "string" ? idUsuario : String(idUsuario),
      idEvento: typeof idEvento === "string" ? idEvento : String(idEvento),
    };
    if (esPagado) {
      params.metodoPago = typeof metodoPago === "string" ? metodoPago : String(metodoPago);
      if (enlaceComprobante) {
        params.enlaceComprobante = enlaceComprobante;
      }
    }
    const { data, error } = await Astro.callAction(actions.setDatosInscripcion, params);
    inscripcionResult = data;
    inscripcionError = error;
  } catch (err) {
    inscripcionError = { message: (err && typeof err === "object" && "message" in err) ? err.message : "Error inesperado al inscribir." };
  }
}

// Verificar si ya está inscrito correctamente (corregido)
let yaInscrito = false;
if (idUsuarioBusqueda && idEventoBusqueda) {
  const { data } = await Astro.callAction(actions.getDatosInscripcion, {
    idUsuario: idUsuarioBusqueda,
    idEvento: idEventoBusqueda,
  });
  yaInscrito = Boolean(data?.data?.inscripcion?.id_ins); // Esta es la validación correcta
}
---

{/* MENSAJE ÚNICO CENTRADO Y CON ESTILO */}
{(inscripcionResult || inscripcionError || yaInscrito) && (
  <div style="
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 120px;
    margin-bottom: 2rem;
  ">
    <div style={`
      padding: 1.5rem 2.5rem;
      border-radius: 12px;
      font-size: 1.2rem;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 2px 12px #0001;
      background: #fff;
      color: ${
        inscripcionError
          ? '#c0392b'
          : inscripcionResult
            ? '#1e7e34'
            : '#e67e22'
      };
      border: 2px solid ${
        inscripcionError
          ? '#e74c3c'
          : inscripcionResult
            ? '#28a745'
            : '#f39c12'
      };
      max-width: 600px;
      margin: 0 auto;
    `}>
      {inscripcionError
        ? `Error al inscribirse: ${inscripcionError.message}`
        : inscripcionResult
          ? "Inscripción realizada correctamente. Estado: pendiente de revisión."
          : "Ya estás inscrito en este evento. Estado: pendiente de revisión."
      }
    </div>
  </div>
)}

{/* SOLO muestra el formulario si NO está inscrito y no acaba de inscribirse */}
{!yaInscrito && !inscripcionResult && (
  <form
    id="form-inscripcion"
    class="container"
    style="max-width: 1200px; margin: 0 auto; font-size: 1.05rem;"
    method="POST"
    enctype="multipart/form-data"
    onsubmit="return validarRequisitosMarcados();"
  >
    <input type="hidden" name="idUsuario" value={usuario?.cuentas?.[0]?.id_cue || usuario?.id_usu || ""} />
    <input type="hidden" name="idEvento" value={evento?.id_eve || ""} />
    <div class="form-card" style="padding: 2rem;">
      <h2 style="font-size: 1.6rem;">Inscripción</h2>
      <p>{new Date().toLocaleDateString("es-EC")}</p>

      <h3 style="font-size: 1.3rem;">Datos del Usuario</h3>
      <div class="form-group">
        <label>Correo electrónico</label>
        <input type="email" value={usuario?.cuentas?.[0]?.cor_cue ?? ""} readonly />
      </div>

      <div class="form-row">
        <div class="form-group">
          <label>Nombre</label>
          <input type="text" value={usuario?.nom_usu1 ?? ""} readonly />
        </div>
        <div class="form-group">
          <label>Apellido</label>
          <input type="text" value={usuario?.ape_usu1 ?? ""} readonly />
        </div>
      </div>

      <div class="form-row">
        <div class="form-group">
          <label>Tipo de Documento</label>
          <select disabled>
            <option selected>Cédula</option>
            <option>Pasaporte</option>
          </select>
        </div>
        <div class="form-group">
          <label>Número de Documento</label>
          <input type="text" value={usuario?.ced_usu ?? ""} readonly />
        </div>
      </div>

      <div class="form-group">
        <label>Teléfono</label>
        <input type="tel" value={usuario?.num_tel_usu ?? ""} readonly />
      </div>

      <h3 style="font-size: 1.3rem;">Requisitos</h3>
      <div class="requisitos-container">
        {requisitosCompletos ? (
          requisitos.map((req, index) => {
            return (
              <div class="requisito-item">
                <div class="requisito-info">
                  <span class="requisito-texto">{req.nom_req}</span>
                  <div class="requisito-estado">
                    <input
                      type="checkbox"
                      class="requisito-checkbox"
                      id={`req-check-${index}`}
                      name="requisitosMarcados"
                      value={index}
                    />
                    <label class="custom-checkbox" for={`req-check-${index}`}></label>
                  </div>
                </div>
              </div>
            );
          })
        ) : (
          <p style="color: red;">No hay requisitos registrados para este curso.</p>
        )}
      </div>

      {esPagado && (
        <div class="form-card" style="margin-top: 2rem;">
          <h2 style="font-size: 1.4rem;">Proceso de Pago</h2>
          <div class="form-group">
            <label for="metodoPago">Forma de pago</label>
            <select id="metodoPago" name="metodoPago" required>
              <option value="efectivo">Efectivo</option>
              <option value="transferencia">Transferencia Bancaria</option>
            </select>
          </div>

          <div id="formEfectivo" class="formulario-pago">
            <h4>Pago en Secretaría</h4>
            <p><strong>Lugar:</strong> Secretaría de la FISEI</p>
          </div>

          <div id="formTransferencia" class="formulario-pago">
            <h4>Transferencia Bancaria</h4>
            <p><strong>Banco:</strong> Banco Pichincha</p>
            <p><strong>Cuenta:</strong> Corriente #2206674884</p>
          </div>

          <div class="contenedor-file">
            <label for="file-upload" class="custom-file-upload">
              <img src="/img/CRUD/upload.png" alt="Subir" class="upload-icon" />
              <span>Subir comprobante</span>
            </label>
            <input id="file-upload" name="comprobante" type="file" class="input-file" onchange="mostrarNombreArchivo(event)" />
            <p class="file-name" id="nombre-archivo">No se ha seleccionado ningún archivo</p>
          </div>
        </div>
      )}

      <div class="form-row" style="margin-top: 2rem;">
        <button class="submit-button" type="button" onclick="history.back()">Cancelar</button>
        <button
          class="submit-button"
          type="submit"
          id="btn-inscribirse"
          disabled={!datosUsuarioCompletos}
        >
          Inscribirse
        </button>
      </div>
    </div>

    <div class="vehicle-card" style="margin-top: 2rem;">
      <h3>{evento?.nom_eve ?? "Evento no disponible"}</h3>
      <img
        src={evento?.img_eve ?? "/img/placeholder.jpg"}
        alt="Curso"
        class="curso-imagen"
      />
      <p><strong>Asignación:</strong> {evento?.eventos_asignaciones?.[0]?.asignaciones?.nom_asi ?? "-"}</p>
      <p><strong>Categoría:</strong> {evento?.categorias_eventos?.nom_cat ?? "-"}</p>
      <p><strong>Precio:</strong> ${evento?.precio ?? "0.00"}</p>
      <p><strong>Área:</strong> {evento?.are_eve ?? "-"}</p>
      <p><strong>Fecha Inicio:</strong> {new Date(evento?.fec_ini_eve ?? "").toLocaleDateString("es-EC")}</p>
      <p><strong>Duración:</strong> {evento?.dur_eve ?? 0} horas</p>
    </div>
  </form>
)}

<script is:inline>
  // Solo para el frontend, no persistente
  document.addEventListener("DOMContentLoaded", () => {
    const checks = document.querySelectorAll('input[name="requisitosMarcados"]');
    const btn = document.getElementById("btn-inscribirse");
    // Corrige: datosUsuarioCompletos como valor JS real, no como objeto
    const datosUsuarioCompletos = !!JSON.parse(document.getElementById("datos-usuario-completos").value);
    function actualizarBoton() {
      if (checks.length === 0) {
        btn.disabled = !datosUsuarioCompletos;
        return;
      }
      const todosMarcados = Array.from(checks).every(c => c.checked);
      btn.disabled = !todosMarcados || !datosUsuarioCompletos;
    }
    checks.forEach((check) => {
      check.addEventListener("change", actualizarBoton);
    });
    actualizarBoton();
  });

  function validarRequisitosMarcados() {
    const checks = document.querySelectorAll('input[name="requisitosMarcados"]');
    const datosUsuarioCompletos = !!JSON.parse(document.getElementById("datos-usuario-completos").value);
    if (!datosUsuarioCompletos) {
      alert("Completa tus datos personales para inscribirte.");
      return false;
    }
    if (checks.length === 0) return true;
    const todosMarcados = Array.from(checks).every(c => c.checked);
    if (!todosMarcados) {
      alert("Debes marcar todos los requisitos para inscribirte.");
      return false;
    }
    return true;
  }

  function mostrarNombreArchivo(e) {
    const input = e.target;
    const p = document.getElementById("nombre-archivo");
    if (input.files && input.files.length > 0) {
      p.textContent = input.files[0].name;
    } else {
      p.textContent = "No se ha seleccionado ningún archivo";
    }
  }
</script>
<input type="hidden" id="datos-usuario-completos" value={JSON.stringify(!!datosUsuarioCompletos)} />
