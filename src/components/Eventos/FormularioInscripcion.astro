---
import "../../styles/Inscripcion.css";
import { actions } from "astro:actions";

interface CampoProps {
    usuario: any;
    evento: any;
    requisitos: any[];
    inscripcion?: any;
}

const { usuario, evento, requisitos } = Astro.props as CampoProps;

const usuarioPlano = {
    cor_cue: usuario?.cor_cue,
    nom_usu1: usuario?.nom_usu1,
    ape_usu1: usuario?.ape_usu1,
    ced_usu: usuario?.ced_usu,
    num_tel_usu: usuario?.num_tel_usu,
};

const eventoPlano = {
    id_eve: evento?.id_eve,
    precio: evento?.precio,
};

const requisitosCompletos = Array.isArray(requisitos) && requisitos.length > 0;
const datosUsuarioCompletos =
    usuario?.nom_usu1 && usuario?.ape_usu1 && usuario?.ced_usu;
const esPagado = Number(evento?.precio ?? 0) > 0;
const requiereCarta = Boolean(evento?.requiere_carta);

// Inicialización
let inscripcion = null;
let inscripcionResult = null;
let inscripcionError = null;

const idUsuarioBusqueda = usuario?.cor_cue || "";
const idEventoBusqueda = evento?.id_eve || "";

// Procesamiento del POST
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const idUsuario = formData.get("idUsuario") ?? "";
    const idEvento = formData.get("idEvento") ?? "";
    let metodoPago = formData.get("metodoPago") ?? "";
    let enlaceComprobante: string | undefined = undefined;

    // NUEVO: Obtener carta de motivación si es requerida
    let cartaMotivacion: string | undefined = undefined;
    if (requiereCarta) {
        cartaMotivacion = formData.get("car_mot_eve")?.toString().trim();
        if (!cartaMotivacion) {
            inscripcionError = { message: "Debes escribir la carta de motivación para inscribirte." };
        }
    }

    // Procesamiento para cursos pagados
    if (esPagado) {
        // Normaliza el método de pago a los valores válidos de la base de datos
        if (typeof metodoPago === "string") {
            const metodo = metodoPago.trim().toUpperCase();
            if (["TRANSFERENCIA", "DEPOSITO", "ONLINE"].includes(metodo)) {
                metodoPago = metodo;
            } else if (metodo === "EFECTIVO") {
                metodoPago = "DEPOSITO";
            } else {
                metodoPago = "TRANSFERENCIA";
            }
        }

        // Procesa el comprobante si existe y es un archivo válido
        const comprobante = formData.get("comprobante");
        if (
            comprobante &&
            typeof comprobante === "object" &&
            comprobante instanceof File &&
            comprobante.name &&
            comprobante.size > 0
        ) {
            // Llama a la action para subir el archivo y obtener la URL
            const uploadResult = await Astro.callAction(
                actions.uploadComprobante,
                formData,
            );
            if (uploadResult?.data?.url) {
                enlaceComprobante = uploadResult.data.url;
            } else {
                throw new Error("Error al subir el comprobante de pago.");
            }
        }
    }

    try {
        // Define el tipo correcto para los parámetros según la action
        const params: {
            idUsuario: string;
            idEvento: string;
            metodoPago?: string;
            enlaceComprobante?: string;
            car_mot_eve?: string; // <-- Agrega este campo
        } = {
            idUsuario:
                typeof idUsuario === "string" ? idUsuario : String(idUsuario),
            idEvento:
                typeof idEvento === "string" ? idEvento : String(idEvento),
        };
        if (esPagado) {
            params.metodoPago =
                typeof metodoPago === "string"
                    ? metodoPago
                    : String(metodoPago);
            if (enlaceComprobante) {
                params.enlaceComprobante = enlaceComprobante;
            }
        }
        // NUEVO: Agregar carta de motivación si existe
        if (requiereCarta && cartaMotivacion) {
            params.car_mot_eve = cartaMotivacion;
        }
        // Si hay error por carta de motivación, no continuar
        if (inscripcionError) throw inscripcionError;

        const { data, error } = await Astro.callAction(
            actions.setDatosInscripcion,
            params,
        );
        inscripcionResult = data;
        inscripcionError = error;
    } catch (err) {
        inscripcionError = {
            message:
                err && typeof err === "object" && "message" in err
                    ? err.message
                    : "Error inesperado al inscribir.",
        };
    }
}

// Verificar si ya está inscrito correctamente (corregido)
let yaInscrito = false;
if (idUsuarioBusqueda && idEventoBusqueda) {
    const { data } = await Astro.callAction(actions.getDatosInscripcion, {
        idUsuario: idUsuarioBusqueda,
        idEvento: idEventoBusqueda,
    });
    yaInscrito = Boolean(data?.data?.inscripcion?.id_ins); // Esta es la validación correcta
}
---

{/* MENSAJE ÚNICO CENTRADO Y CON ESTILO */}
{
    (inscripcionResult || inscripcionError || yaInscrito) && (
        <div
            style="
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 120px;
    margin-bottom: 2rem;
  "
        >
            <div
                style={`
      padding: 1.5rem 2.5rem;
      border-radius: 12px;
      font-size: 1.2rem;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 2px 12px #0001;
      background: #fff;
      color: ${
          inscripcionError
              ? "#c0392b"
              : inscripcionResult
                ? "#1e7e34"
                : "#e67e22"
      };
      border: 2px solid ${
          inscripcionError
              ? "#e74c3c"
              : inscripcionResult
                ? "#28a745"
                : "#f39c12"
      };
      max-width: 600px;
      margin: 0 auto;
    `}
            >
                {inscripcionError
                    ? `Error al inscribirse: ${inscripcionError.message}`
                    : inscripcionResult
                      ? "Inscripción realizada correctamente. Estado: pendiente de revisión."
                      : "Ya estás inscrito en este evento. Estado: pendiente de revisión."}
            </div>
            {(inscripcionResult || yaInscrito) && (
                <a
                    href="/homeUser"
                    style="
        margin-top: 2rem;
        display: inline-block;
        background: #1e7e34;
        color: #fff;
        padding: 0.7rem 2rem;
        border-radius: 8px;
        font-size: 1.1rem;
        font-weight: bold;
        text-decoration: none;
        box-shadow: 0 2px 8px #0001;
        transition: background 0.2s;
      "
                    onmouseover="this.style.background='#145523'"
                    onmouseout="this.style.background='#1e7e34'"
                >
                    Ir a inicio
                </a>
            )}
        </div>
    )
}

{/* SOLO muestra el formulario si NO está inscrito y no acaba de inscribirse */}
{
    !yaInscrito && !inscripcionResult && (
        <form
            id="form-inscripcion"
            class="container"
            style="max-width: 1200px; margin: 0 auto; font-size: 1.05rem;"
            method="POST"
            enctype="multipart/form-data"
            onsubmit="return validarRequisitosMarcados();"
        >
            <input
                type="hidden"
                name="idUsuario"
                value={usuario?.cuentas?.[0]?.id_cue || usuario?.id_usu || ""}
            />
            <input type="hidden" name="idEvento" value={evento?.id_eve || ""} />
            <div class="form-card" style="padding: 2rem;">
                <h2 style="font-size: 1.6rem;">Inscripción</h2>
                <p>{new Date().toLocaleDateString("es-EC")}</p>

                <h3 style="font-size: 1.3rem;">Datos del Usuario</h3>
                <div class="form-group">
                    <label>Correo electrónico</label>
                    <input
                        type="email"
                        value={usuario?.cor_cue ?? usuario?.cuentas?.[0]?.cor_cue ?? ""}
                        readonly
                    />
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Nombre</label>
                        <input
                            type="text"
                            value={usuario?.nom_usu1 ?? ""}
                            readonly
                        />
                    </div>
                    <div class="form-group">
                        <label>Apellido</label>
                        <input
                            type="text"
                            value={usuario?.ape_usu1 ?? ""}
                            readonly
                        />
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label>Tipo de Documento</label>
                        <select disabled>
                            <option selected>Cédula</option>
                            <option>Pasaporte</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Número de Documento</label>
                        <input
                            type="text"
                            value={usuario?.ced_usu ?? ""}
                            readonly
                        />
                    </div>
                </div>

                <div class="form-group">
                    <label>Teléfono</label>
                    <input
                        type="tel"
                        value={usuario?.num_tel_usu ?? ""}
                        readonly
                    />
                </div>

                <h3 style="font-size: 1.3rem;">Requisitos</h3>
                <div class="requisitos-container">
                    {requisitosCompletos ? (
                        requisitos.map((req, index) => {
                            return (
                                <div class="requisito-item">
                                    <div class="requisito-info">
                                        <span class="requisito-texto">
                                            {req.nom_req}
                                        </span>
                                        <div class="requisito-estado">
                                            <input
                                                type="checkbox"
                                                class="requisito-checkbox"
                                                id={`req-check-${index}`}
                                                name="requisitosMarcados"
                                                value={index}
                                            />
                                            <label
                                                class="custom-checkbox"
                                                for={`req-check-${index}`}
                                            />
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                    ) : (
                        <p style="color: red;">
                            No hay requisitos registrados para este curso.
                        </p>
                    )}
                </div>

                {esPagado && (
                    <div class="form-card" style="margin-top: 2rem;">
                        <h2 style="font-size: 1.4rem;">Proceso de Pago</h2>
                        <div class="form-group">
                            <label for="metodoPago">Forma de pago</label>
                            <select id="metodoPago" name="metodoPago" required>
                                <option value="efectivo">Efectivo</option>
                                <option value="transferencia">
                                    Transferencia Bancaria
                                </option>
                            </select>
                        </div>

                        <div id="formEfectivo" class="formulario-pago">
                            <h4>Pago en Secretaría</h4>
                            <p>
                                <strong>Lugar:</strong> Secretaría de la FISEI
                            </p>
                        </div>

                        <div id="formTransferencia" class="formulario-pago">
                            <h4>Transferencia Bancaria</h4>
                            <p>
                                <strong>Banco:</strong> Banco Pichincha
                            </p>
                            <p>
                                <strong>Cuenta:</strong> Corriente #2206674884
                            </p>
                        </div>

                        <div class="contenedor-file">
                            <label for="file-upload" class="custom-file-upload">
                                <img
                                    src="/img/CRUD/upload.png"
                                    alt="Subir"
                                    class="upload-icon"
                                />
                                <span>Subir comprobante</span>
                            </label>
                            <input
                                id="file-upload"
                                name="comprobante"
                                type="file"
                                class="input-file"
                                onchange="mostrarNombreArchivo(event)"
                            />
                            <p class="file-name" id="nombre-archivo">
                                No se ha seleccionado ningún archivo
                            </p>
                        </div>
                    </div>
                )}

                {/* Detectar si el evento requiere carta de motivación */}
                {requiereCarta && (
                    <div class="form-group" style="margin-top: 1.5rem;">
                        <label for="car_mot_eve" style="font-weight: bold;">
                            Carta de motivación <span style="color: red;">*</span>
                        </label>
                        <textarea
                            id="car_mot_eve"
                            name="car_mot_eve"
                            rows="6"
                            required={requiereCarta}
                            placeholder="Escribe aquí tu carta de motivación para inscribirte en este evento..."
                            style="width: 100%; padding: 0.8rem; border-radius: 8px; border: 1px solid #ccc; font-size: 1rem;"
                        ></textarea>
                    </div>
                )}

                <div class="form-row" style="margin-top: 2rem;">
                    <button
                        class="submit-button"
                        type="button"
                        onclick="history.back()"
                    >
                        Cancelar
                    </button>
                    <button
                        class="submit-button"
                        type="submit"
                        id="btn-inscribirse"
                    >
                        Inscribirse
                    </button>
                </div>

                {/* Mensaje de error visual para validación de requisitos/pago */}
                <div
                    id="mensaje-error-validacion"
                    style="display:none; margin-top:1rem; text-align:center;"
                >
                    {/* El mensaje se inserta dinámicamente */}
                </div>
            </div>

            <div class="vehicle-card" style="margin-top: 2rem;">
                <h3>{evento?.nom_eve ?? "Evento no disponible"}</h3>
                <img
                    src={evento?.img_eve ?? "/img/placeholder.jpg"}
                    alt="Curso"
                    class="curso-imagen"
                />
                <p>
                    <strong>Asignación:</strong>{" "}
                    {evento?.asignaciones?.nom_asi ?? "-"}
                </p>
                <p>
                    <strong>Categoría:</strong>{" "}
                    {evento?.categorias_eventos?.nom_cat ?? "-"}
                </p>
                <p>
                    <strong>Precio:</strong> ${evento?.precio ?? "0.00"}
                </p>
                <p>
                    <strong>Área:</strong> {evento?.are_eve ?? "-"}
                </p>
                <p>
                    <strong>Fecha Inicio:</strong>{" "}
                    {new Date(evento?.fec_ini_eve ?? "").toLocaleDateString(
                        "es-EC",
                    )}
                </p>
                <p>
                    <strong>Duración:</strong> {evento?.dur_eve ?? 0} horas
                </p>
            </div>
        </form>
    )
}

<script is:inline>
    function mostrarErrorValidacion(msg) {
        const div = document.getElementById("mensaje-error-validacion");
        if (div) {
            div.style.display = "block";
            div.innerHTML = `
        <span style="
          display:inline-block;
          background:#fff0f0;
          color:#c0392b;
          border:1.5px solid #e74c3c;
          border-radius:8px;
          padding:0.8rem 1.2rem;
          font-weight:bold;
          font-size:1.1rem;
          box-shadow:0 2px 8px #0001;
        ">${msg}</span>
      `;
        }
    }
    function ocultarErrorValidacion() {
        const div = document.getElementById("mensaje-error-validacion");
        if (div) {
            div.style.display = "none";
            div.innerHTML = "";
        }
    }

    function validarRequisitosMarcados() {
        const checks = document.querySelectorAll(
            'input[name="requisitosMarcados"]',
        );
        const datosUsuarioCompletos = !!JSON.parse(
            document.getElementById("datos-usuario-completos").value,
        );
        const esPagado = !!JSON.parse(
            document.getElementById("es-pagado").value,
        );
        const requiereCarta = !!JSON.parse(document.getElementById("requiere-carta").value);
        ocultarErrorValidacion();
        if (!datosUsuarioCompletos) {
            mostrarErrorValidacion(
                "Completa tus datos personales para inscribirte.",
            );
            return false;
        }
        if (checks.length > 0) {
            const todosMarcados = Array.from(checks).every((c) => c.checked);
            if (!todosMarcados) {
                mostrarErrorValidacion(
                    "Debes marcar todos los requisitos para inscribirte.",
                );
                return false;
            }
        }
        if (esPagado) {
            const fileInput = document.getElementById("file-upload");
            if (!fileInput || !fileInput.files.length) {
                mostrarErrorValidacion("Debes subir el comprobante de pago.");
                return false;
            }
        }
        if (requiereCarta) {
            const carta = document.getElementById("car_mot_eve");
            if (!carta || !carta.value.trim()) {
                mostrarErrorValidacion("Debes escribir la carta de motivación para inscribirte.");
                return false;
            }
        }
        ocultarErrorValidacion();
        return true;
    }

    // Oculta el error si el usuario corrige la acción
    document.addEventListener("DOMContentLoaded", () => {
        const checks = document.querySelectorAll(
            'input[name="requisitosMarcados"]',
        );
        const fileInput = document.getElementById("file-upload");
        checks.forEach((check) => {
            check.addEventListener("change", () => {
                ocultarErrorValidacion();
            });
        });
        if (fileInput) {
            fileInput.addEventListener("change", () => {
                ocultarErrorValidacion();
            });
        }
    });

    function mostrarNombreArchivo(e) {
        const input = e.target;
        const p = document.getElementById("nombre-archivo");
        if (input.files && input.files.length > 0) {
            p.textContent = input.files[0].name;
        } else {
            p.textContent = "No se ha seleccionado ningún archivo JPEG, PNG";
        }
    }
</script>
<input
    type="hidden"
    id="datos-usuario-completos"
    value={JSON.stringify(!!datosUsuarioCompletos)}
/>
<input type="hidden" id="es-pagado" value={JSON.stringify(!!esPagado)} />
<input type="hidden" id="requiere-carta" value={JSON.stringify(!!requiereCarta)} />
