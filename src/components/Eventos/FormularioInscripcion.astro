---
import "../../styles/Inscripcion.css";
import { actions } from "astro:actions";

interface CampoProps {
    usuario: any;
    evento: any;
    requisitos?: any[];
    inscripcion?: any;
    es_estudiante: boolean;
    tipo_usuario: string;
    informacion_academica?: {
        carrera?: string;
        facultad?: string;
        codigo_carrera?: string;
    } | null;
}

const {
    usuario,
    evento,
    requisitos = [],
    inscripcion,
    es_estudiante,
    tipo_usuario,
    informacion_academica,
} = Astro.props as CampoProps;

const usuarioPlano = {
    cor_cue: usuario?.cor_cue,
    nom_usu1: usuario?.nom_usu1,
    ape_usu1: usuario?.ape_usu1,
    ced_usu: usuario?.ced_usu,
    num_tel_usu: usuario?.num_tel_usu,
};

const eventoPlano = {
    id_eve: evento?.id_eve,
    precio: evento?.precio,
};

const requisitosCompletos = Array.isArray(requisitos) && requisitos.length > 0;
const datosUsuarioCompletos =
    usuario?.nom_usu1 && usuario?.ape_usu1 && usuario?.ced_usu;
const esPagado = Number(evento?.precio ?? 0) > 0;
const requiereCarta = Boolean(evento?.requiere_carta);

// Inicialización

let inscripcionResult = null;
let inscripcionError = null;

const idUsuarioBusqueda = usuario?.cor_cue || "";
const idEventoBusqueda = evento?.id_eve || "";

// Procesamiento del POST
if (Astro.request.method === "POST") {
    const formData = await Astro.request.formData();
    const idUsuario = formData.get("idUsuario") ?? "";
    const idEvento = formData.get("idEvento") ?? "";
    let metodoPago = formData.get("metodoPago") ?? "";
    let enlaceComprobante: string | undefined = undefined;

    // NUEVO: Obtener carta de motivación si es requerida
    let cartaMotivacion: string | undefined = undefined;
    if (requiereCarta) {
        cartaMotivacion = formData.get("car_mot_eve")?.toString().trim();
        if (!cartaMotivacion) {
            inscripcionError = {
                message:
                    "Debes escribir la carta de motivación para inscribirte.",
            };
        }
    }

    // Procesamiento para cursos pagados
    if (esPagado) {
        // Normaliza el método de pago a los valores válidos de la base de datos
        if (typeof metodoPago === "string") {
            const metodo = metodoPago.trim().toUpperCase();
            if (["TRANSFERENCIA", "EFECTIVO"].includes(metodo)) {
                metodoPago = metodo;
            } else {
                metodoPago = "TRANSFERENCIA"; // Valor por defecto seguro
            }
        }

        // Procesa el comprobante si existe y es un archivo válido
        const comprobante = formData.get("comprobante");
        if (
            comprobante &&
            typeof comprobante === "object" &&
            comprobante instanceof File &&
            comprobante.name &&
            comprobante.size > 0
        ) {
            // Llama a la action para subir el archivo y obtener la URL
            const uploadResult = await Astro.callAction(
                actions.uploadComprobante,
                formData,
            );
            if (uploadResult?.data?.url) {
                enlaceComprobante = uploadResult.data.url;
            } else {
                throw new Error("Error al subir el comprobante de pago.");
            }
        }
    }

    try {
        // Define el tipo correcto para los parámetros según la action
        const params: {
            idUsuario: string;
            idEvento: string;
            metodoPago?: string;
            enlaceComprobante?: string;
            car_mot_eve?: string; // <-- Agrega este campo
        } = {
            idUsuario:
                typeof idUsuario === "string" ? idUsuario : String(idUsuario),
            idEvento:
                typeof idEvento === "string" ? idEvento : String(idEvento),
        };
        if (esPagado) {
            params.metodoPago =
                typeof metodoPago === "string"
                    ? metodoPago
                    : String(metodoPago);
            if (enlaceComprobante) {
                params.enlaceComprobante = enlaceComprobante;
            }
        }
        // NUEVO: Agregar carta de motivación si existe
        if (requiereCarta && cartaMotivacion) {
            params.car_mot_eve = cartaMotivacion;
        }
        // Si hay error por carta de motivación, no continuar
        if (inscripcionError) throw inscripcionError;

        console.log("PARAMS ENVIADOS A setDatosInscripcion:", params);

        const { data, error } = await Astro.callAction(
            actions.setDatosInscripcion,
            params,
        );
        inscripcionResult = data;
        inscripcionError = error;
        // LOG para verificar si se guarda en la base de datos
        console.log("RESULTADO DE setDatosInscripcion:", { data, error });
    } catch (err) {
        inscripcionError = {
            message:
                err && typeof err === "object" && "message" in err
                    ? err.message
                    : "Error inesperado al inscribir.",
        };
    }
}

// Verificar si ya está inscrito correctamente (corregido)
let yaInscrito = false;
if (idUsuarioBusqueda && idEventoBusqueda) {
    const { data } = await Astro.callAction(actions.getDatosInscripcion, {
        idUsuario: idUsuarioBusqueda,
        idEvento: idEventoBusqueda,
    });
    yaInscrito = Boolean(data?.data?.inscripcion?.id_ins); // Esta es la validación correcta
}

// Validación de restricción de asignación
let restriccionAsignacion = null;
if (evento?.asignaciones) {
    const tipoAsignacion = evento.asignaciones.tip_asi;
    // Aplana el array de carreras y tipa los objetos
    const carrerasAsignacion =
        (evento.asignaciones.detalle_asignaciones?.flatMap(
            (det: { carreras: { id_car?: string; id_fac_per?: string }[] }) =>
                det.carreras,
        ) ?? []) as { id_car?: string; id_fac_per?: string }[];

    if (tipoAsignacion === "CARRERA") {
        const carreraPermitida = carrerasAsignacion.some(
            (carrera) => carrera.id_car === usuario?.id_car_per,
        );
        if (!carreraPermitida) {
            restriccionAsignacion =
                "No tienes acceso a este evento según tu carrera.";
        }
    } else if (tipoAsignacion === "FACULTAD") {
        const facultadPermitida = carrerasAsignacion.some(
            (carrera) => carrera.id_fac_per === usuario?.carreras?.id_fac_per,
        );
        if (!facultadPermitida) {
            restriccionAsignacion =
                "No tienes acceso a este evento según tu facultad.";
        }
    }
}
---

{/* MENSAJE ÚNICO CENTRADO Y CON ESTILO */}
{
    (inscripcionResult || inscripcionError || yaInscrito) && (
        <div
            style="
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                min-height: 120px;
                margin-bottom: 2rem;
            "
        >
            <div
                style={`padding: 1.5rem 2.5rem;
                    border-radius: 12px;
                    font-size: 1.2rem;
                    font-weight: bold;
                    text-align: center;
                    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.05);
                    background: #fafafa;
                    color: ${
                        inscripcionError ||
                        (inscripcionResult &&
                            inscripcionResult.success === false)
                            ? "#b01025"
                            : inscripcionResult &&
                                inscripcionResult.success === true
                              ? "#2c5f2d"
                              : "#d97706"
                    };
                    border: 2px solid ${
                        inscripcionError ||
                        (inscripcionResult &&
                            inscripcionResult.success === false)
                            ? "#b01025"
                            : inscripcionResult &&
                                inscripcionResult.success === true
                              ? "#2c5f2d"
                              : "#d97706"
                    };
                    max-width: 600px;
                    margin: 0 auto;`}
            >
                {inscripcionError
                    ? `Error al inscribirse: ${inscripcionError.message}`
                    : inscripcionResult && inscripcionResult.success === false
                      ? `Error al inscribirse: ${inscripcionResult.message}`
                      : inscripcionResult && inscripcionResult.success === true
                        ? "Inscripción realizada correctamente. Estado: pendiente de revisión."
                        : yaInscrito
                          ? "Ya estás inscrito en este evento."
                          : ""}
            </div>
            {(inscripcionResult && inscripcionResult.success === true) ||
            yaInscrito ? (
                <a
                    href="/homeUser"
                    style="margin-top: 2rem; display: inline-block; background: #b01025; color: #fff; padding: 0.7rem 2rem; border-radius: 8px; font-size: 1.1rem; font-weight: bold; text-decoration: none; box-shadow: 0 4px 15px rgba(176, 16, 37, 0.3); transition: all 0.2s ease;"
                    onmouseover="this.style.background='#880f1f'; this.style.transform='translateY(-2px)'"
                    onmouseout="this.style.background='#b01025'; this.style.transform='translateY(0)'"
                >
                    Ir a inicio
                </a>
            ) : null}
        </div>
    )
}

{/* SOLO muestra el formulario si NO está inscrito y no acaba de inscribirse */}
{
    !yaInscrito && !inscripcionResult && (
        <form
            id="form-inscripcion"
            class="container"
            style="max-width: 1200px; margin: 0 auto; font-size: 1.05rem;"
            method="POST"
            enctype="multipart/form-data"
            onsubmit="return validarRequisitosMarcados();"
        >
            <input
                type="hidden"
                name="idUsuario"
                value={usuario?.cor_cue ?? usuario?.cuentas?.[0]?.cor_cue ?? ""}
            />
            <input type="hidden" name="idEvento" value={evento?.id_eve || ""} />{" "}
            <div class="form-card" style="padding: 2rem;">
                <h2 style="font-size: 1.6rem; color: #b01025; margin-bottom: 1rem;">
                    Inscripción
                </h2>
                <p style="color: #666; margin-bottom: 2rem;">
                    {new Date().toLocaleDateString("es-EC")}
                </p>
                {/* INFORMACIÓN DEL TIPO DE USUARIO */}
                {(es_estudiante || informacion_academica) && (
                    <div style="background: #f5f5f5; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem; border-left: 4px solid #b01025;">
                        <h3 style="font-size: 1.2rem; color: #b01025; margin-bottom: 1rem;">
                            Tipo de Usuario:{" "}
                            <strong>
                                {es_estudiante
                                    ? "Estudiante Universitario"
                                    : "Público General"}
                            </strong>
                        </h3>

                        {es_estudiante && informacion_academica && (
                            <div style="margin-top: 1rem;">
                                <p style="margin: 0.5rem 0; color: #333;">
                                    <strong>Facultad:</strong>{" "}
                                    {informacion_academica.facultad ||
                                        "No definida"}
                                </p>
                                <p style="margin: 0.5rem 0; color: #333;">
                                    <strong>Carrera:</strong>{" "}
                                    {informacion_academica.carrera ||
                                        "No definida"}
                                </p>
                                {informacion_academica.codigo_carrera && (
                                    <p style="margin: 0.5rem 0; color: #333;">
                                        <strong>Código:</strong>{" "}
                                        {informacion_academica.codigo_carrera}
                                    </p>
                                )}
                            </div>
                        )}
                    </div>
                )}
                <h3 style="font-size: 1.3rem; color: #b01025;">
                    Datos del Usuario
                </h3>{" "}
                <div class="form-group">
                    <label style="color: #333; font-weight: 600;">
                        Correo electrónico
                    </label>
                    <input
                        type="email"
                        value={
                            usuario?.cor_cue ??
                            usuario?.cuentas?.[0]?.cor_cue ??
                            ""
                        }
                        readonly
                        style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                    />
                </div>{" "}
                <div class="form-row">
                    <div class="form-group">
                        <label style="color: #333; font-weight: 600;">
                            Nombre
                        </label>
                        <input
                            type="text"
                            value={usuario?.nom_usu1 ?? ""}
                            readonly
                            style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                        />
                    </div>
                    <div class="form-group">
                        <label style="color: #333; font-weight: 600;">
                            Apellido
                        </label>
                        <input
                            type="text"
                            value={usuario?.ape_usu1 ?? ""}
                            readonly
                            style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                        />
                    </div>
                </div>{" "}
                <div class="form-row">
                    <div class="form-group">
                        <label style="color: #333; font-weight: 600;">
                            Tipo de Documento
                        </label>
                        <select
                            disabled
                            style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                        >
                            <option selected>Cédula</option>
                            <option>Pasaporte</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label style="color: #333; font-weight: 600;">
                            Número de Documento
                        </label>
                        <input
                            type="text"
                            value={usuario?.ced_usu ?? ""}
                            readonly
                            style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                        />
                    </div>
                </div>
                <div class="form-group">
                    <label style="color: #333; font-weight: 600;">
                        Teléfono
                    </label>
                    <input
                        type="tel"
                        value={usuario?.num_tel_usu ?? ""}
                        readonly
                        style="background: #f5f5f5; color: #666; border: 1px solid #ddd;"
                    />
                </div>
                <h3 style="font-size: 1.3rem; color: #b01025;">Requisitos</h3>
                <div class="requisitos-container">
                    {requisitosCompletos ? (
                        requisitos.map((req, index) => {
                            return (
                                <div class="requisito-item">
                                    <div class="requisito-info">
                                        <span class="requisito-texto">
                                            {req.nom_req}
                                        </span>
                                        <div class="requisito-estado">
                                            <input
                                                type="checkbox"
                                                class="requisito-checkbox"
                                                id={`req-check-${index}`}
                                                name="requisitosMarcados"
                                                value={index}
                                            />
                                            <label
                                                class="custom-checkbox"
                                                for={`req-check-${index}`}
                                            />
                                        </div>
                                    </div>
                                </div>
                            );
                        })
                    ) : (
                        <p style="color: red;">
                            No hay requisitos registrados para este curso.
                        </p>
                    )}
                </div>{" "}
                {esPagado && (
                    <div
                        class="form-card"
                        style="margin-top: 2rem; background: #fff3cd; border: 2px solid #ffc107; border-radius: 8px;"
                    >
                        <h2 style="font-size: 1.4rem; color: #856404; margin-bottom: 1rem;">
                            💰 Información de Pago
                        </h2>
                        <div style="background: #fff3cd; padding: 1rem; border-radius: 6px; margin-bottom: 1.5rem;">
                            <p style="color: #856404; margin: 0; font-weight: 500;">
                                <strong>⚠️ Importante:</strong> Este evento
                                tiene un costo de{" "}
                                <strong>${evento?.precio || "0.00"}</strong>.
                                <br />
                                El proceso de pago estará disponible después de
                                que tu inscripción sea validada por el
                                administrador.
                            </p>
                        </div>
                        <div class="form-group">
                            <label for="metodoPago">Forma de pago</label>
                            <select id="metodoPago" name="metodoPago" required>
                                <option value="EFECTIVO">Efectivo</option>
                                <option value="TRANSFERENCIA">
                                    Transferencia Bancaria
                                </option>
                            </select>
                        </div>

                        <div id="formEfectivo" class="formulario-pago">
                            <h4>Pago en Secretaría</h4>
                            <p>
                                <strong>Lugar:</strong> Secretaría de la FISEI
                            </p>
                        </div>

                        <div id="formTransferencia" class="formulario-pago">
                            <h4>Transferencia Bancaria</h4>
                            <p>
                                <strong>Banco:</strong> Banco Pichincha
                            </p>
                            <p>
                                <strong>Cuenta:</strong> Corriente #2206674884
                            </p>
                        </div>

                        <div class="contenedor-file">
                            <label for="file-upload" class="custom-file-upload">
                                <img
                                    src="/img/CRUD/upload.png"
                                    alt="Subir"
                                    class="upload-icon"
                                />
                                <span>Subir comprobante</span>
                            </label>
                            <input
                                id="file-upload"
                                name="comprobante"
                                type="file"
                                class="input-file"
                                onchange="mostrarNombreArchivo(event)"
                            />
                            <p class="file-name" id="nombre-archivo">
                                No se ha seleccionado ningún archivo
                            </p>
                        </div>
                    </div>
                )}
                {/* Detectar si el evento requiere carta de motivación */}
                {requiereCarta && (
                    <div class="form-group" style="margin-top: 1.5rem;">
                        <label for="car_mot_eve" style="font-weight: bold;">
                            Carta de motivación{" "}
                            <span style="color: red;">*</span>
                        </label>
                        <textarea
                            id="car_mot_eve"
                            name="car_mot_eve"
                            rows="6"
                            required={requiereCarta}
                            placeholder="Escribe aquí tu carta de motivación para inscribirte en este evento..."
                            style="width: 100%; padding: 0.8rem; border-radius: 8px; border: 1px solid #ccc; font-size: 1rem;"
                        />
                    </div>
                )}
                <div class="form-row" style="margin-top: 2rem;">
                    <button
                        class="submit-button"
                        type="button"
                        onclick="history.back()"
                    >
                        Cancelar
                    </button>
                    <button
                        class="submit-button"
                        type="submit"
                        id="btn-inscribirse"
                    >
                        Inscribirse
                    </button>
                </div>
                {/* Mensaje de error visual para validación de requisitos/pago */}
                <div
                    id="mensaje-error-validacion"
                    style="display:none; margin-top:1rem; text-align:center;"
                >
                    {/* El mensaje se inserta dinámicamente */}
                </div>
            </div>
            <div class="vehicle-card" style="margin-top: 2rem;">
                <h3>{evento?.nom_eve ?? "Evento no disponible"}</h3>
                <img
                    src={evento?.img_eve ?? "/img/placeholder.jpg"}
                    alt="Curso"
                    class="curso-imagen"
                />
                <p>
                    <strong>Asignación:</strong>{" "}
                    {evento?.asignaciones?.nom_asi ?? "-"}
                </p>
                <p>
                    <strong>Categoría:</strong>{" "}
                    {evento?.categorias_eventos?.nom_cat ?? "-"}
                </p>
                <p>
                    <strong>Precio:</strong> ${evento?.precio ?? "0.00"}
                </p>
                <p>
                    <strong>Área:</strong> {evento?.are_eve ?? "-"}
                </p>
                <p>
                    <strong>Fecha Inicio:</strong>{" "}
                    {new Date(evento?.fec_ini_eve ?? "").toLocaleDateString(
                        "es-EC",
                    )}
                </p>
                <p>
                    <strong>Duración:</strong> {evento?.dur_eve ?? 0} horas
                </p>
            </div>
        </form>
    )
}

<script is:inline>
    function mostrarErrorValidacion(msg) {
        const div = document.getElementById("mensaje-error-validacion");
        if (div) {
            div.style.display = "block";
            div.innerHTML = `
        <span style="
          display:inline-block;
          background:#fff0f0;
          color:#c0392b;
          border:1.5px solid #e74c3c;
          border-radius:8px;
          padding:0.8rem 1.2rem;
          font-weight:bold;
          font-size:1.1rem;
          box-shadow:0 2px 8px #0001;
        ">${msg}</span>
      `;
        }
    }
    function ocultarErrorValidacion() {
        const div = document.getElementById("mensaje-error-validacion");
        if (div) {
            div.style.display = "none";
            div.innerHTML = "";
        }
    }

    function validarRequisitosMarcados() {
        const checks = document.querySelectorAll(
            'input[name="requisitosMarcados"]',
        );
        const datosUsuarioCompletos = !!JSON.parse(
            document.getElementById("datos-usuario-completos").value,
        );
        const esPagado = !!JSON.parse(
            document.getElementById("es-pagado").value,
        );
        const requiereCarta = !!JSON.parse(
            document.getElementById("requiere-carta").value,
        );
        ocultarErrorValidacion();
        if (!datosUsuarioCompletos) {
            mostrarErrorValidacion(
                "Completa tus datos personales para inscribirte.",
            );
            return false;
        }
        if (checks.length > 0) {
            const todosMarcados = Array.from(checks).every((c) => c.checked);
            if (!todosMarcados) {
                mostrarErrorValidacion(
                    "Debes marcar todos los requisitos para inscribirte.",
                );
                return false;
            }
        }
        if (esPagado) {
            const fileInput = document.getElementById("file-upload");
            if (!fileInput || !fileInput.files.length) {
                mostrarErrorValidacion("Debes subir el comprobante de pago.");
                return false;
            }
        }
        if (requiereCarta) {
            const carta = document.getElementById("car_mot_eve");
            if (!carta || !carta.value.trim()) {
                mostrarErrorValidacion(
                    "Debes escribir la carta de motivación para inscribirte.",
                );
                return false;
            }
        }
        ocultarErrorValidacion();
        return true;
    }

    // Oculta el error si el usuario corrige la acción
    document.addEventListener("DOMContentLoaded", () => {
        const checks = document.querySelectorAll(
            'input[name="requisitosMarcados"]',
        );
        const fileInput = document.getElementById("file-upload");
        checks.forEach((check) => {
            check.addEventListener("change", () => {
                ocultarErrorValidacion();
            });
        });
        if (fileInput) {
            fileInput.addEventListener("change", () => {
                ocultarErrorValidacion();
            });
        }
    });

    function mostrarNombreArchivo(e) {
        const input = e.target;
        const p = document.getElementById("nombre-archivo");
        if (input.files && input.files.length > 0) {
            p.textContent = input.files[0].name;
        } else {
            p.textContent = "No se ha seleccionado ningún archivo JPEG, PNG";
        }
    }
</script>
<input
    type="hidden"
    id="datos-usuario-completos"
    value={JSON.stringify(!!datosUsuarioCompletos)}
/>
<input type="hidden" id="es-pagado" value={JSON.stringify(!!esPagado)} />
<input
    type="hidden"
    id="requiere-carta"
    value={JSON.stringify(!!requiereCarta)}
/>
