---
import "../../styles/CarruselUTA.css";
---

<div class="slider">
<div class="list">
    <div class="item active">
      <div class="image-container">
        <img src="/img/Home/carrusel_1.png" alt="Imagen 1" />
        <div class="image-overlay"></div>
      </div>
      <div class="content">
        <div class="title">Eventos</div>
        <div class="description">
          Incentivar la investigación en los campos afines a sus áreas de trabajo.
        </div>
      </div>
    </div>

    <div class="item">
      <div class="image-container">
        <img src="/img/Home/carrusel_2.jpeg" alt="Imagen 2" />
        <div class="image-overlay"></div>
      </div>
      <div class="content">
        <div class="title">Cursos</div>
        <div class="description">
          Disponibilidad para todas las personas que deseen expandir sus conocimientos.
        </div>
      </div>
    </div>

    <div class="item">
      <div class="image-container">
        <img src="/img/Home/carrusel_4.jpeg" alt="Imagen 3" />
        <div class="image-overlay"></div>
      </div>
      <div class="content">
        <div class="title">Tecnología</div>
        <div class="description">
          Compromiso con el desarrollo tecnológico.
        </div>
      </div>
    </div>
  </div>

  <div class="navigation-buttons">
    <button class="nav-btn" data-index="0"></button>
    <button class="nav-btn" data-index="1"></button>
    <button class="nav-btn" data-index="2"></button>
  </div>
</div>

<script>
let currentIndex = 0;

window.addEventListener("DOMContentLoaded", () => {
  const sliderList = document.querySelector(".slider .list") as HTMLElement | null;
  if (!sliderList) return;
  
  const slides = sliderList.querySelectorAll(".item") as NodeListOf<HTMLElement>;
  const navButtons = document.querySelectorAll(".nav-btn") as NodeListOf<HTMLElement>;

  // Función para reiniciar y aplicar animaciones
  function applySlideAnimations(slide: HTMLElement) {
    const image = slide.querySelector('img') as HTMLImageElement;
    const title = slide.querySelector('.title') as HTMLElement;
    const description = slide.querySelector('.description') as HTMLElement;
    
    // Reiniciar animación de la imagen
    image.style.animation = 'none';
    void image.offsetWidth; // Forzar reflow
    image.style.animation = 'zoomInSlow 10s ease-in-out forwards';
    
    // Reiniciar animación del texto
    title.style.animation = 'none';
    description.style.animation = 'none';
    void title.offsetWidth;
    void description.offsetWidth;
    title.style.animation = 'textIn 0.6s ease-out forwards';
    description.style.animation = 'textIn 0.6s ease-out forwards 0.2s';
  }

  // Aplicar animaciones iniciales
  setTimeout(() => {
    const activeSlide = document.querySelector('.item.active');
    if (activeSlide) applySlideAnimations(activeSlide as HTMLElement);
  }, 50);

  // Función para animar el texto de salida
  async function animateTextOut(slide: HTMLElement) {
    const title = slide.querySelector('.title') as HTMLElement;
    const description = slide.querySelector('.description') as HTMLElement;
    
    title.style.animation = 'textOut 0.6s ease-in forwards';
    description.style.animation = 'textOut 0.6s ease-in forwards';
    
    await Promise.all([
      new Promise(resolve => title.addEventListener('animationend', resolve, {once: true})),
      new Promise(resolve => description.addEventListener('animationend', resolve, {once: true}))
    ]);
  }

  // Función principal para cambiar de slide
  async function goToSlide(index: number) {
    if (index === currentIndex || index < 0 || index >= slides.length) return;

    const currentSlide = slides[currentIndex];
    const nextSlide = slides[index];
    
    // Animación de salida del slide actual
    await animateTextOut(currentSlide);
    
    // Cambiar slides
    currentSlide.classList.remove("active");
    currentSlide.classList.add("prev");
    currentIndex = index;
    nextSlide.classList.add("active");

    setTimeout(() => {
      currentSlide.classList.remove("prev");
    }, 1000);

    // Aplicar animaciones al nuevo slide
    applySlideAnimations(nextSlide);

    // Actualizar estado de los botones
    navButtons.forEach((btn, i) => {
      btn.classList.toggle("active", i === currentIndex);
    });
  }

  // Agregar event listeners a los botones de navegación
  navButtons.forEach((button, index) => {
    button.addEventListener("click", () => goToSlide(index));
  });

  setInterval(() => {
    const nextIndex = (currentIndex + 1) % slides.length;
    goToSlide(nextIndex);
  }, 7000);
});
</script>