---
import { actions } from "astro:actions";

const {
  titulo,
  contenido,
  imagenUrl,
  invertir = false,
  modoEdicion = false,
  columna,
} = Astro.props;

const result = Astro.getActionResult(actions.updatePaginaPrincipal);
---

<section
  class="relative h-[480px] w-full bg-cover bg-center py-16 px-6 lg:px-24 text-white my-12"
  style={`background-image: url('${imagenUrl}');`}
  data-animated-section
>
  <!-- Capa oscura encima de la imagen -->
  <div class="absolute inset-0 bg-black/50"></div>

  <div
    class="relative z-10 max-w-6xl mx-auto flex flex-col my-18 items-center gap-12"
  >
    <!-- Texto -->
    <div
      class={`absolute  space-y-6 top-3 bottom-3 right-30 left-30
    ${invertir ? "lg:text-end" : "lg:text-start"}`}
    >
      <form
        action={actions.updatePaginaPrincipal}
        method="post"
        enctype="multipart/form-data"
        class="flex flex-col gap-5 items-center lg:items-start"
      >
        <h2
          class="text-4xl lg:text-6xl font-bold drop-shadow-lg underline decoration-2 underline-offset-10 text-animate animate-60 w-full"
        >
          {titulo}
        </h2>
        {
          modoEdicion ? (
            <>
              <textarea
                id={`contenido-${columna}`}
                name={columna}
                class="w-full bg-transparent p-2 text-lg focus:outline-none resize-none placeholder:text-gray-300 border-b border-white text-white drop-shadow text-animate animate-20"
                rows="6"
                required
                placeholder="Escribe algo"
              >
                {contenido}
              </textarea>

              <button
                type="submit"
                class="bg-gradient-to-r from-red-700 via-red-800 to-red-900 text-white text-sm px-5 py-2.5 rounded-full shadow-md hover:shadow-lg hover:from-red-600 hover:to-red-800 transition-all duration-300 font-semibold tracking-wide text-animate animate-60"
              >
                Guardar Contenido
              </button>
            </>
          ) : (
            <p class="text-2xl font-bold leading-relaxed whitespace-pre-line drop-shadow-lg text-animate animate-20 w-full">
              {contenido}
            </p>
          )
        }

        {
          result?.data?.success === false && (
            <p class="text-red-400 text-sm mt-1 text-animate animate-60">
              {result?.data?.error}
            </p>
          )
        }
        {
          result?.data?.success === true && (
            <p class="text-green-300 text-sm mt-1 text-animate animate-60">
              {result?.data?.message}
            </p>
          )
        }
      </form>
    </div>
  </div>
</section>

<style>
  /* Animaciones para el texto - Mejoradas */
  .text-animate {
    opacity: 0;
    transform: translateY(var(--animation-start, 60px));
  }

  .animate-in {
    opacity: 1;
    transform: translateY(0);
    transition:
      opacity 0.8s ease-out,
      transform 0.8s ease-out;
  }

  /* Clases para diferentes desplazamientos */
  .animate-20 {
    --animation-start: 20px;
  }

  .animate-40 {
    --animation-start: 40px;
  }

  .animate-60 {
    --animation-start: 60px;
  }
</style>

<script type="module">
  document.addEventListener("DOMContentLoaded", () => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target
              .querySelectorAll(".text-animate")
              .forEach((el, index) => {
                setTimeout(() => el.classList.add("animate-in"), index * 100);
              });

            observer.unobserve(entry.target);
          }
        });
      },
      { threshold: 0.1 }
    );

    document
      .querySelectorAll("[data-animated-section]")
      .forEach((section) => observer.observe(section));
  });
</script>
