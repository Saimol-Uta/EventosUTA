---
import "../../../styles/Admin/ModalModificarEvento.css";
import ModalGestionarCuenta from "../UsuariosCRUD/ModalGestionarCuenta.astro";
import { actions } from "astro:actions";

// Obtener carreras para el select
const { data: carrerasData } = await Astro.callAction(
    actions.getAllCarreras,
    {},
);
const carreras = carrerasData?.carreras || [];
---

<div id="modalModificarUsuario" class="modal">
    <ModalGestionarCuenta />
    <div class="modal-contenido">
        <span class="cerrar" onclick="cerrarModalModificarUsuario()"
            >&times;</span
        >
        <div class="formulario-completo">
            <form
                class="formulario-modificar-registro"
                method="POST"
                id="formulario-modificar-usuario"
                enctype="multipart/form-data"
            >
                <input type="hidden" name="usuario_cedula" />

                <div class="contenedor-superior">
                    <p class="texto-centrado texto-roja">Información General</p>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Cédula</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="usuario-cedula"
                                readonly
                            />
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Primer Nombre</p>
                            <div class="contenedor-input">
                                <input
                                    type="text"
                                    class="input-dato"
                                    name="usuario-nombre1"
                                    required
                                />
                            </div>
                        </div>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Segundo Nombre</p>
                            <div class="contenedor-input">
                                <input
                                    type="text"
                                    class="input-dato"
                                    name="usuario-nombre2"
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Primer Apellido</p>
                            <div class="contenedor-input">
                                <input
                                    type="text"
                                    class="input-dato"
                                    name="usuario-apellido1"
                                    required
                                />
                            </div>
                        </div>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Segundo Apellido</p>
                            <div class="contenedor-input">
                                <input
                                    type="text"
                                    class="input-dato"
                                    name="usuario-apellido2"
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Fecha de Nacimiento</p>
                        <div class="contenedor-input">
                            <input
                                type="date"
                                class="input-dato"
                                name="usuario-fecha-nacimiento"
                                required
                            />
                        </div>
                    </div>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Número de Teléfono</p>
                        <div class="contenedor-input">
                            <input
                                type="tel"
                                class="input-dato"
                                name="numero-usuario"
                                pattern="[0-9]{10}"
                                title="Número de teléfono de 10 dígitos"
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Carrera</p>
                        <div class="contenedor-input">
                            <select
                                name="carrera-usuario"
                                class="input-dato"
                                required
                            >
                                <option value="">Seleccione una carrera</option>
                                {
                                    carreras.map((carrera: any) => (
                                        <option value={carrera.id_car}>
                                            {carrera.nom_car}{" "}
                                            {carrera.cod_car
                                                ? `(${carrera.cod_car})`
                                                : ""}
                                        </option>
                                    ))
                                }
                            </select>
                        </div>
                    </div>
                </div>

                <div class="contenedor-inferior">
                    <p class="texto-centrado texto-roja">Cuentas Asociadas</p>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Cuentas Actuales:</p>
                        <div id="cuentas-actuales" class="asignaciones-display">
                            <!-- Aquí se mostrará dinámicamente la lista de cuentas asociadas -->
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <div class="contenedor-botones-asignaciones">
                            <button
                                type="button"
                                id="btn-crear-cuenta"
                                class="boton-asignacion btn-agregar"
                            >
                                ➕ Crear Nueva Cuenta
                            </button>
                            <button
                                type="button"
                                id="btn-gestionar-cuentas"
                                class="boton-asignacion btn-gestionar"
                            >
                                🔧 Gestionar Cuentas
                            </button>
                        </div>
                    </div>

                    <div class="contenedor-boton-modificar">
                        <button
                            type="button"
                            class="boton-modificar"
                            onclick="cerrarModalModificarUsuario()"
                        >
                            Cancelar
                        </button>
                        <button type="submit" class="boton-modificar">
                            Modificar Usuario
                        </button>
                    </div>
                </div>
            </form>
        </div>
        <script>
            import { actions } from "astro:actions";
            import Swal from "sweetalert2";

            interface Usuario {
                id_usu: string;
                ced_usu: string;
                nom_usu1: string;
                nom_usu2?: string;
                ape_usu1: string;
                ape_usu2?: string;
                fec_nac_usu: string;
                num_tel_usu?: string;
                id_car_per?: string;
                carrera?: {
                    id_car: string;
                    nom_car: string;
                };
                cantidadCuentas: number;
            }
            declare global {
                interface Window {
                    abrirModalModificarUsuario: (usuarioId: string) => void;
                    cerrarModalModificarUsuario: () => void;
                    editarCuenta: (
                        cuentaId: string,
                        correo: string,
                        tipo: string,
                    ) => void;
                    eliminarCuenta: (
                        cuentaId: string,
                        cedulaUsuario: string,
                    ) => Promise<void>;
                    crearNuevaCuenta: () => void;
                    abrirModalGestionarCuenta: (
                        correo: string,
                        rol: string,
                        idCuenta?: string,
                    ) => void;
                }
            }

            async function abrirModalModificarUsuario(
                usuarioId: string,
            ): Promise<void> {
                const modal = document.getElementById("modalModificarUsuario");
                const form = document.getElementById(
                    "formulario-modificar-usuario",
                ) as HTMLFormElement;

                if (!modal || !form) return;

                // Obtener todos los usuarios del DOM
                const usuariosInputs = document.querySelectorAll(
                    'input[name="usuario"]',
                );
                const usuarios = Array.from(usuariosInputs).map((input) =>
                    JSON.parse((input as HTMLInputElement).value),
                );

                const usuario = usuarios.find(
                    (u: Usuario) => u.id_usu === usuarioId,
                );

                if (!usuario) return;

                // Llenar el formulario con los datos del usuario
                const cedula = form.querySelector(
                    'input[name="usuario-cedula"]',
                ) as HTMLInputElement;
                const nombre1 = form.querySelector(
                    'input[name="usuario-nombre1"]',
                ) as HTMLInputElement;
                const nombre2 = form.querySelector(
                    'input[name="usuario-nombre2"]',
                ) as HTMLInputElement;
                const apellido1 = form.querySelector(
                    'input[name="usuario-apellido1"]',
                ) as HTMLInputElement;
                const apellido2 = form.querySelector(
                    'input[name="usuario-apellido2"]',
                ) as HTMLInputElement;
                const fechaNacimiento = form.querySelector(
                    'input[name="usuario-fecha-nacimiento"]',
                ) as HTMLInputElement;
                const telefono = form.querySelector(
                    'input[name="numero-usuario"]',
                ) as HTMLInputElement;
                const carrera = form.querySelector(
                    'select[name="carrera-usuario"]',
                ) as HTMLSelectElement;
                const cedulaHidden = form.querySelector(
                    'input[name="usuario_cedula"]',
                ) as HTMLInputElement;

                // Asignar valores
                if (cedula) cedula.value = usuario.ced_usu || "";
                if (nombre1) nombre1.value = usuario.nom_usu1;
                if (nombre2) nombre2.value = usuario.nom_usu2 || "";
                if (apellido1) apellido1.value = usuario.ape_usu1;
                if (apellido2) apellido2.value = usuario.ape_usu2 || "";
                if (fechaNacimiento) {
                    const fecha = new Date(usuario.fec_nac_usu);
                    fechaNacimiento.value = fecha.toISOString().split("T")[0];
                }
                if (telefono) telefono.value = usuario.num_tel_usu || "";
                if (carrera) carrera.value = usuario.id_car_per || "";
                if (cedulaHidden) cedulaHidden.value = usuario.ced_usu || "";

                // Cargar las cuentas del usuario
                await cargarCuentasActuales(usuario.ced_usu || "");

                modal.style.display = "block";
            }
            function cerrarModalModificarUsuario(): void {
                const modal = document.getElementById("modalModificarUsuario");
                const form = document.getElementById(
                    "formulario-modificar-usuario",
                ) as HTMLFormElement;

                if (modal && form) {
                    modal.style.display = "none";
                    form.reset();
                }
            }

            async function cargarCuentasActuales(cedulaUsuario: string) {
                try {
                    const { data: cuentasData } =
                        await actions.getCuentaById(cedulaUsuario);

                    const contenedorCuentas =
                        document.getElementById("cuentas-actuales");
                    if (!contenedorCuentas) return;

                    if (cuentasData && cuentasData.length > 0) {
                        contenedorCuentas.innerHTML = cuentasData
                            .map(
                                (cuenta: any) => `
                            <div class="asignacion-item" data-cuenta-id="${cuenta.id_cue}">
                                <span class="asignacion-nombre">${cuenta.cor_cue || cuenta.correo_cue}</span>
                                <span class="asignacion-detalle">${cuenta.tip_cue}</span>
                                <div class="cuenta-acciones">
                                    <button type="button" class="btn-editar-cuenta" onclick="editarCuenta('${cuenta.id_cue}', '${cuenta.cor_cue || cuenta.correo_cue}', '${cuenta.tip_cue}')">
                                        ✏️ Editar
                                    </button>
                                    <button type="button" class="btn-eliminar-cuenta" onclick="eliminarCuenta('${cuenta.id_cue}', '${cedulaUsuario}')">
                                        ❌ Eliminar
                                    </button>
                                </div>
                            </div>
                        `,
                            )
                            .join("");
                    } else {
                        contenedorCuentas.innerHTML =
                            '<p class="no-cuentas">Este usuario no tiene cuentas asociadas.</p>';
                    }
                } catch (error) {
                    console.error("Error al cargar cuentas actuales:", error);
                    const contenedorCuentas =
                        document.getElementById("cuentas-actuales");
                    if (contenedorCuentas) {
                        contenedorCuentas.innerHTML =
                            '<p class="error-cuentas">Error al cargar las cuentas del usuario.</p>';
                    }
                }
            }

            async function eliminarCuenta(
                cuentaId: string,
                cedulaUsuario: string,
            ) {
                const resultado = await Swal.fire({
                    title: "¿Estás seguro?",
                    text: "Esta acción eliminará la cuenta del usuario.",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#dc2626",
                    cancelButtonColor: "#6b7280",
                    confirmButtonText: "Sí, eliminar",
                    cancelButtonText: "Cancelar",
                });

                if (resultado.isConfirmed) {
                    try {
                        const { data, error } = await actions.eliminarCuenta({
                            id_cue: cuentaId,
                        });

                        if (data?.success) {
                            await Swal.fire({
                                icon: "success",
                                title: "Eliminado",
                                text: "Cuenta eliminada correctamente.",
                                confirmButtonColor: "#059669",
                            });

                            // Recargar cuentas actuales
                            await cargarCuentasActuales(cedulaUsuario);
                        } else {
                            throw new Error(
                                error?.message ||
                                    "No se pudo eliminar la cuenta.",
                            );
                        }
                    } catch (error) {
                        console.error("Error al eliminar cuenta:", error);
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text:
                                error instanceof Error
                                    ? error.message
                                    : "No se pudo eliminar la cuenta.",
                            confirmButtonColor: "#dc2626",
                        });
                    }
                }
            }

            function editarCuenta(
                cuentaId: string,
                correo: string,
                tipo: string,
            ) {
                // Usar la función del modal de gestionar cuenta existente
                if (window.abrirModalGestionarCuenta) {
                    window.abrirModalGestionarCuenta(correo, tipo, cuentaId);
                } else {
                    console.error(
                        "La función abrirModalGestionarCuenta no está disponible",
                    );
                }
            }

            function crearNuevaCuenta() {
                // Obtener la cédula del usuario actual
                const cedulaInput = document.querySelector(
                    'input[name="usuario_cedula"]',
                ) as HTMLInputElement;
                const cedula = cedulaInput?.value;

                if (!cedula) {
                    Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "No se pudo obtener la cédula del usuario.",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                } // Usar la función del modal de gestionar cuenta para crear nueva cuenta
                if (window.abrirModalGestionarCuenta) {
                    window.abrirModalGestionarCuenta("", "estudiante", "");
                } else {
                    console.error(
                        "La función abrirModalGestionarCuenta no está disponible",
                    );
                }
            }

            document.addEventListener("DOMContentLoaded", () => {
                const form = document.getElementById(
                    "formulario-modificar-usuario",
                ) as HTMLFormElement;

                // Manejar envío del formulario
                if (form) {
                    form.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const formData = new FormData(form);

                        // Crear objeto con los datos del usuario
                        const usuarioData = {
                            cedula: formData.get("usuario_cedula") as string,
                            primerNombre: formData.get(
                                "usuario-nombre1",
                            ) as string,
                            segundoNombre:
                                (formData.get("usuario-nombre2") as string) ||
                                "",
                            primerApellido: formData.get(
                                "usuario-apellido1",
                            ) as string,
                            segundoApellido:
                                (formData.get("usuario-apellido2") as string) ||
                                "",
                            telefono:
                                (formData.get("numero-usuario") as string) ||
                                "",
                            carreraId: formData.get(
                                "carrera-usuario",
                            ) as string,
                            fechaNacimiento: formData.get(
                                "usuario-fecha-nacimiento",
                            ) as string,
                        };
                        try {
                            const formDataForAction = new FormData();
                            formDataForAction.append(
                                "cedula",
                                usuarioData.cedula,
                            );
                            formDataForAction.append(
                                "primerNombre",
                                usuarioData.primerNombre,
                            );
                            formDataForAction.append(
                                "segundoNombre",
                                usuarioData.segundoNombre,
                            );
                            formDataForAction.append(
                                "primerApellido",
                                usuarioData.primerApellido,
                            );
                            formDataForAction.append(
                                "segundoApellido",
                                usuarioData.segundoApellido,
                            );
                            formDataForAction.append(
                                "telefono",
                                usuarioData.telefono,
                            );
                            formDataForAction.append(
                                "carreraId",
                                usuarioData.carreraId,
                            );
                            formDataForAction.append(
                                "fechaNacimiento",
                                usuarioData.fechaNacimiento,
                            );

                            const { data, error } =
                                await actions.modificarUsuario(
                                    formDataForAction,
                                );

                            if (data?.success) {
                                await Swal.fire({
                                    icon: "success",
                                    title: "Éxito",
                                    text: "Usuario modificado correctamente.",
                                    confirmButtonColor: "#059669",
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                await Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text:
                                        error?.message ||
                                        "No se pudo modificar el usuario.",
                                    confirmButtonColor: "#dc2626",
                                });
                            }
                        } catch (error) {
                            console.error("Error:", error);
                            await Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Error al procesar la solicitud",
                                confirmButtonColor: "#dc2626",
                            });
                        }
                    });
                }

                // Event listeners para botones de cuentas
                const btnCrearCuenta =
                    document.getElementById("btn-crear-cuenta");
                const btnGestionarCuentas = document.getElementById(
                    "btn-gestionar-cuentas",
                );

                if (btnCrearCuenta) {
                    btnCrearCuenta.addEventListener("click", () => {
                        crearNuevaCuenta();
                    });
                }

                if (btnGestionarCuentas) {
                    btnGestionarCuentas.addEventListener("click", () => {
                        // Abrir modal general de gestión de cuentas (funcionalidad futura)
                        Swal.fire({
                            icon: "info",
                            title: "Información",
                            text: "Usa los botones individuales de cada cuenta para gestionarlas.",
                            confirmButtonColor: "#059669",
                        });
                    });
                }

                // Asignar funciones al objeto window
                window.abrirModalModificarUsuario = abrirModalModificarUsuario;
                window.cerrarModalModificarUsuario =
                    cerrarModalModificarUsuario;
            });
        </script>
    </div>
</div>
