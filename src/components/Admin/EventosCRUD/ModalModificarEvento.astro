---
import "../../../styles/Admin/ModalModificarEvento.css";

interface Props {
    categorias?: any[];
    organizadores?: any[];
}

const { categorias = [], organizadores = [] } = Astro.props;
---

<div id="modalModificarEvento" class="modal">
    <div class="modal-contenido">
        <span class="cerrar" onclick="cerrarModalModificarEvento()"
            >&times;</span
        >
        <div class="formulario-completo">
            <form
                class="formulario-modificar-registro"
                method="POST"
                id="formulario-modificar-evento"
                enctype="multipart/form-data"
            >
                <input type="hidden" name="evento_id" />

                <div class="contenedor-superior">
                    <p class="texto-centrado texto-roja">Información General</p>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Nombre</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="nombre"
                                required
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Descripción</p>
                        <div class="contenedor-input">
                            <textarea
                                class="input-dato"
                                name="descripcion"
                                rows="3"
                                required></textarea>
                        </div>
                    </div>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Cupos Máximos</p>
                            <div class="contenedor-input">
                                <input
                                    type="number"
                                    min="1"
                                    step="1"
                                    class="input-dato"
                                    name="cup_max"
                                    required
                                    placeholder="Ej: 40"
                                />
                            </div>
                        </div>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Categoría:</p>
                            <div class="contenedor-input">
                                <select
                                    name="categoria"
                                    class="input-dato"
                                    required
                                    onchange="mostrarInfoCategoriaModificar(this)"
                                >
                                    <option value=""
                                        >Seleccione una categoría</option
                                    >
                                    {
                                        categorias.map((categoria) => (
                                            <option
                                                value={categoria.id_cat}
                                                data-puntaje={
                                                    categoria.pun_apr_cat
                                                }
                                                data-asignacion={
                                                    categoria.asi_cat
                                                }
                                                data-requiere-puntaje={
                                                    categoria.requiere_puntaje
                                                }
                                                data-requiere-asistencia={
                                                    categoria.requiere_asistencia
                                                }
                                                data-brinda-certificado={
                                                    categoria.brinda_certificado
                                                }
                                                data-porcentaje-asistencia={
                                                    categoria.asi_cat
                                                }
                                            >
                                                {categoria.nom_cat}
                                            </option>
                                        ))
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Información dinámica de la categoría -->
                        <div
                            id="info-categoria"
                            class="contenedor-dato"
                            style="display: none;"
                        >
                            <p class="texto-dato">
                                Información de la Categoría
                            </p>
                            <div class="info-categoria-contenido">
                                <div id="info-puntaje" style="display: none;">
                                    <p class="info-item">
                                        <strong>Puntaje de aprobación:</strong>
                                        <span id="valor-puntaje">-</span> puntos
                                    </p>
                                </div>
                                <div
                                    id="info-asistencia"
                                >
                                    <p class="info-item">
                                        <strong>Requiere asistencia:</strong>
                                        <span id="valor-porcentaje-asistencia"
                                            >-</span
                                        >% mínimo
                                    </p>
                                </div>
                                <div
                                    id="info-certificado"
                                >
                                    <p class="info-item">
                                        <strong>Brinda certificado:</strong> Sí
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Área:</p>
                            <div class="contenedor-input">
                                <select name="area" class="input-dato">
                                    <option value="">Elija una Área</option>
                                    <option value="PRACTICA">Práctica</option>
                                    <option value="INVESTIGACION"
                                        >Investigación</option
                                    >
                                    <option value="ACADEMICA">Académica</option>
                                    <option value="TECNICA">Técnica</option>
                                    <option value="INDUSTRIAL"
                                        >Industrial</option
                                    >
                                    <option value="EMPRESARIAL"
                                        >Empresarial</option
                                    >
                                    <option value="IA">IA</option>
                                    <option value="REDES">Redes</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">¿Es gratuito?</p>
                            <div class="contenedor-input">
                                <select
                                    name="es_gratuito"
                                    class="input-dato"
                                    id="es-gratuito-select"
                                    onchange="togglePrecioModificar(this)"
                                >
                                    <option value="false"
                                        >No, tiene costo</option
                                    >
                                    <option value="true">Sí, es gratuito</option
                                    >
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato" id="contenedor-precio">
                            <p class="texto-dato">Precio (USD):</p>
                            <div class="contenedor-input precio-container">
                                <span class="precio-label">$</span>
                                <input
                                    type="number"
                                    step="0.01"
                                    min="0"
                                    max="999999.99"
                                    class="input-dato"
                                    name="precio"
                                    value="0"
                                    id="precio-input"
                                    oninput="toggleGratuito(this)"
                                />
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                ¿Requiere carta de motivación?
                            </p>
                            <div class="contenedor-input">
                                <select
                                    name="requiere_carta"
                                    class="input-dato"
                                >
                                    <option value="false"
                                        >No requiere carta</option
                                    >
                                    <option value="true"
                                        >Sí requiere carta</option
                                    >
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato" style="display: none;">
                            <p class="texto-dato">¿Es Destacado?</p>
                            <div class="contenedor-input">
                                <select name="es_destacado" class="input-dato">
                                    <option value="false">No destacado</option>
                                    <option value="true">Sí destacado</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-dato" style="display: none;">
                        <p class="texto-dato">
                            Carta de Motivación (Opcional):
                        </p>
                        <div class="contenedor-input">
                            <textarea
                                class="input-dato"
                                name="car_mot_eve"
                                rows="3"
                                placeholder="Instrucciones para la carta de motivación..."
                            ></textarea>
                        </div>
                    </div>
                </div>
                <div class="contenedor-superior">
                    <p class="texto-centrado texto-roja">Programación</p>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Fecha de Inicio:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Fecha de Finalización:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin"
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Fecha Inicio Inscripción:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio_inscripcion"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Fecha Fin Inscripción:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin_inscripcion"
                                    required
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Duración (Horas)</p>
                        <div class="contenedor-input">
                            <input
                                type="number"
                                min="1"
                                class="input-dato"
                                name="duracion"
                                placeholder="Duración en minutos"
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Ubicación</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="ubicacion"
                                required
                            />
                        </div>
                    </div>
                </div>
                <div class="contenedor-inferior">
                    <p class="texto-centrado texto-roja">Organizador</p>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Organizador</p>
                        <div class="contenedor-input">
                            <select
                                name="cedula_organizador"
                                class="input-dato"
                                required
                            >
                                <option value=""
                                    >Seleccione un organizador</option
                                >
                                {
                                    organizadores.map((organizador) => (
                                        <option value={organizador.ced_org}>
                                            {organizador.tit_aca_org}{" "}
                                            {organizador.nom_org1}{" "}
                                            {organizador.nom_org2 || ""}{" "}
                                            {organizador.ape_org1}{" "}
                                            {organizador.ape_org2 || ""} -{" "}
                                            {organizador.ced_org}
                                        </option>
                                    ))
                                }
                            </select>
                        </div>
                    </div>
                    <!-- Sección de Asignación -->
                    <div class="contenedor-superior">
                        <p class="texto-centrado texto-roja">Asignación</p>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Asignación del Evento:</p>
                            <div class="contenedor-input">
                                <select
                                    name="id_asignacion"
                                    class="input-dato"
                                    id="asignacion-evento"
                                >
                                    <option value=""
                                        >Seleccione una asignación</option
                                    >
                                    <!-- Las opciones se cargarán dinámicamente -->
                                </select>
                            </div>
                            <p class="texto-info-asignaciones">
                                La asignación determina qué carreras pueden
                                participar en este evento.
                            </p>
                        </div>
                    </div>
                    <div class="contenedor-boton-modificar">
                        <button
                            type="button"
                            class="boton-modificar"
                            onclick="cerrarModalModificarEvento()"
                            >Cancelar</button
                        >
                        <button type="submit" class="boton-modificar"
                            >Modificar Evento</button
                        >
                    </div>
                </div>
                <div class="contenedor-imagen">
                    <img
                        id="evento-imagen"
                        class="imagen-evento"
                        style="display: none;"
                        alt="Imagen del evento"
                    />

                    <div class="contenedor-file">
                        <label
                            for="file-upload-modificar"
                            class="custom-file-upload"
                        >
                            <img
                                src="/img/CRUD/upload.png"
                                alt="Subir imagen"
                                class="upload-icon"
                            />
                            <span>Seleccionar imagen</span>
                        </label>
                        <input
                            id="file-upload-modificar"
                            type="file"
                            name="imagen"
                            class="input-file"
                            accept="image/*"
                        />
                        <p class="file-name">
                            No se ha seleccionado ningún archivo
                        </p>
                    </div>
                </div>
            </form>
        </div>

        <style>
            .texto-info-asignaciones {
                margin-top: 5px;
                color: #6b7280;
                font-size: 12px;
                font-style: italic;
            }

            .input-dato[name="precio"]:disabled {
                background-color: #f3f4f6;
                color: #6b7280;
            }

            .contenedor-nombre {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
            }

            .contenedor-dato textarea {
                resize: vertical;
                min-height: 60px;
            }

            .precio-container {
                position: relative;
            }

            .precio-label {
                position: absolute;
                left: 10px;
                top: 50%;
                transform: translateY(-50%);
                color: #6b7280;
                pointer-events: none;
            }

            .input-dato[name="precio"] {
                padding-left: 25px;
            }

            /* Estilos para información de categoría */
            .info-categoria-contenido {
                background-color: white;
                border: 1px solid rgb(108, 19, 19);
                border-radius: 6px;
                padding: 12px;
                margin-top: 8px;
            }

            .info-item {
                margin: 6px 0;
                font-size: 14px;
                color: #374151;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .info-item strong {
                color: #1f2937;
                min-width: 140px;
            }

            #info-categoria {
                border-left: 3px solid rgb(108, 19, 19);
                padding-left: 12px;
                background-color: rgb(255, 250, 250);
                border-radius: 0 6px 6px 0;
            }

            #campos-puntaje,
            #campos-asistencia {
                border-left: 3px solid #10b981;
                padding-left: 12px;
                background-color: #f0fdf4;
                border-radius: 0 6px 6px 0;
            }

            .categoria-destacada {
                background-color: white !important;
                border: 2px solid rgb(108, 19, 19) !important;
            }
        </style>

        <script>
            import { actions } from "astro:actions";
            import Swal from "sweetalert2";
            interface Evento {
                id_eve: string;
                nom_eve: string;
                des_eve: string;
                fec_ini_eve: string;
                fec_fin_eve?: string;
                fec_ini_ins_eve: string;
                fec_fin_ins_eve: string;
                dur_eve?: number;
                are_eve?: string;
                ubi_eve: string;
                img_eve?: string;
                precio: number;
                ced_org_eve: string;
                id_cat_eve: string;
                es_gratuito: boolean;
                requiere_carta: boolean;
                es_destacado: boolean;
                car_mot_eve?: string;
                id_asi_eve?: string;
            }
            declare global {
                interface Window {
                    abrirModalModificarEvento: (eventoId: string) => void;
                    cerrarModalModificarEvento: () => void;
                    toggleGratuitoModificar: (input: HTMLInputElement) => void;
                    togglePrecioModificar: (select: HTMLSelectElement) => void;
                    mostrarInfoCategoriaModificar: (
                        select: HTMLSelectElement,
                    ) => void;
                }
            }

            let asignacionesDisponibles: any[] = [];

            // Función para mostrar información de categoría
            function mostrarInfoCategoriaModificar(
                select: HTMLSelectElement,
            ): void {
                const selectedOption = select.selectedOptions[0];

                // Elementos de información
                const infoCategoria = document.getElementById(
                    "info-categoria",
                ) as HTMLElement;
                const infoPuntaje = document.getElementById(
                    "info-puntaje",
                ) as HTMLElement;
                const infoAsistencia = document.getElementById(
                    "info-asistencia",
                ) as HTMLElement;
                const infoCertificado = document.getElementById(
                    "info-certificado",
                ) as HTMLElement;
                const valorPuntaje = document.getElementById(
                    "valor-puntaje",
                ) as HTMLElement;
                const valorPorcentajeAsistencia = document.getElementById(
                    "valor-porcentaje-asistencia",
                ) as HTMLElement;

                if (!selectedOption || !selectedOption.value) {
                    // Ocultar todo si no hay selección
                    if (infoCategoria) infoCategoria.style.display = "none";
                    return;
                }

                // Obtener datos de la categoría
                const puntajeApr = selectedOption.getAttribute("data-puntaje");
                const porcentajeAsistencia = selectedOption.getAttribute(
                    "data-porcentaje-asistencia",
                );
                const requierePuntaje =
                    selectedOption.getAttribute("data-requiere-puntaje") ===
                    "true";
                const requiereAsistencia =
                    selectedOption.getAttribute("data-requiere-asistencia") ===
                    "true";
                const brindaCertificado =
                    selectedOption.getAttribute("data-brinda-certificado") ===
                    "true";

                // Mostrar información de la categoría
                if (infoCategoria) {
                    infoCategoria.style.display = "block";

                    // Mostrar/ocultar información según los atributos
                    if (infoPuntaje && valorPuntaje) {
                        if (requierePuntaje && puntajeApr) {
                            infoPuntaje.style.display = "block";
                            valorPuntaje.textContent = puntajeApr;
                        } else {
                            infoPuntaje.style.display = "none";
                        }
                    }

                    if (infoAsistencia && valorPorcentajeAsistencia) {
                        if (requiereAsistencia && porcentajeAsistencia) {
                            infoAsistencia.style.display = "block";
                            valorPorcentajeAsistencia.textContent =
                                porcentajeAsistencia;
                        } else {
                            infoAsistencia.style.display = "none";
                        }
                    }

                    if (infoCertificado) {
                        if (brindaCertificado) {
                            infoCertificado.style.display = "block";
                        } else {
                            infoCertificado.style.display = "none";
                        }
                    }
                }

                console.log("📊 Información de categoría actualizada:", {
                    requierePuntaje,
                    requiereAsistencia,
                    brindaCertificado,
                    puntajeApr,
                    porcentajeAsistencia,
                });
            }

            // Función para manejar el toggle de precio gratuito
            function toggleGratuitoModificar(input: HTMLInputElement): void {
                const esGratuitoSelect = document.querySelector(
                    'select[name="es_gratuito"]',
                ) as HTMLSelectElement;
                const contenedorPrecio = document.getElementById(
                    "contenedor-precio",
                ) as HTMLElement;

                if (parseFloat(input.value) === 0) {
                    esGratuitoSelect.value = "true";
                    input.disabled = true;
                    if (contenedorPrecio)
                        contenedorPrecio.style.display = "none";
                } else {
                    esGratuitoSelect.value = "false";
                    input.disabled = false;
                    if (contenedorPrecio)
                        contenedorPrecio.style.display = "block";
                }
            }

            // Función para manejar el toggle desde el select gratuito
            function togglePrecioModificar(select: HTMLSelectElement): void {
                const precioInput = document.querySelector(
                    'input[name="precio"]',
                ) as HTMLInputElement;
                const contenedorPrecio = document.getElementById(
                    "contenedor-precio",
                ) as HTMLElement;

                if (select.value === "true") {
                    // Es gratuito - ocultar precio
                    if (contenedorPrecio)
                        contenedorPrecio.style.display = "none";
                    if (precioInput) {
                        precioInput.value = "0";
                        precioInput.disabled = true;
                    }
                } else {
                    // No es gratuito - mostrar precio
                    if (contenedorPrecio)
                        contenedorPrecio.style.display = "block";
                    if (precioInput) {
                        precioInput.disabled = false;
                        if (precioInput.value === "0") precioInput.value = "";
                    }
                }
            } // Cargar asignaciones disponibles
            async function cargarAsignacionesModificar() {
                try {
                    console.log("🔄 Cargando asignaciones disponibles...");
                    const { data, error } = await actions.getAllAsignaciones(
                        {},
                    );

                    if (error) {
                        console.error(
                            "❌ Error al cargar asignaciones:",
                            error,
                        );
                        return;
                    }

                    if (!data?.success || !data.asignaciones) {
                        console.warn("⚠️ No se encontraron asignaciones");
                        return;
                    }

                    asignacionesDisponibles = data.asignaciones;
                    const select = document.getElementById(
                        "asignacion-evento",
                    ) as HTMLSelectElement;

                    if (!select) {
                        console.error(
                            "❌ No se encontró el select de asignaciones",
                        );
                        return;
                    }

                    // Limpiar opciones existentes (excepto la primera)
                    while (select.children.length > 1) {
                        select.removeChild(select.lastChild!);
                    }

                    // Agregar asignaciones disponibles
                    asignacionesDisponibles.forEach((asignacion) => {
                        const option = document.createElement("option");
                        option.value = asignacion.id_asi;
                        option.textContent = `${asignacion.nom_asi} - ${asignacion.des_asi}`;
                        select.appendChild(option);
                    });

                    console.log(
                        `✅ ${asignacionesDisponibles.length} asignaciones cargadas exitosamente`,
                    );
                } catch (error) {
                    console.error(
                        "💥 Error crítico al cargar asignaciones:",
                        error,
                    );
                }
            }
            async function cargarCategoriasOrganizadoresYAsignaciones() {
                try {
                    // Las categorías y organizadores ya vienen cargados desde las props del componente Astro
                    // Solo cargamos las asignaciones dinámicamente
                    console.log(
                        "🔄 Cargando solo asignaciones (categorías y organizadores ya están en props)",
                    );
                    // Cargar asignaciones
                    await cargarAsignacionesModificar();

                    console.log("✅ Datos cargados correctamente");
                } catch (error) {
                    console.error("Error al cargar datos:", error);
                }
            }
            async function abrirModalModificarEvento(
                eventoId: string,
            ): Promise<void> {
                console.log("🔄 Abriendo modal para evento:", eventoId);

                const modal = document.getElementById("modalModificarEvento");
                const form = document.getElementById(
                    "formulario-modificar-evento",
                ) as HTMLFormElement;

                if (!modal || !form) {
                    console.error("❌ No se encontró el modal o formulario");
                    return;
                }

                // Cargar categorías, organizadores y asignaciones dinámicamente
                await cargarCategoriasOrganizadoresYAsignaciones();

                // Obtener todos los eventos del DOM
                const eventosInputs = document.querySelectorAll(
                    'input[name="evento"]',
                );
                const eventos = Array.from(eventosInputs).map((input) =>
                    JSON.parse((input as HTMLInputElement).value),
                );

                console.log("📊 Eventos disponibles:", eventos.length);

                const evento = eventos.find(
                    (e: Evento) => e.id_eve === eventoId,
                );

                if (!evento) {
                    console.error("❌ Evento no encontrado:", eventoId);
                    return;
                }

                console.log("✅ Evento encontrado:", evento);

                // Llenar el formulario con los datos del evento
                const nombre = form.querySelector(
                    'input[name="nombre"]',
                ) as HTMLInputElement;
                const descripcion = form.querySelector(
                    'textarea[name="descripcion"]',
                ) as HTMLTextAreaElement;
                const categoria = form.querySelector(
                    'select[name="categoria"]',
                ) as HTMLSelectElement;
                const area = form.querySelector(
                    'select[name="area"]',
                ) as HTMLSelectElement;
                const precio = form.querySelector(
                    'input[name="precio"]',
                ) as HTMLInputElement;
                const esGratuito = form.querySelector(
                    'select[name="es_gratuito"]',
                ) as HTMLSelectElement;
                const requiereCarta = form.querySelector(
                    'select[name="requiere_carta"]',
                ) as HTMLSelectElement;
                const esDestacado = form.querySelector(
                    'select[name="es_destacado"]',
                ) as HTMLSelectElement;
                const carMotEve = form.querySelector(
                    'textarea[name="car_mot_eve"]',
                ) as HTMLTextAreaElement;
                const fechaInicio = form.querySelector(
                    'input[name="fecha_inicio"]',
                ) as HTMLInputElement;
                const fechaFin = form.querySelector(
                    'input[name="fecha_fin"]',
                ) as HTMLInputElement;
                const fechaInicioInscripcion = form.querySelector(
                    'input[name="fecha_inicio_inscripcion"]',
                ) as HTMLInputElement;
                const fechaFinInscripcion = form.querySelector(
                    'input[name="fecha_fin_inscripcion"]',
                ) as HTMLInputElement;
                const duracion = form.querySelector(
                    'input[name="duracion"]',
                ) as HTMLInputElement;
                const cupMax = form.querySelector(
                    'input[name="cup_max"]',
                ) as HTMLInputElement;
                const ubicacion = form.querySelector(
                    'input[name="ubicacion"]',
                ) as HTMLInputElement;
                const cedulaOrganizador = form.querySelector(
                    'select[name="cedula_organizador"]',
                ) as HTMLSelectElement;
                const idAsignacion = form.querySelector(
                    'select[name="id_asignacion"]',
                ) as HTMLSelectElement;
                const eventoIdInput = form.querySelector(
                    'input[name="evento_id"]',
                ) as HTMLInputElement;
                const eventoImagen = document.getElementById(
                    "evento-imagen",
                ) as HTMLImageElement;

                // Asignar valores
                console.log("📝 Asignando valores al formulario...");

                if (nombre) {
                    nombre.value = evento.nom_eve;
                    console.log("✅ Nombre asignado:", evento.nom_eve);
                }
                if (descripcion) {
                    descripcion.value = evento.des_eve;
                    console.log("✅ Descripción asignada");
                }
                if (cupMax && evento.cup_max !== undefined) {
                    cupMax.value = evento.cup_max.toString();
                    console.log("✅ Cupo máximo asignado:", evento.cup_max);
                }
                if (categoria) {
                    categoria.value = evento.id_cat_eve;
                    console.log("✅ Categoría asignada:", evento.id_cat_eve);
                    // Mostrar información de categoría después de seleccionar
                    setTimeout(
                        () => mostrarInfoCategoriaModificar(categoria),
                        100,
                    );
                }
                if (area) {
                    area.value = evento.are_eve || "";
                    console.log("✅ Área asignada:", evento.are_eve);
                }
                if (precio) {
                    precio.value = evento.precio.toString();
                    console.log("✅ Precio asignado:", evento.precio);
                }
                if (esGratuito) {
                    esGratuito.value = evento.es_gratuito.toString();
                    console.log("✅ Es gratuito asignado:", evento.es_gratuito);
                    // Aplicar lógica de precio/gratuito después de establecer el valor
                    setTimeout(() => togglePrecioModificar(esGratuito), 100);
                }
                if (requiereCarta) {
                    requiereCarta.value = evento.requiere_carta.toString();
                    console.log(
                        "✅ Requiere carta asignado:",
                        evento.requiere_carta,
                    );
                }
                if (esDestacado) {
                    esDestacado.value = evento.es_destacado.toString();
                    console.log(
                        "✅ Es destacado asignado:",
                        evento.es_destacado,
                    );
                }
                if (carMotEve) {
                    carMotEve.value = evento.car_mot_eve || "";
                    console.log("✅ Carta motivación asignada");
                }
                if (fechaInicio) {
                    fechaInicio.value = new Date(evento.fec_ini_eve)
                        .toISOString()
                        .split("T")[0];
                    console.log(
                        "✅ Fecha inicio asignada:",
                        evento.fec_ini_eve,
                    );
                }
                if (fechaFin && evento.fec_fin_eve) {
                    fechaFin.value = new Date(evento.fec_fin_eve)
                        .toISOString()
                        .split("T")[0];
                    console.log("✅ Fecha fin asignada:", evento.fec_fin_eve);
                }
                if (fechaInicioInscripcion && evento.fec_ini_ins_eve) {
                    fechaInicioInscripcion.value = new Date(
                        evento.fec_ini_ins_eve,
                    )
                        .toISOString()
                        .split("T")[0];
                    console.log(
                        "✅ Fecha inicio inscripción asignada:",
                        evento.fec_ini_ins_eve,
                    );
                }
                if (fechaFinInscripcion && evento.fec_fin_ins_eve) {
                    fechaFinInscripcion.value = new Date(evento.fec_fin_ins_eve)
                        .toISOString()
                        .split("T")[0];
                    console.log(
                        "✅ Fecha fin inscripción asignada:",
                        evento.fec_fin_ins_eve,
                    );
                }
                if (duracion && evento.dur_eve) {
                    duracion.value = evento.dur_eve.toString();
                    console.log("✅ Duración asignada:", evento.dur_eve);
                }
                if (ubicacion) {
                    ubicacion.value = evento.ubi_eve;
                    console.log("✅ Ubicación asignada:", evento.ubi_eve);
                }
                if (cedulaOrganizador) {
                    cedulaOrganizador.value = evento.ced_org_eve;
                    console.log("✅ Organizador asignado:", evento.ced_org_eve);
                }
                if (idAsignacion && evento.id_asi_eve) {
                    idAsignacion.value = evento.id_asi_eve;
                    console.log("✅ Asignación asignada:", evento.id_asi_eve);
                }
                if (eventoIdInput) {
                    eventoIdInput.value = evento.id_eve;
                    console.log("✅ ID evento asignado:", evento.id_eve);
                }
                if (eventoImagen) {
                    eventoImagen.src =
                        evento.img_eve ||
                        "https://via.placeholder.com/300x200?text=Sin+Imagen";
                    eventoImagen.style.display = "block";
                    console.log("✅ Imagen asignada:", evento.img_eve);
                }

                console.log("✅ Todos los valores asignados, mostrando modal");
                modal.style.display = "block";
                actualizarValidacionFechas();
            }
            function cerrarModalModificarEvento(): void {
                const modal = document.getElementById("modalModificarEvento");
                const form = document.getElementById(
                    "formulario-modificar-evento",
                ) as HTMLFormElement;

                if (modal && form) {
                    modal.style.display = "none";
                    form.reset();

                    // Resetear imagen
                    const imagen = document.getElementById(
                        "evento-imagen",
                    ) as HTMLImageElement;
                    const fileName = document.querySelector(
                        "#modalModificarEvento .file-name",
                    ) as HTMLElement;
                    if (imagen) imagen.style.display = "none";
                    if (fileName)
                        fileName.textContent =
                            "No se ha seleccionado ningún archivo";

                    // Resetear precio y su contenedor
                    const precioInput = document.querySelector(
                        'input[name="precio"]',
                    ) as HTMLInputElement;
                    const contenedorPrecio = document.getElementById(
                        "contenedor-precio",
                    ) as HTMLElement;
                    if (precioInput) {
                        precioInput.value = "0";
                        precioInput.disabled = false;
                    }
                    if (contenedorPrecio) {
                        contenedorPrecio.style.display = "block";
                    }

                    // Resetear información de categoría
                    const infoCategoria = document.getElementById(
                        "info-categoria",
                    ) as HTMLElement;
                    if (infoCategoria) infoCategoria.style.display = "none";
                }
            }

            document.addEventListener("DOMContentLoaded", () => {
                const form = document.getElementById(
                    "formulario-modificar-evento",
                ) as HTMLFormElement;
                const fileInput = document.getElementById(
                    "file-upload-modificar",
                ) as HTMLInputElement;
                const fileNameDisplay = document.querySelector(
                    ".file-name",
                ) as HTMLElement;
                const eventoImagen = document.getElementById(
                    "evento-imagen",
                ) as HTMLImageElement; // Manejar cambio de archivo

                const fechaInicioInscripcionesInput = document.querySelector('input[name="fecha_inicio_inscripcion"]') as HTMLInputElement;
                const fechaFinInscripcionesInput = document.querySelector('input[name="fecha_fin_inscripcion"]') as HTMLInputElement;
                const fechaInicioEventoInput = document.querySelector('input[name="fecha_inicio"]') as HTMLInputElement;
                const fechaFinEventoInput = document.querySelector('input[name="fecha_fin"]') as HTMLInputElement;

                fechaInicioInscripcionesInput.addEventListener("change", actualizarValidacionFechas);
                fechaFinInscripcionesInput.addEventListener("change", actualizarValidacionFechas);
                fechaInicioEventoInput.addEventListener("change", actualizarValidacionFechas);
                fechaFinEventoInput.addEventListener("change", actualizarValidacionFechas);

                // Llama una vez al cargar para inicializar restricciones
                actualizarValidacionFechas();
                if (fileInput && fileNameDisplay && eventoImagen) {
                    fileInput.addEventListener("change", (e: Event) => {
                        const target = e.target as HTMLInputElement;
                        const file = target.files?.[0];

                        if (file && file.type.match("image.*")) {
                            fileNameDisplay.textContent = file.name;
                            const reader = new FileReader();
                            reader.onload = (event) => {
                                if (event.target?.result) {
                                    eventoImagen.src = event.target
                                        .result as string;
                                }
                            };
                            reader.readAsDataURL(file);
                        } else {
                            fileNameDisplay.textContent =
                                "No se ha seleccionado ningún archivo válido";
                        }
                    });
                } // Manejar lógica de precio/gratuito
                const esGratuitoSelect = document.querySelector(
                    'select[name="es_gratuito"]',
                ) as HTMLSelectElement;
                const precioInput = document.querySelector(
                    'input[name="precio"]',
                ) as HTMLInputElement;

                if (esGratuitoSelect && precioInput) {
                    function actualizarVisibilidadPrecio() {
                        const esGratuito = esGratuitoSelect.value === "true";
                        const contenedorPrecio = document.getElementById(
                            "contenedor-precio",
                        ) as HTMLElement;

                        if (esGratuito) {
                            precioInput.value = "0";
                            precioInput.disabled = true;
                            precioInput.style.opacity = "0.5";
                            if (contenedorPrecio)
                                contenedorPrecio.style.display = "none";
                        } else {
                            precioInput.disabled = false;
                            precioInput.style.opacity = "1";
                            if (contenedorPrecio)
                                contenedorPrecio.style.display = "block";
                        }
                    }

                    esGratuitoSelect.addEventListener(
                        "change",
                        actualizarVisibilidadPrecio,
                    );

                    // También manejar cambios en el input de precio
                    precioInput.addEventListener("input", () => {
                        if (parseFloat(precioInput.value) === 0) {
                            esGratuitoSelect.value = "true";
                            actualizarVisibilidadPrecio();
                        } else if (esGratuitoSelect.value === "true") {
                            esGratuitoSelect.value = "false";
                            actualizarVisibilidadPrecio();
                        }
                    });

                    // Ejecutar una vez al cargar
                    actualizarVisibilidadPrecio();
                } // Manejar envío del formulario
                if (form) {
                    form.addEventListener("submit", async (e) => {
                        e.preventDefault();

                        const formData = new FormData(form); // Obtener valores y validar
                        const areaValue = formData.get("area") as string;
                        const fechaFin = formData.get("fecha_fin") as string;
                        const duracionStr = formData.get("duracion") as string;
                        const carMotEve = formData.get("car_mot_eve") as string;
                        const fechaInicioInscripcion = formData.get(
                            "fecha_inicio_inscripcion",
                        ) as string;
                        const fechaFinInscripcion = formData.get(
                            "fecha_fin_inscripcion",
                        ) as string;

                        // Renombrar campos para que coincidan con la acción
                        if (carMotEve && carMotEve.trim() !== "") {
                            formData.set("carta_motivacion", carMotEve);
                            formData.delete("car_mot_eve");
                        } else {
                            formData.delete("car_mot_eve");
                        }

                        // Verificar si hay asignación seleccionada
                        const idAsignacion = formData.get(
                            "id_asignacion",
                        ) as string;
                        if (idAsignacion && idAsignacion.trim() !== "") {
                            formData.set("asignacion_id", idAsignacion);
                            formData.delete("id_asignacion");
                        } else {
                            formData.delete("id_asignacion");
                        }

                        // Validar que el área sea uno de los valores permitidos
                        const areasPermitidas = [
                            "PRACTICA",
                            "INVESTIGACION",
                            "ACADEMICA",
                            "TECNICA",
                            "INDUSTRIAL",
                            "EMPRESARIAL",
                            "IA",
                            "REDES",
                        ];
                        const areaValida =
                            areaValue && areasPermitidas.includes(areaValue)
                                ? areaValue
                                : undefined; // Limpiar campos vacíos
                        if (!fechaFin || fechaFin.trim() === "") {
                            formData.delete("fecha_fin");
                        }
                        if (!duracionStr || duracionStr.trim() === "") {
                            formData.delete("duracion");
                        }
                        if (!carMotEve || carMotEve.trim() === "") {
                            formData.delete("car_mot_eve");
                        }
                        if (!areaValida) {
                            formData.delete("area");
                        }

                        // Validar fechas de inscripción
                        if (
                            !fechaInicioInscripcion ||
                            fechaInicioInscripcion.trim() === ""
                        ) {
                            await Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "La fecha de inicio de inscripción es requerida.",
                                confirmButtonColor: "#dc2626",
                            });
                            return;
                        }
                        if (
                            !fechaFinInscripcion ||
                            fechaFinInscripcion.trim() === ""
                        ) {
                            await Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "La fecha de fin de inscripción es requerida.",
                                confirmButtonColor: "#dc2626",
                            });
                            return;
                        }

                        // Verificar si hay imagen seleccionada
                        const imagenFile = formData.get("imagen") as File;
                        if (!imagenFile || imagenFile.size === 0) {
                            formData.delete("imagen");
                        }

                        try {
                            const { data, error } =
                                await actions.modificarEvento(formData);

                            if (data?.success) {
                                await Swal.fire({
                                    icon: "success",
                                    title: "Éxito",
                                    text: "Evento modificado correctamente.",
                                    confirmButtonColor: "#059669",
                                }).then(() => {
                                    window.location.reload();
                                });
                            } else {
                                await Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text:
                                        error?.message ||
                                        "No se pudo modificar el evento.",
                                    confirmButtonColor: "#dc2626",
                                });
                            }
                        } catch (error) {
                            console.error("Error:", error);
                            await Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: "Error al procesar la solicitud",
                                confirmButtonColor: "#dc2626",
                            });
                        }
                    });
                } // Asignar funciones al objeto window
                window.abrirModalModificarEvento = abrirModalModificarEvento;
                window.cerrarModalModificarEvento = cerrarModalModificarEvento;
                window.toggleGratuitoModificar = toggleGratuitoModificar;
                window.togglePrecioModificar = togglePrecioModificar;
                window.mostrarInfoCategoriaModificar =
                    mostrarInfoCategoriaModificar;
            });

            function ajustarFecha(fechaString: string, dias: number): string {
                if (!fechaString) return "";
                const fecha = new Date(fechaString + "T00:00:00");
                fecha.setDate(fecha.getDate() + dias);
                return fecha.toISOString().split("T")[0];
            }

            function actualizarValidacionFechas() {
                const fechaInicioInscripcionesInput = document.querySelector(
                    'input[name="fecha_inicio_inscripcion"]'
                ) as HTMLInputElement;
                const fechaFinInscripcionesInput = document.querySelector(
                    'input[name="fecha_fin_inscripcion"]'
                ) as HTMLInputElement;
                const fechaInicioEventoInput = document.querySelector(
                    'input[name="fecha_inicio"]'
                ) as HTMLInputElement;
                const fechaFinEventoInput = document.querySelector(
                    'input[name="fecha_fin"]'
                ) as HTMLInputElement;

                const fechaInicioInscripciones = fechaInicioInscripcionesInput.value;
                const fechaFinInscripciones = fechaFinInscripcionesInput.value;
                const fechaInicioEvento = fechaInicioEventoInput.value;
                const fechaFinEvento = fechaFinEventoInput.value;

                // 1. Fin de inscripciones: mínimo 1 día después de inicio de inscripciones
                if (fechaInicioInscripciones) {
                    fechaFinInscripcionesInput.min = ajustarFecha(fechaInicioInscripciones, 1);
                } else {
                    fechaFinInscripcionesInput.min = "";
                }

                // 2. Inicio de evento: mínimo 2 días después de inicio de inscripciones
                if (fechaInicioInscripciones) {
                    fechaInicioEventoInput.min = ajustarFecha(fechaInicioInscripciones, 2);
                } else {
                    fechaInicioEventoInput.min = "";
                }

                // 3. Fin de inscripciones: máximo 1 día antes del inicio del evento
                if (fechaInicioEvento) {
                    fechaFinInscripcionesInput.max = ajustarFecha(fechaInicioEvento, -1);
                } else {
                    fechaFinInscripcionesInput.max = "";
                }

                // 4. Inicio de evento: mínimo 1 día después del fin de inscripciones
                if (fechaFinInscripciones) {
                    const minPorFinInscripciones = ajustarFecha(fechaFinInscripciones, 1);
                    if (
                        !fechaInicioEventoInput.min ||
                        minPorFinInscripciones > fechaInicioEventoInput.min
                    ) {
                        fechaInicioEventoInput.min = minPorFinInscripciones;
                    }
                }

                // 5. Inicio de evento: máximo igual a la fecha de fin de evento
                if (fechaFinEvento) {
                    fechaInicioEventoInput.max = ajustarFecha(fechaFinEvento, -1);
                } else {
                    fechaInicioEventoInput.max = "";
                }

                // 6. Fin de evento: mínimo 1 día después del inicio del evento
                if (fechaInicioEvento) {
                    fechaFinEventoInput.min = ajustarFecha(fechaInicioEvento, 1);
                } else {
                    fechaFinEventoInput.min = "";
                }

                // 7. Inicio de evento: no puede ser inferior a la de fin de inscripciones
                if (fechaFinInscripciones) {
                    const minPorFinInscripciones = ajustarFecha(fechaFinInscripciones, 1);
                    if (
                        !fechaInicioEventoInput.min ||
                        minPorFinInscripciones > fechaInicioEventoInput.min
                    ) {
                        fechaInicioEventoInput.min = minPorFinInscripciones;
                    }
                }

                // Control visual para inicio de inscripciones: máximo 2 días antes del inicio del evento
                if (fechaInicioEvento) {
                    fechaInicioInscripcionesInput.max = ajustarFecha(fechaInicioEvento, -2);
                } else {
                    fechaInicioInscripcionesInput.max = "";
                }

                // Control visual para fin de evento: mínimo 3 días después del inicio de inscripciones
                if (fechaInicioInscripciones) {
                    fechaFinEventoInput.min = ajustarFecha(fechaInicioInscripciones, 3);
                } else {
                    fechaFinEventoInput.min = "";
                }

                // Control visual: inicio de inscripciones debe ser al menos 1 día antes que fin de inscripciones
                if (fechaFinInscripciones) {
                    fechaInicioInscripcionesInput.max = ajustarFecha(fechaFinInscripciones, -1);
                } else {
                    fechaInicioInscripcionesInput.max = "";
                }

                // Control visual: fin de evento debe ser mínimo 1 día después del inicio de evento
                if (fechaInicioEvento) {
                    const minPorInicioEvento = ajustarFecha(fechaInicioEvento, 1);
                    if (
                        !fechaFinEventoInput.min ||
                        new Date(minPorInicioEvento) > new Date(fechaFinEventoInput.min)
                    ) {
                        fechaFinEventoInput.min = minPorInicioEvento;
                    }
                }

                // Control visual: fin de evento debe ser mínimo 2 días después del fin de inscripciones
                if (fechaFinInscripciones) {
                    const minPorFinInscripciones = ajustarFecha(fechaFinInscripciones, 2);
                    if (
                        !fechaFinEventoInput.min ||
                        new Date(minPorFinInscripciones) > new Date(fechaFinEventoInput.min)
                    ) {
                        fechaFinEventoInput.min = minPorFinInscripciones;
                    }
                }
            }
        </script>
    </div>
</div>
