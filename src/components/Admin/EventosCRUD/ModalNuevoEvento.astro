---
import "../../../styles/Admin/ModalModificarEvento.css";

interface Props {
    categorias?: any[];
    organizadores?: any[];
}

const { categorias = [], organizadores = [] } = Astro.props;
---

<div id="modalNuevoEvento" class="modal">
    <div class="modal-contenido">
        <span class="cerrar" onclick="cerrarModalNuevoEvento()">&times;</span>
        <div class="formulario-completo">
            <form
                class="formulario-modificar-registro"
                method="POST"
                id="formulario-nuevo-evento"
                enctype="multipart/form-data"
            >
                <div class="contenedor-superior">
                    <p class="texto-centrado texto-rojo">Información General</p>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Nombre</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="nombre"
                                required
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Descripción</p>
                        <div class="contenedor-input">
                            <textarea
                                class="input-dato"
                                name="descripcion"
                                rows="3"
                                required></textarea>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Categoría:</p>
                            <div class="contenedor-input">
                                <select
                                    name="categoria"
                                    class="input-dato"
                                    required
                                >
                                    <option value="">Elija una Categoría</option
                                    >
                                    {
                                        categorias.map((categoria) => (
                                            <option value={categoria.id_cat}>
                                                {categoria.nom_cat}
                                            </option>
                                        ))
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Área:</p>
                            <div class="contenedor-input">
                                <select name="area" class="input-dato">
                                    <option value="">Elija una Área</option>
                                    <option value="PRACTICA">Práctica</option>
                                    <option value="INVESTIGACION"
                                        >Investigación</option
                                    >
                                    <option value="ACADEMICA">Académica</option>
                                    <option value="TECNICA">Técnica</option>
                                    <option value="INDUSTRIAL"
                                        >Industrial</option
                                    >
                                    <option value="EMPRESARIAL"
                                        >Empresarial</option
                                    >
                                    <option value="IA">IA</option>
                                    <option value="REDES">Redes</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Precio (USD):</p>
                        <div class="contenedor-input">
                            <input
                                type="number"
                                step="0.01"
                                min="0"
                                class="input-dato"
                                name="precio"
                                value="0"
                                onchange="toggleGratuito(this)"
                            />
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">¿Es gratuito?</p>
                            <div class="contenedor-input">
                                <select
                                    name="es_gratuito"
                                    class="input-dato"
                                    onchange="togglePrecio(this)"
                                >
                                    <option value="true">Sí, es gratuito</option
                                    >
                                    <option value="false"
                                        >No, tiene costo</option
                                    >
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                ¿Requiere carta de motivación?
                            </p>
                            <div class="contenedor-input">
                                <select
                                    name="requiere_carta"
                                    class="input-dato"
                                >
                                    <option value="false">No</option>
                                    <option value="true">Sí</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">¿Es evento destacado?</p>
                            <div class="contenedor-input">
                                <select name="es_destacado" class="input-dato">
                                    <option value="false">No</option>
                                    <option value="true">Sí</option>
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Carta de motivación:</p>
                            <div class="contenedor-input">
                                <textarea
                                    class="input-dato"
                                    name="carta_motivacion"
                                    rows="2"
                                    placeholder="Texto opcional para carta de motivación"
                                ></textarea>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="contenedor-superior">
                    <p class="texto-centrado texto-rojo">
                        Programación del Evento
                    </p>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                Fecha de Inicio del Evento:
                            </p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                Fecha de Finalización del Evento:
                            </p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin"
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Inicio de Inscripciones:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio_inscripciones"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Fin de Inscripciones:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin_inscripciones"
                                    required
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Duración (minutos)</p>
                        <div class="contenedor-input">
                            <input
                                type="number"
                                min="15"
                                step="15"
                                class="input-dato"
                                name="duracion"
                                placeholder="Ej: 120 para 2 horas"
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Ubicación</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="ubicacion"
                                required
                                placeholder="Ej: Aula 101, Laboratorio de Sistemas, etc."
                            />
                        </div>
                    </div>
                </div>

                <div class="contenedor-inferior">
                    <p class="texto-centrado texto-rojo">Organizador</p>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Organizador</p>
                        <div class="contenedor-input">
                            <select
                                name="cedula_organizador"
                                class="input-dato"
                                required
                            >
                                <option value=""
                                    >Seleccione un Organizador</option
                                >
                                {
                                    organizadores.map((organizador) => (
                                        <option value={organizador.ced_org}>
                                            {organizador.nom_org1}{" "}
                                            {organizador.nom_org2 || ""}{" "}
                                            {organizador.ape_org1}{" "}
                                            {organizador.ape_org2} -{" "}
                                            {organizador.ced_org}
                                        </option>
                                    ))
                                }
                            </select>
                        </div>
                    </div>
                    <!-- Sección de Asignaciones -->
                    <div class="contenedor-superior">
                        <p class="texto-centrado texto-rojo">Dirigido a</p>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Asignación (opcional):</p>
                            <div class="contenedor-input">
                                <select
                                    id="asignacion-evento"
                                    name="asignacion"
                                    class="input-dato"
                                >
                                    <option value="">
                                        Sin restricciones (abierto a todos)
                                    </option>
                                    <!-- Las opciones se cargarán dinámicamente -->
                                </select>
                            </div>
                            <p class="texto-info-asignaciones">
                                Si no seleccionas una asignación, el evento
                                estará abierto a todos los usuarios sin
                                restricciones de carrera o facultad.
                            </p>
                        </div>
                    </div>

                    <div class="contenedor-boton-modificar">
                        <button
                            type="button"
                            class="boton-modificar"
                            onclick="cerrarModalNuevoEvento()">Cancelar</button
                        >
                        <button type="submit" class="boton-modificar"
                            >Crear Evento</button
                        >
                    </div>
                </div>

                <div class="contenedor-imagen">
                    <img
                        id="nueva-evento-imagen"
                        class="imagen-evento"
                        style="display: none;"
                        alt="Imagen del nuevo evento"
                    />
                    <div class="contenedor-file">
                        <label
                            for="file-upload-nuevo"
                            class="custom-file-upload"
                        >
                            <img
                                src="/img/CRUD/upload.png"
                                alt="Subir imagen"
                                class="upload-icon"
                            />
                            <span>Seleccionar imagen</span>
                        </label>
                        <input
                            id="file-upload-nuevo"
                            type="file"
                            name="imagen"
                            class="input-file"
                            accept="image/*"
                        />
                        <p class="file-name">
                            No se ha seleccionado ningún archivo
                        </p>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .texto-info-asignaciones {
        margin-top: 5px;
        color: #6b7280;
        font-size: 12px;
        font-style: italic;
    }

    .input-dato[name="precio"]:disabled {
        background-color: #f3f4f6;
        color: #6b7280;
    }

    .contenedor-nombre {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .contenedor-dato textarea {
        resize: vertical;
        min-height: 60px;
    }

    .precio-container {
        position: relative;
    }

    .precio-label {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6b7280;
        pointer-events: none;
    }

    .input-dato[name="precio"] {
        padding-left: 25px;
    }
</style>

<script>
    import { actions } from "astro:actions";
    import Swal from "sweetalert2";

    declare global {
        interface Window {
            abrirModalNuevoEvento: () => void;
            cerrarModalNuevoEvento: () => void;
            toggleGratuito: (input: HTMLInputElement) => void;
            togglePrecio: (select: HTMLSelectElement) => void;
        }
    }

    let asignacionesDisponibles: any[] = [];

    // Función para manejar el toggle de precio gratuito
    function toggleGratuito(input: HTMLInputElement): void {
        const esGratuitoSelect = document.querySelector(
            'select[name="es_gratuito"]',
        ) as HTMLSelectElement;
        if (parseFloat(input.value) === 0) {
            esGratuitoSelect.value = "true";
            input.disabled = true;
        } else {
            esGratuitoSelect.value = "false";
            input.disabled = false;
        }
    }

    // Función para manejar el toggle desde el select gratuito
    function togglePrecio(select: HTMLSelectElement): void {
        const precioInput = document.querySelector(
            'input[name="precio"]',
        ) as HTMLInputElement;
        if (select.value === "true") {
            precioInput.value = "0";
            precioInput.disabled = true;
        } else {
            precioInput.disabled = false;
            if (precioInput.value === "0") {
                precioInput.value = "";
            }
        }
    }

    // Cargar asignaciones disponibles
    async function cargarAsignaciones() {
        try {
            console.log("🔄 Cargando asignaciones disponibles...");
            const { data, error } = await actions.getAllAsignaciones({});

            if (error) {
                console.error("❌ Error al cargar asignaciones:", error);
                return;
            }

            if (!data?.success || !data.asignaciones) {
                console.warn("⚠️ No hay asignaciones disponibles");
                return;
            }

            asignacionesDisponibles = data.asignaciones;
            const select = document.getElementById(
                "asignacion-evento",
            ) as HTMLSelectElement;

            if (!select) {
                console.error(
                    "❌ No se encontró el elemento select #asignacion-evento",
                );
                return;
            }

            // Limpiar opciones existentes (excepto la primera)
            while (select.children.length > 1) {
                select.removeChild(select.lastChild!);
            }

            // Agregar asignaciones disponibles
            asignacionesDisponibles.forEach((asignacion) => {
                const option = document.createElement("option");
                option.value = asignacion.id_asi;

                // Mostrar información de la asignación
                let descripcion = asignacion.nom_asi;
                if (asignacion.tip_asi) {
                    descripcion += ` (${asignacion.tip_asi})`;
                }

                option.textContent = descripcion;
                select.appendChild(option);
            });

            console.log(
                "✅ Asignaciones cargadas:",
                asignacionesDisponibles.length,
            );
        } catch (error) {
            console.error("💥 Error crítico al cargar asignaciones:", error);
        }
    }

    function abrirModalNuevoEvento(): void {
        console.log("🎯 Abriendo modal nuevo evento...");
        const modal = document.getElementById("modalNuevoEvento");
        if (modal) {
            modal.style.display = "block";

            // Establecer fechas por defecto
            const fechaHoy = new Date().toISOString().split("T")[0];
            const fechaInscripcionInicio = document.querySelector(
                'input[name="fecha_inicio_inscripciones"]',
            ) as HTMLInputElement;
            const fechaEvento = document.querySelector(
                'input[name="fecha_inicio"]',
            ) as HTMLInputElement;

            if (fechaInscripcionInicio && !fechaInscripcionInicio.value) {
                fechaInscripcionInicio.value = fechaHoy;
            }

            // Cargar asignaciones
            cargarAsignaciones();
        }
    }

    function cerrarModalNuevoEvento(): void {
        const modal = document.getElementById("modalNuevoEvento");
        const form = document.getElementById(
            "formulario-nuevo-evento",
        ) as HTMLFormElement;

        if (modal && form) {
            modal.style.display = "none";
            form.reset();

            // Resetear imagen
            const imagen = document.getElementById(
                "nueva-evento-imagen",
            ) as HTMLImageElement;
            const fileName = document.querySelector(
                "#modalNuevoEvento .file-name",
            ) as HTMLElement;
            if (imagen) imagen.style.display = "none";
            if (fileName)
                fileName.textContent = "No se ha seleccionado ningún archivo";

            // Resetear precio
            const precioInput = document.querySelector(
                'input[name="precio"]',
            ) as HTMLInputElement;
            if (precioInput) {
                precioInput.disabled = false;
                precioInput.value = "0";
            }
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById(
            "formulario-nuevo-evento",
        ) as HTMLFormElement;
        const fileInput = document.getElementById(
            "file-upload-nuevo",
        ) as HTMLInputElement;
        const fileNameDisplay = document.querySelector(
            "#modalNuevoEvento .file-name",
        ) as HTMLElement;
        const nuevaEventoImagen = document.getElementById(
            "nueva-evento-imagen",
        ) as HTMLImageElement;

        // Manejar cambio de archivo
        if (fileInput && fileNameDisplay && nuevaEventoImagen) {
            fileInput.addEventListener("change", (e: Event) => {
                const target = e.target as HTMLInputElement;
                const file = target.files?.[0];

                if (file && file.type.match("image.*")) {
                    fileNameDisplay.textContent = file.name;
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        if (event.target?.result) {
                            nuevaEventoImagen.src = event.target
                                .result as string;
                            nuevaEventoImagen.style.display = "block";
                        }
                    };
                    reader.readAsDataURL(file);
                } else {
                    fileNameDisplay.textContent =
                        "No se ha seleccionado ningún archivo válido";
                    nuevaEventoImagen.style.display = "none";
                }
            });
        }

        // Manejar envío del formulario
        if (form) {
            form.addEventListener("submit", async (e) => {
                e.preventDefault();

                const formData = new FormData(form);

                // Validar fechas
                const fechaInicio = formData.get("fecha_inicio") as string;
                const fechaFin = formData.get("fecha_fin") as string;
                const fechaInicioInscripciones = formData.get(
                    "fecha_inicio_inscripciones",
                ) as string;
                const fechaFinInscripciones = formData.get(
                    "fecha_fin_inscripciones",
                ) as string;

                if (fechaFin && new Date(fechaFin) <= new Date(fechaInicio)) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas",
                        text: "La fecha de finalización debe ser posterior a la fecha de inicio",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                if (
                    new Date(fechaFinInscripciones) <=
                    new Date(fechaInicioInscripciones)
                ) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas de inscripción",
                        text: "La fecha de fin de inscripciones debe ser posterior al inicio",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                if (new Date(fechaFinInscripciones) > new Date(fechaInicio)) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas",
                        text: "Las inscripciones deben cerrar antes del inicio del evento",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                try {
                    const { data, error } = await actions.crearEvento(formData);

                    if (data?.success) {
                        await Swal.fire({
                            icon: "success",
                            title: "¡Éxito!",
                            text: "Evento creado correctamente",
                            confirmButtonColor: "#059669",
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text:
                                data?.message ||
                                error?.message ||
                                "No se pudo crear el evento",
                            confirmButtonColor: "#dc2626",
                        });
                    }
                } catch (error) {
                    console.error("Error:", error);
                    await Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Error al procesar la solicitud",
                        confirmButtonColor: "#dc2626",
                    });
                }
            });
        }

        // Asignar funciones al objeto window
        window.abrirModalNuevoEvento = abrirModalNuevoEvento;
        window.cerrarModalNuevoEvento = cerrarModalNuevoEvento;
        window.toggleGratuito = toggleGratuito;
        window.togglePrecio = togglePrecio;
    });
</script>
