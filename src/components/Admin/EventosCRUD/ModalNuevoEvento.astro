---
import "../../../styles/Admin/ModalModificarEvento.css";

interface Props {
    categorias?: any[];
    organizadores?: any[];
}

const { categorias = [], organizadores = [] } = Astro.props;
---

<div id="modalNuevoEvento" class="modal">
    <div class="modal-contenido">
        <span class="cerrar" onclick="cerrarModalNuevoEvento()">&times;</span>
        <div class="formulario-completo">
            <form
                class="formulario-modificar-registro"
                method="POST"
                id="formulario-nuevo-evento"
                enctype="multipart/form-data"
            >
                <div class="contenedor-superior">
                    <p class="texto-centrado texto-rojo">Información General</p>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Nombre</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="nombre"
                                required
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Descripción</p>
                        <div class="contenedor-input">
                            <textarea
                                class="input-dato"
                                name="descripcion"
                                rows="3"
                                required></textarea>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Categoría:</p>
                            <div class="contenedor-input">
                                <select
                                    name="categoria"
                                    class="input-dato"
                                    required
                                    onchange="mostrarInfoCategoriaNuevo(this)"
                                >
                                    <option value="">Elija una Categoría</option
                                    >
                                    {
                                        categorias.map((categoria) => (
                                            <option
                                                value={categoria.id_cat}
                                                data-puntaje={
                                                    categoria.pun_apr_cat
                                                }
                                                data-asignacion={
                                                    categoria.asi_cat
                                                }
                                                data-requiere-puntaje={
                                                    categoria.requiere_puntaje
                                                }
                                                data-requiere-asistencia={
                                                    categoria.requiere_asistencia
                                                }
                                                data-brinda-certificado={
                                                    categoria.brinda_certificado
                                                }
                                                data-porcentaje-asistencia={
                                                    categoria.porcentaje_asistencia
                                                }
                                            >
                                                {categoria.nom_cat}
                                            </option>
                                        ))
                                    }
                                </select>
                            </div>
                        </div>
                        <!-- Información dinámica de la categoría -->
                        <div
                            id="info-categoria-nuevo"
                            class="contenedor-dato"
                            style="display: none;"
                        >
                            <p class="texto-dato">
                                Información de la Categoría
                            </p>
                            <div class="info-categoria-contenido">
                                <div
                                    id="info-puntaje-nuevo"
                                    style="display: none;"
                                >
                                    <p class="info-item">
                                        <strong>Puntaje de aprobación:</strong>
                                        <span id="valor-puntaje-nuevo">-</span> puntos
                                    </p>
                                </div>
                                <div
                                    id="info-asistencia-nuevo"
                                    style="display: none;"
                                >
                                    <p class="info-item">
                                        <strong>Requiere asistencia:</strong>
                                        <span
                                            id="valor-porcentaje-asistencia-nuevo"
                                            >-</span
                                        >% mínimo
                                    </p>
                                </div>

                                <div
                                    id="info-certificado-nuevo"
                                    style="display: none;"
                                >
                                    <p class="info-item">
                                        <strong>Brinda certificado:</strong> Sí
                                    </p>
                                </div>
                            </div>
                        </div>
                        <!-- Campos adicionales basados en categoría - OCULTOS -->
                        <div
                            id="campos-puntaje-nuevo"
                            class="contenedor-dato"
                            style="display: none;"
                        >
                            <!-- Campo oculto para mantener funcionalidad -->
                            <input
                                type="hidden"
                                name="puntaje_aprobacion"
                                value=""
                            />
                        </div>

                        <div
                            id="campos-asistencia-nuevo"
                            class="contenedor-dato"
                            style="display: none;"
                        >
                            <!-- Campo oculto para mantener funcionalidad -->
                            <input
                                type="hidden"
                                name="porcentaje_asistencia"
                                value=""
                            />
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Área:</p>
                            <div class="contenedor-input">
                                <select name="area" class="input-dato">
                                    <option value="">Elija una Área</option>
                                    <option value="PRACTICA">Práctica</option>
                                    <option value="INVESTIGACION"
                                        >Investigación</option
                                    >
                                    <option value="ACADEMICA">Académica</option>
                                    <option value="TECNICA">Técnica</option>
                                    <option value="INDUSTRIAL"
                                        >Industrial</option
                                    >
                                    <option value="EMPRESARIAL"
                                        >Empresarial</option
                                    >
                                    <option value="IA">IA</option>
                                    <option value="REDES">Redes</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">¿Es gratuito?</p>
                            <div class="contenedor-input">
                                <select
                                    name="es_gratuito-nuevo"
                                    class="input-dato"
                                    onchange="togglePrecioNuevo(this)"
                                >
                                    <option value="true">Sí, es gratuito</option
                                    >
                                    <option value="false"
                                        >No, tiene costo</option
                                    >
                                </select>
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                ¿Requiere carta de motivación?
                            </p>
                            <div class="contenedor-input">
                                <select
                                    name="requiere_carta"
                                    class="input-dato"
                                >
                                    <option value="false">No</option>
                                    <option value="true">Sí</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <!-- Campo oculto para es_destacado con valor por defecto false -->
                    <input type="hidden" name="es_destacado" value="false" />

                    <div class="contenedor-dato" style="display: none;">
                        <p class="texto-dato">Carta de motivación:</p>
                        <div class="contenedor-input">
                            <textarea
                                class="input-dato"
                                name="carta_motivacion"
                                rows="2"
                                placeholder="Texto opcional para carta de motivación"
                                >Es un evento</textarea
                            >
                        </div>
                    </div>

                    <div
                        class="contenedor-dato"
                        id="contenedor-precio-nuevo"
                        style="display: none;"
                    >
                        <p class="texto-dato">Precio (USD):</p>
                        <div class="contenedor-input">
                            <input
                                type="number"
                                step="0.01"
                                min="0"
                                class="input-dato"
                                name="precio"
                                value="0"
                                onchange="toggleGratuitoNuevo(this)"
                            />
                        </div>
                    </div>
                </div>
                <div class="contenedor-superior">
                    <p class="texto-centrado texto-rojo">
                        Programación del Evento
                    </p>
                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                Fecha de Inicio del Evento:
                            </p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">
                                Fecha de Finalización del Evento:
                            </p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin"
                                />
                            </div>
                        </div>
                    </div>

                    <div class="contenedor-nombre">
                        <div class="contenedor-dato">
                            <p class="texto-dato">Inicio de Inscripciones:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_inicio_inscripciones"
                                    required
                                />
                            </div>
                        </div>

                        <div class="contenedor-dato">
                            <p class="texto-dato">Fin de Inscripciones:</p>
                            <div class="contenedor-input">
                                <input
                                    type="date"
                                    class="input-dato"
                                    name="fecha_fin_inscripciones"
                                    required
                                />
                            </div>
                        </div>
                    </div>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Duración (Horas)</p>
                        <div class="contenedor-input">
                            <input
                                type="number"
                                min="0.1"
                                step="0.1"
                                class="input-dato"
                                name="duracion"
                                placeholder="Ej: 2.5 horas"
                            />
                        </div>
                    </div>

                    <div class="contenedor-dato">
                        <p class="texto-dato">Ubicación</p>
                        <div class="contenedor-input">
                            <input
                                type="text"
                                class="input-dato"
                                name="ubicacion"
                                required
                                placeholder="Ej: Aula 101, Laboratorio de Sistemas, etc."
                            />
                        </div>
                    </div>
                </div>

                <div class="contenedor-inferior">
                    <p class="texto-centrado texto-rojo">Organizador</p>
                    <div class="contenedor-dato">
                        <p class="texto-dato">Organizador</p>
                        <div class="contenedor-input">
                            <select
                                name="cedula_organizador"
                                class="input-dato"
                                required
                            >
                                <option value=""
                                    >Seleccione un Organizador</option
                                >
                                {
                                    organizadores.map((organizador) => (
                                        <option value={organizador.ced_org}>
                                            {organizador.nom_org1}{" "}
                                            {organizador.nom_org2 || ""}{" "}
                                            {organizador.ape_org1}{" "}
                                            {organizador.ape_org2} -{" "}
                                            {organizador.ced_org}
                                        </option>
                                    ))
                                }
                            </select>
                        </div>
                    </div>
                    <!-- Sección de Asignaciones -->
                    <div class="contenedor-superior">
                        <p class="texto-centrado texto-rojo">Dirigido a</p>
                        <div class="contenedor-dato">
                            <p class="texto-dato">Asignación (opcional):</p>
                            <div class="contenedor-input">
                                <select
                                    id="asignacion-evento-nuevo"
                                    name="asignacion_id"
                                    class="input-dato"
                                >
                                    <option value="">
                                        Sin restricciones (abierto a todos)
                                    </option>
                                    <!-- Las opciones se cargarán dinámicamente -->
                                </select>
                            </div>
                            <p class="texto-info-asignaciones">
                                Si no seleccionas una asignación, el evento
                                estará abierto a todos los usuarios sin
                                restricciones de carrera o facultad.
                            </p>
                        </div>
                    </div>
                    <div class="contenedor-imagen">
                        <img
                            id="nueva-evento-imagen"
                            class="imagen-evento"
                            style="display: none;"
                            alt="Imagen del nuevo evento"
                        />
                        <div class="contenedor-file">
                            <label
                                for="file-upload-nuevo"
                                class="custom-file-upload"
                            >
                                <img
                                    src="/img/CRUD/upload.png"
                                    alt="Subir imagen"
                                    class="upload-icon"
                                />
                                <span>Seleccionar imagen</span>
                            </label>
                            <input
                                id="file-upload-nuevo"
                                type="file"
                                name="imagen"
                                class="input-file"
                                accept="image/*"
                            />
                            <p class="file-name">
                                No se ha seleccionado ningún archivo
                            </p>
                        </div>
                    </div>

                    <div class="contenedor-boton-modificar">
                        <button
                            type="button"
                            class="boton-modificar"
                            onclick="cerrarModalNuevoEvento()">Cancelar</button
                        >
                        <button type="submit" class="boton-modificar"
                            >Crear Evento</button
                        >
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .texto-info-asignaciones {
        margin-top: 5px;
        color: #6b7280;
        font-size: 12px;
        font-style: italic;
    }

    .input-dato[name="precio"]:disabled {
        background-color: #f3f4f6;
        color: #6b7280;
    }

    .contenedor-nombre {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 15px;
    }

    .contenedor-dato textarea {
        resize: vertical;
        min-height: 60px;
    }

    .precio-container {
        position: relative;
    }

    .precio-label {
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        color: #6b7280;
        pointer-events: none;
    }

    .input-dato[name="precio"] {
        padding-left: 25px;
    }

    /* Estilos para información de categoría */
    .info-categoria-contenido {
        background-color: #f8fafc;
        border: 1px solid #e2e8f0;
        border-radius: 6px;
        padding: 12px;
        margin-top: 8px;
    }

    .info-item {
        margin: 6px 0;
        font-size: 14px;
        color: #374151;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .info-item strong {
        color: #1f2937;
        min-width: 140px;
    }
    #info-categoria-nuevo {
        border-left: 3px solid #3b82f6;
        padding-left: 12px;
        background-color: #f0f9ff;
        border-radius: 0 6px 6px 0;
    }

    #campos-puntaje-nuevo,
    #campos-asistencia-nuevo {
        border-left: 3px solid #10b981;
        padding-left: 12px;
        background-color: #f0fdf4;
        border-radius: 0 6px 6px 0;
    }

    .categoria-destacada {
        background-color: #eff6ff !important;
        border: 2px solid #3b82f6 !important;
    }
</style>

<script>
    import { actions } from "astro:actions";
    import Swal from "sweetalert2";
    declare global {
        interface Window {
            abrirModalNuevoEvento: () => void;
            cerrarModalNuevoEvento: () => void;
            toggleGratuitoNuevo: (input: HTMLInputElement) => void;
            togglePrecioNuevo: (select: HTMLSelectElement) => void;
            mostrarInfoCategoriaNuevo: (select: HTMLSelectElement) => void;
        }
    }

    let asignacionesDisponibles: any[] = []; // Función para mostrar información de categoría
    function mostrarInfoCategoriaNuevo(select: HTMLSelectElement): void {
        console.log("🔍 Ejecutando mostrarInfoCategoriaNuevo");
        const selectedOption = select.selectedOptions[0];

        // Elementos de información
        const infoCategoria = document.getElementById(
            "info-categoria-nuevo",
        ) as HTMLElement;
        const infoPuntaje = document.getElementById(
            "info-puntaje-nuevo",
        ) as HTMLElement;
        const infoAsistencia = document.getElementById(
            "info-asistencia-nuevo",
        ) as HTMLElement;
        const infoCertificado = document.getElementById(
            "info-certificado-nuevo",
        ) as HTMLElement;
        const valorPuntaje = document.getElementById(
            "valor-puntaje-nuevo",
        ) as HTMLElement;
        const valorPorcentajeAsistencia = document.getElementById(
            "valor-porcentaje-asistencia-nuevo",
        ) as HTMLElement;

        if (!selectedOption || !selectedOption.value) {
            // Ocultar todo si no hay selección
            if (infoCategoria) infoCategoria.style.display = "none";
            return;
        }

        // Obtener datos de la categoría
        const puntajeApr = selectedOption.getAttribute("data-puntaje");
        const porcentajeAsistencia = selectedOption.getAttribute(
            "data-porcentaje-asistencia",
        );
        const requierePuntaje =
            selectedOption.getAttribute("data-requiere-puntaje") === "true";
        const requiereAsistencia =
            selectedOption.getAttribute("data-requiere-asistencia") === "true";
        const brindaCertificado =
            selectedOption.getAttribute("data-brinda-certificado") === "true";

        // Mostrar información de la categoría
        if (infoCategoria) {
            infoCategoria.style.display = "block";

            // Mostrar/ocultar información según los atributos
            if (infoPuntaje && valorPuntaje) {
                if (requierePuntaje && puntajeApr) {
                    infoPuntaje.style.display = "block";
                    valorPuntaje.textContent = puntajeApr;
                } else {
                    infoPuntaje.style.display = "none";
                }
            }

            if (infoAsistencia && valorPorcentajeAsistencia) {
                if (requiereAsistencia) {
                    infoAsistencia.style.display = "block";
                    // Mostrar el porcentaje de asistencia si está disponible, sino un valor por defecto
                    valorPorcentajeAsistencia.textContent =
                        porcentajeAsistencia || "80";
                } else {
                    infoAsistencia.style.display = "none";
                }
            }

            if (infoCertificado) {
                infoCertificado.style.display = brindaCertificado
                    ? "block"
                    : "none";
            }
        }

        console.log("📊 Información de categoría actualizada:", {
            requierePuntaje,
            requiereAsistencia,
            brindaCertificado,
            puntajeApr,
            porcentajeAsistencia,
        });
    } // Función para manejar el toggle de precio gratuito
    function toggleGratuitoNuevo(input: HTMLInputElement): void {
        const esGratuitoSelect = document.querySelector(
            'select[name="es_gratuito-nuevo"]',
        ) as HTMLSelectElement;
        const contenedorPrecio = document.getElementById(
            "contenedor-precio-nuevo",
        ) as HTMLElement;

        if (parseFloat(input.value) === 0) {
            esGratuitoSelect.value = "true";
            input.disabled = true;
            if (contenedorPrecio) contenedorPrecio.style.display = "none";
        } else {
            esGratuitoSelect.value = "false";
            input.disabled = false;
            if (contenedorPrecio) contenedorPrecio.style.display = "block";
        }
    } // Función para manejar el toggle desde el select gratuito
    function togglePrecioNuevo(select: HTMLSelectElement): void {
        const precioInput = document.querySelector(
            'input[name="precio"]',
        ) as HTMLInputElement;
        const contenedorPrecio = document.getElementById(
            "contenedor-precio-nuevo",
        ) as HTMLElement;

        if (select.value === "true") {
            // Es gratuito - ocultar precio
            if (contenedorPrecio) contenedorPrecio.style.display = "none";
            if (precioInput) {
                precioInput.value = "0";
                precioInput.disabled = true;
            }
        } else {
            // No es gratuito - mostrar precio
            if (contenedorPrecio) contenedorPrecio.style.display = "block";
            if (precioInput) {
                precioInput.disabled = false;
                if (precioInput.value === "0") {
                    precioInput.value = "";
                }
            }
        }
    } // Cargar asignaciones disponibles
    async function cargarAsignacionesNuevo() {
        try {
            console.log("🔄 Cargando asignaciones disponibles...");
            const { data, error } = await actions.getAllAsignaciones({});

            if (error) {
                console.error("❌ Error al cargar asignaciones:", error);
                return;
            }

            if (!data?.success || !data.asignaciones) {
                console.warn("⚠️ No hay asignaciones disponibles");
                return;
            }
            asignacionesDisponibles = data.asignaciones;
            const select = document.getElementById(
                "asignacion-evento-nuevo",
            ) as HTMLSelectElement;

            if (!select) {
                console.error(
                    "❌ No se encontró el elemento select #asignacion-evento-nuevo",
                );
                return;
            }

            // Limpiar opciones existentes (excepto la primera)
            while (select.children.length > 1) {
                select.removeChild(select.lastChild!);
            }

            // Agregar asignaciones disponibles
            asignacionesDisponibles.forEach((asignacion) => {
                const option = document.createElement("option");
                option.value = asignacion.id_asi;

                // Mostrar información de la asignación
                let descripcion = asignacion.nom_asi;
                if (asignacion.tip_asi) {
                    descripcion += ` (${asignacion.tip_asi})`;
                }

                option.textContent = descripcion;
                select.appendChild(option);
            });

            console.log(
                "✅ Asignaciones cargadas:",
                asignacionesDisponibles.length,
            );
        } catch (error) {
            console.error("💥 Error crítico al cargar asignaciones:", error);
        }
    }
    function abrirModalNuevoEvento(): void {
        console.log("🎯 Abriendo modal nuevo evento...");
        const modal = document.getElementById("modalNuevoEvento");
        if (modal) {
            modal.style.display = "block";

            // Establecer fechas por defecto
            const fechaHoy = new Date().toISOString().split("T")[0];
            const fechaInscripcionInicio = document.querySelector(
                'input[name="fecha_inicio_inscripciones"]',
            ) as HTMLInputElement;
            const fechaEvento = document.querySelector(
                'input[name="fecha_inicio"]',
            ) as HTMLInputElement;

            if (fechaInscripcionInicio && !fechaInscripcionInicio.value) {
                fechaInscripcionInicio.value = fechaHoy;
            }

            console.log("🔄 Intentando cargar asignaciones...");
            // Cargar asignaciones
            cargarAsignacionesNuevo();
        } else {
            console.error("❌ No se encontró el modal #modalNuevoEvento");
        }
    }
    function cerrarModalNuevoEvento(): void {
        const modal = document.getElementById("modalNuevoEvento");
        const form = document.getElementById(
            "formulario-nuevo-evento",
        ) as HTMLFormElement;

        if (modal && form) {
            modal.style.display = "none";
            form.reset();

            // Resetear imagen
            const imagen = document.getElementById(
                "nueva-evento-imagen",
            ) as HTMLImageElement;
            const fileName = document.querySelector(
                "#modalNuevoEvento .file-name",
            ) as HTMLElement;
            if (imagen) imagen.style.display = "none";
            if (fileName)
                fileName.textContent = "No se ha seleccionado ningún archivo";

            // Resetear precio y su contenedor
            const precioInput = document.querySelector(
                'input[name="precio"]',
            ) as HTMLInputElement;
            const contenedorPrecio = document.getElementById(
                "contenedor-precio-nuevo",
            ) as HTMLElement;
            if (precioInput) {
                precioInput.disabled = false;
                precioInput.value = "0";
            }
            if (contenedorPrecio) {
                contenedorPrecio.style.display = "none";
            } // Resetear información de categoría
            const infoCategoria = document.getElementById(
                "info-categoria-nuevo",
            ) as HTMLElement;

            if (infoCategoria) infoCategoria.style.display = "none";
        }
    } // Asignar funciones al objeto window
    window.abrirModalNuevoEvento = abrirModalNuevoEvento;
    window.cerrarModalNuevoEvento = cerrarModalNuevoEvento;
    window.toggleGratuitoNuevo = toggleGratuitoNuevo;
    window.togglePrecioNuevo = togglePrecioNuevo;
    window.mostrarInfoCategoriaNuevo = mostrarInfoCategoriaNuevo;

    document.addEventListener("DOMContentLoaded", () => {
        const form = document.getElementById(
            "formulario-nuevo-evento",
        ) as HTMLFormElement;
        const fileInput = document.getElementById(
            "file-upload-nuevo",
        ) as HTMLInputElement;
        const fileNameDisplay = document.querySelector(
            "#modalNuevoEvento .file-name",
        ) as HTMLElement;
        const nuevaEventoImagen = document.getElementById(
            "nueva-evento-imagen",
        ) as HTMLImageElement;

        // Manejar cambio de archivo
        if (fileInput && fileNameDisplay && nuevaEventoImagen) {
            fileInput.addEventListener("change", (e: Event) => {
                const target = e.target as HTMLInputElement;
                const file = target.files?.[0];

                if (file && file.type.match("image.*")) {
                    fileNameDisplay.textContent = file.name;
                    const reader = new FileReader();
                    reader.onload = (event) => {
                        if (event.target?.result) {
                            nuevaEventoImagen.src = event.target
                                .result as string;
                            nuevaEventoImagen.style.display = "block";
                        }
                    };
                    reader.readAsDataURL(file);
                } else {
                    fileNameDisplay.textContent =
                        "No se ha seleccionado ningún archivo válido";
                    nuevaEventoImagen.style.display = "none";
                }
            });
        }

        // Manejar envío del formulario
        if (form) {
            form.addEventListener("submit", async (e) => {
                e.preventDefault();

                const formData = new FormData(form);

                // Validar fechas
                const fechaInicio = formData.get("fecha_inicio") as string;
                const fechaFin = formData.get("fecha_fin") as string;
                const fechaInicioInscripciones = formData.get(
                    "fecha_inicio_inscripciones",
                ) as string;
                const fechaFinInscripciones = formData.get(
                    "fecha_fin_inscripciones",
                ) as string;

                if (fechaFin && new Date(fechaFin) <= new Date(fechaInicio)) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas",
                        text: "La fecha de finalización debe ser posterior a la fecha de inicio",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                if (
                    new Date(fechaFinInscripciones) <=
                    new Date(fechaInicioInscripciones)
                ) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas de inscripción",
                        text: "La fecha de fin de inscripciones debe ser posterior al inicio",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                if (new Date(fechaFinInscripciones) > new Date(fechaInicio)) {
                    await Swal.fire({
                        icon: "error",
                        title: "Error en fechas",
                        text: "Las inscripciones deben cerrar antes del inicio del evento",
                        confirmButtonColor: "#dc2626",
                    });
                    return;
                }

                try {
                    const { data, error } = await actions.crearEvento(formData);

                    if (data?.success) {
                        await Swal.fire({
                            icon: "success",
                            title: "¡Éxito!",
                            text: "Evento creado correctamente",
                            confirmButtonColor: "#059669",
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text:
                                data?.message ||
                                error?.message ||
                                "No se pudo crear el evento",
                            confirmButtonColor: "#dc2626",
                        });
                    }
                } catch (error) {
                    console.error("Error:", error);
                    await Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Error al procesar la solicitud",
                        confirmButtonColor: "#dc2626",
                    });
                }
            });
        }
    });
</script>
