---
import Header from "@components/Header.astro";
import MenuAdmin from "@components/MenuAdministrador.astro";
import Layout from "@layouts/Layout.astro";
import "@styles/Admin/EventosCRUD.css";
import { actions } from "astro:actions";

// Obtener todas las asignaciones
const { data: asignacionesData, error: asignacionesError } = await Astro.callAction(actions.getAllAsignaciones, {});

// Obtener carreras para el formulario
const { data: carrerasData } = await Astro.callAction(actions.getCarreras, {});

// Obtener facultades para el formulario
const { data: facultadesData } = await Astro.callAction(actions.getAllFacultades, {});

if (asignacionesError) {
    console.error("Error al obtener asignaciones:", asignacionesError);
}

const asignaciones = asignacionesData?.asignaciones || [];
const carreras = carrerasData?.carreras || [];
const facultades = facultadesData?.facultades || [];

---

<Layout>
    <body>
        <Header />
        <MenuAdmin />

        <!-- Modal para Nueva Asignación -->
        <div id="modalNuevaAsignacion" class="modal" style="display: none;">
            <div class="modal-contenido" style="max-width: 800px;">
                <span class="cerrar" onclick="cerrarModalNuevaAsignacion()">&times;</span>
                
                <div class="modal-header">
                    <h2>Nueva Asignación</h2>
                </div>

                <form id="formNuevaAsignacion" class="form-asignacion">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="nombreAsignacion">Nombre de la Asignación:</label>
                            <input type="text" id="nombreAsignacion" name="nombreAsignacion" required>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="descripcionAsignacion">Descripción:</label>
                            <textarea id="descripcionAsignacion" name="descripcionAsignacion" rows="3" required></textarea>
                        </div>
                    </div>                    <div class="form-row">
                        <div class="form-group">
                            <label for="tipoAsignacion">Tipo de Asignación:</label>
                            <select id="tipoAsignacion" name="tipoAsignacion" required onchange="manejarCambioTipo('nueva')">
                                <option value="GENERAL">General</option>
                                <option value="CARRERA">Por Carrera</option>
                                <!-- <option value="FACULTAD">Por Facultad</option> -->
                               
                            </select>
                        </div>
                    </div>

                    <div id="seccionCarrerasNueva" class="form-row" style="display: none;">
                        <div class="form-group">
                            <label for="carrerasAsignacion">Carreras Asociadas:</label>
                            <select id="carrerasAsignacion" name="carrerasAsignacion" multiple>
                                {carreras.map((carrera: any) => (
                                    <option value={carrera.id_car}>
                                        {carrera.nom_car} ({carrera.cod_car})
                                    </option>
                                ))}
                            </select>
                            <small>Mantén presionado Ctrl para seleccionar múltiples carreras</small>
                        </div>
                    </div>

                    <div id="seccionFacultadesNueva" class="form-row" style="display: none;">
                        <div class="form-group">
                            <label for="facultadesAsignacion">Facultades Asociadas:</label>
                            <select id="facultadesAsignacion" name="facultadesAsignacion" multiple onchange="actualizarCarrerasPorFacultad('nueva')">
                                {facultades.map((facultad: any) => (
                                    <option value={facultad.id_fac} data-carreras={JSON.stringify(facultad.carreras)}>
                                        {facultad.nom_fac}
                                    </option>
                                ))}
                            </select>
                            <small>Al seleccionar una facultad, se incluyen automáticamente todas sus carreras</small>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn-principal">Crear Asignación</button>
                        <button type="button" onclick="cerrarModalNuevaAsignacion()" class="btn-secundario">
                            Cancelar
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Modal para Editar Asignación -->
        <div id="modalEditarAsignacion" class="modal" style="display: none;">
            <div class="modal-contenido" style="max-width: 800px;">
                <span class="cerrar" onclick="cerrarModalEditarAsignacion()">&times;</span>
                
                <div class="modal-header">
                    <h2>Editar Asignación</h2>
                </div>

                <form id="formEditarAsignacion" class="form-asignacion">
                    <input type="hidden" id="editarAsignacionId" name="asignacionId">
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="editarNombreAsignacion">Nombre de la Asignación:</label>
                            <input type="text" id="editarNombreAsignacion" name="nombreAsignacion" required>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="editarDescripcionAsignacion">Descripción:</label>
                            <textarea id="editarDescripcionAsignacion" name="descripcionAsignacion" rows="3" required></textarea>
                        </div>
                    </div>                    <div class="form-row">
                        <div class="form-group">
                            <label for="editarTipoAsignacion">Tipo de Asignación:</label>
                            <select id="editarTipoAsignacion" name="tipoAsignacion" required onchange="manejarCambioTipo('editar')">
                                <option value="GENERAL">General</option>
                                <option value="CARRERA">Por Carrera</option>
                                <option value="FACULTAD">Por Facultad</option>
                                <option value="EXTERNO">Externo</option>
                            </select>
                        </div>
                    </div>

                    <div id="seccionCarrerasEditar" class="form-row" style="display: none;">
                        <div class="form-group">
                            <label for="editarCarrerasAsignacion">Carreras Asociadas:</label>
                            <select id="editarCarrerasAsignacion" name="carrerasAsignacion" multiple>
                                {carreras.map((carrera: any) => (
                                    <option value={carrera.id_car}>
                                        {carrera.nom_car} ({carrera.cod_car})
                                    </option>
                                ))}
                            </select>
                            <small>Mantén presionado Ctrl para seleccionar múltiples carreras</small>
                        </div>
                    </div>

                    <div id="seccionFacultadesEditar" class="form-row" style="display: none;">
                        <div class="form-group">
                            <label for="editarFacultadesAsignacion">Facultades Asociadas:</label>
                            <select id="editarFacultadesAsignacion" name="facultadesAsignacion" multiple onchange="actualizarCarrerasPorFacultad('editar')">
                                {facultades.map((facultad: any) => (
                                    <option value={facultad.id_fac} data-carreras={JSON.stringify(facultad.carreras)}>
                                        {facultad.nom_fac}
                                    </option>
                                ))}
                            </select>
                            <small>Al seleccionar una facultad, se incluyen automáticamente todas sus carreras</small>
                        </div>
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn-principal">Actualizar Asignación</button>
                        <button type="button" onclick="cerrarModalEditarAsignacion()" class="btn-secundario">
                            Cancelar
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <main class="registros">
            <div class="registros-grid">
                <div class="registros-superior">
                    <div class="registros-superior-izquierdo">
                        Asignaciones
                    </div>
                    <div class="registros-superior-derecho">
                        <a
                            onclick="abrirModalNuevaAsignacion()"
                            class="contenedor-boton-nuevo-registro"
                        >
                            <button class="boton-nuevo-registro" title="Nueva Asignación">
                                Nueva Asignación
                            </button>
                            <p class="anadir-icon">+</p>
                        </a>
                    </div>
                </div>

                <div class="registros-inferior-titulos">
                    <div class="registro-fila">                        <div class="parte-izquierda-registro-encabezado">
                            Nombre
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Descripción
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Tipo
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Carreras Asociadas
                        </div>
                        <div class="parte-derecha-registro-encabezado">
                            Opciones
                        </div>
                    </div>
                </div>
                
                <div class="registros-inferior">
                    {asignaciones.map((asignacion: any) => (
                        <input
                            type="hidden"
                            name="asignacion"
                            value={JSON.stringify(asignacion)}
                        />                        <div class="registro-fila">
                            <div class="parte-izquierda-registro-fila">
                                {asignacion.nom_asi}
                            </div>
                            <div class="parte-izquierda-registro-fila">
                                {asignacion.des_asi?.slice(0, 50)}...
                            </div>
                            <div class="parte-izquierda-registro-fila">
                                <span class="badge badge-info">{asignacion.tip_asi}</span>
                            </div>                            <div class="parte-izquierda-registro-fila">
                                {asignacion.detalle_asignaciones?.length > 0 ? 
                                    asignacion.detalle_asignaciones.map((detalle: any) => (
                                        <span class="badge badge-success" style="margin: 2px;">
                                            {detalle.carreras.nom_car}
                                        </span>
                                    )) 
                                    : asignacion.tip_asi === 'GENERAL' ?
                                        <span class="texto-muted">Aplica a todos</span> :
                                        <span class="texto-muted">Sin carreras asignadas</span>
                                }
                            </div>
                            <div class="registro-opciones">
                                <button
                                    title="Editar"
                                    onclick={`editarAsignacion('${asignacion.id_asi}')`}
                                >
                                    <img
                                        src="/img/CRUD/modificar-registro.svg"
                                        alt="boton editar"
                                        class="imagen-boton-registro"
                                    />
                                </button>
                                <button
                                    title="Eliminar"
                                    onclick={`eliminarAsignacion('${asignacion.id_asi}')`}
                                >
                                    <img
                                        src="/img/CRUD/eliminar-registro.svg"
                                        alt="boton eliminar"
                                        class="imagen-boton-registro"
                                    />
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </main>

        <style>
            /* Estilos específicos para la página de asignaciones */
            .modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
            }

            .modal-contenido {
                background-color: #fefefe;
                margin: 2% auto;
                padding: 20px;
                border: 1px solid #888;
                border-radius: 10px;
                max-height: 90vh;
                overflow-y: auto;
            }

            .modal-header {
                text-align: center;
                margin-bottom: 20px;
                border-bottom: 1px solid #eee;
                padding-bottom: 15px;
            }

            .form-asignacion {
                display: flex;
                flex-direction: column;
                gap: 15px;
            }

            .form-row {
                display: flex;
                gap: 15px;
            }

            .form-group {
                flex: 1;
            }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
                color: #333;
            }            .form-group input,
            .form-group select,
            .form-group textarea {
                width: 100%;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
                font-size: 14px;
            }

            .form-group select[multiple] {
                min-height: 120px;
            }

            .form-group small {
                display: block;
                margin-top: 5px;
                color: #666;
                font-style: italic;
            }

            .texto-muted {
                color: #6b7280;
                font-style: italic;
            }

            .opciones-checkbox {
                flex-direction: column;
                gap: 10px;
            }

            .opciones-checkbox .form-group label {
                display: flex;
                align-items: center;
                font-weight: normal;
            }

            .opciones-checkbox input[type="checkbox"] {
                width: auto;
                margin-right: 8px;
            }

            .seccion-requisitos {
                border: 1px solid #ddd;
                border-radius: 6px;
                padding: 15px;
                background: white;
            }

            .requisito-item {
                display: flex;
                gap: 10px;
                margin-bottom: 10px;
                padding: 10px;
                background: #f5f5f5;
                border-radius: 4px;
                align-items: center;
            }

            .requisito-item input {
                flex: 1;
            }

            .btn-eliminar-requisito {
                background: #dc2626;
                color: white;
                border: none;
                padding: 5px 10px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
            }

            .form-actions {
                display: flex;
                gap: 10px;
                justify-content: flex-end;
                margin-top: 20px;
            }

            .btn-principal,
            .btn-secundario {
                padding: 10px 20px;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-weight: bold;
            }

            .btn-principal {
                background: #059669;
                color: white;
            }

            .btn-secundario {
                background: #6b7280;
                color: white;
            }

            .btn-principal:hover {
                background: #047857;
            }

            .btn-secundario:hover {
                background: #4b5563;
            }

            .config-badges {
                display: flex;
                flex-wrap: wrap;
                gap: 5px;
            }

            .badge {
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 11px;
                font-weight: bold;
            }

            .badge-info {
                background: #3b82f6;
                color: white;
            }

            .badge-success {
                background: #10b981;
                color: white;
            }

            .badge-warning {
                background: #f59e0b;
                color: white;
            }

            .cerrar {
                color: #aaa;
                float: right;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
            }

            .cerrar:hover {
                color: #000;
            }

            @media (max-width: 768px) {
                .form-row {
                    flex-direction: column;
                }
                
                .modal-contenido {
                    width: 95%;
                    margin: 5% auto;
                }

                .requisito-item {
                    flex-direction: column;
                    align-items: stretch;
                }
            }        
            </style>        
             <script>
                import { actions } from "astro:actions";
                import Swal from "sweetalert2";
    
                // Función para abrir modal de nueva asignación
                function abrirModalNuevaAsignacion() {
                    const modal = document.getElementById("modalNuevaAsignacion");
                    if (modal) modal.style.display = "block";
                }
    
                // Función para cerrar modal de nueva asignación
                function cerrarModalNuevaAsignacion() {
                    const modal = document.getElementById("modalNuevaAsignacion");
                    const form = document.getElementById("formNuevaAsignacion") as HTMLFormElement;
                    
                    if (modal) modal.style.display = "none";
                    if (form) form.reset();
                }
    
                // Función para abrir modal de editar asignación
                function abrirModalEditarAsignacion() {
                    const modal = document.getElementById("modalEditarAsignacion");
                    if (modal) modal.style.display = "block";
                }
    
                // Función para cerrar modal de editar asignación
                function cerrarModalEditarAsignacion() {
                    const modal = document.getElementById("modalEditarAsignacion");
                    const form = document.getElementById("formEditarAsignacion") as HTMLFormElement;
                    
                    if (modal) modal.style.display = "none";
                    if (form) form.reset();
                }
    
                // Función para editar asignación
                async function editarAsignacion(asignacionId: string) {
                    const asignaciones = Array.from(document.querySelectorAll('input[name="asignacion"]'))
                        .map(input => JSON.parse((input as HTMLInputElement).value));
                    
                    const asignacion = asignaciones.find((a: any) => a.id_asi === asignacionId);
                    
                    if (!asignacion) {
                        console.error('Asignación no encontrada:', asignacionId);
                        return;
                    }                    // Llenar el formulario de edición
                    (document.getElementById("editarAsignacionId") as HTMLInputElement).value = asignacion.id_asi;
                    (document.getElementById("editarNombreAsignacion") as HTMLInputElement).value = asignacion.nom_asi;
                    (document.getElementById("editarDescripcionAsignacion") as HTMLTextAreaElement).value = asignacion.des_asi;
                    (document.getElementById("editarTipoAsignacion") as HTMLSelectElement).value = asignacion.tip_asi;

                    // Mostrar/ocultar secciones según el tipo
                    manejarCambioTipo('editar');

                    // Seleccionar carreras asociadas
                    const selectCarreras = document.getElementById("editarCarrerasAsignacion") as HTMLSelectElement;
                    if (selectCarreras && asignacion.detalle_asignaciones) {
                        Array.from(selectCarreras.options).forEach(option => {
                            option.selected = asignacion.detalle_asignaciones.some((detalle: any) => 
                                detalle.id_car === option.value
                            );
                        });
                    }

                    abrirModalEditarAsignacion();
                }
    
                // Función para eliminar asignación
                async function eliminarAsignacion(asignacionId: string) {
                    try {
                        const resultado = await Swal.fire({
                            title: "¿Estás seguro?",
                            text: "No podrás revertir esta acción",
                            icon: "warning",
                            showCancelButton: true,
                            confirmButtonColor: "#dc2626",
                            cancelButtonColor: "#6b7280",
                            confirmButtonText: "Sí, eliminar",
                            cancelButtonText: "Cancelar",
                        });                    if (resultado.isConfirmed) {
                            const { data, error } = await actions.eliminarAsignacionCompleta({
                                id_asignacion: asignacionId,
                            });
    
                            if (error || !data?.success) {
                                await Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text: data?.error || "No se pudo eliminar la asignación",
                                    confirmButtonColor: "#dc2626",
                                });
                            } else {
                                await Swal.fire({
                                    icon: "success",
                                    title: "Eliminado",
                                    text: "La asignación ha sido eliminada correctamente",
                                    confirmButtonColor: "#059669",
                                }).then(() => {
                                    window.location.reload();
                                });
                            }
                        }
                    } catch (error) {
                        console.error("Error:", error);
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: "Error al procesar la solicitud",
                            confirmButtonColor: "#dc2626",
                        });
                    }
                }                // Función para manejar el cambio de tipo de asignación
                function manejarCambioTipo(contexto: 'nueva' | 'editar') {
                    const selectTipo = document.getElementById(
                        contexto === 'nueva' ? 'tipoAsignacion' : 'editarTipoAsignacion'
                    ) as HTMLSelectElement;
                    
                    const seccionCarreras = document.getElementById(
                        contexto === 'nueva' ? 'seccionCarrerasNueva' : 'seccionCarrerasEditar'
                    );
                    
                    const seccionFacultades = document.getElementById(
                        contexto === 'nueva' ? 'seccionFacultadesNueva' : 'seccionFacultadesEditar'
                    );

                    if (!selectTipo || !seccionCarreras || !seccionFacultades) return;

                    const tipoSeleccionado = selectTipo.value;

                    // Ocultar todas las secciones por defecto
                    seccionCarreras.style.display = 'none';
                    seccionFacultades.style.display = 'none';

                    // Mostrar la sección correspondiente
                    switch (tipoSeleccionado) {
                        case 'CARRERA':
                        case 'EXTERNO':
                            seccionCarreras.style.display = 'block';
                            break;
                        case 'FACULTAD':
                            seccionFacultades.style.display = 'block';
                            break;
                        case 'GENERAL':
                        default:
                            // No mostrar ninguna sección adicional
                            break;
                    }

                    // Limpiar selecciones previas
                    const selectCarreras = document.getElementById(
                        contexto === 'nueva' ? 'carrerasAsignacion' : 'editarCarrerasAsignacion'
                    ) as HTMLSelectElement;
                    
                    const selectFacultades = document.getElementById(
                        contexto === 'nueva' ? 'facultadesAsignacion' : 'editarFacultadesAsignacion'
                    ) as HTMLSelectElement;

                    if (selectCarreras) {
                        Array.from(selectCarreras.options).forEach(option => option.selected = false);
                    }
                    
                    if (selectFacultades) {
                        Array.from(selectFacultades.options).forEach(option => option.selected = false);
                    }
                }

                // Función para actualizar carreras cuando se seleccionan facultades
                function actualizarCarrerasPorFacultad(contexto: 'nueva' | 'editar') {
                    const selectFacultades = document.getElementById(
                        contexto === 'nueva' ? 'facultadesAsignacion' : 'editarFacultadesAsignacion'
                    ) as HTMLSelectElement;

                    const selectCarreras = document.getElementById(
                        contexto === 'nueva' ? 'carrerasAsignacion' : 'editarCarrerasAsignacion'
                    ) as HTMLSelectElement;

                    if (!selectFacultades || !selectCarreras) return;

                    // Limpiar selecciones de carreras
                    Array.from(selectCarreras.options).forEach(option => option.selected = false);

                    // Obtener todas las carreras de las facultades seleccionadas
                    const carrerasDeseadas: string[] = [];
                    
                    Array.from(selectFacultades.selectedOptions).forEach(option => {
                        try {
                            const carreras = JSON.parse(option.getAttribute('data-carreras') || '[]');
                            carreras.forEach((carrera: any) => {
                                carrerasDeseadas.push(carrera.id_car);
                            });
                        } catch (error) {
                            console.error('Error al procesar carreras de la facultad:', error);
                        }
                    });

                    // Seleccionar las carreras correspondientes
                    Array.from(selectCarreras.options).forEach(option => {
                        if (carrerasDeseadas.includes(option.value)) {
                            option.selected = true;
                        }
                    });
                }

                // Función para recopilar carreras seleccionadas
                function recopilarCarrerasSeleccionadas(selectId: string): string[] {
                    const select = document.getElementById(selectId) as HTMLSelectElement;
                    if (!select) return [];
                    
                    return Array.from(select.selectedOptions).map(option => option.value);
                }
    
                // Event listeners
                document.addEventListener('DOMContentLoaded', () => {
                    // Formulario de nueva asignación
                    const formNuevaAsignacion = document.getElementById('formNuevaAsignacion');
                    if (formNuevaAsignacion) {
                        formNuevaAsignacion.addEventListener('submit', async (e) => {
                            e.preventDefault();
                              const formData = new FormData(formNuevaAsignacion as HTMLFormElement);
                            const tipoAsignacion = formData.get('tipoAsignacion') as string;
                            
                            let carrerasSeleccionadas: string[] = [];
                            
                            // Obtener carreras según el tipo de asignación
                            if (tipoAsignacion === 'CARRERA' || tipoAsignacion === 'EXTERNO') {
                                carrerasSeleccionadas = recopilarCarrerasSeleccionadas('carrerasAsignacion');
                            } else if (tipoAsignacion === 'FACULTAD') {
                                carrerasSeleccionadas = recopilarCarrerasSeleccionadas('carrerasAsignacion');
                            }
                            // Para GENERAL no se necesitan carreras específicas
                            
                            const asignacionData = {
                                nom_asi: formData.get('nombreAsignacion') as string,
                                des_asi: formData.get('descripcionAsignacion') as string,
                                tip_asi: tipoAsignacion,
                                carreras: carrerasSeleccionadas
                            };
                              try {
                                const { data, error } = await actions.crearAsignacionCompleta(asignacionData);
                                
                                if (error || !data?.success) {
                                    await Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: data?.error || "No se pudo crear la asignación",
                                        confirmButtonColor: "#dc2626",
                                    });
                                } else {
                                    await Swal.fire({
                                        icon: "success",
                                        title: "¡Éxito!",
                                        text: "Asignación creada correctamente",
                                        confirmButtonColor: "#059669",
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                    cerrarModalNuevaAsignacion();
                                }
                            } catch (error) {
                                console.error("Error:", error);
                                await Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text: "Error al procesar la solicitud",
                                    confirmButtonColor: "#dc2626",
                                });
                            }
                        });
                    }
    
                    // Formulario de editar asignación
                    const formEditarAsignacion = document.getElementById('formEditarAsignacion');
                    if (formEditarAsignacion) {
                        formEditarAsignacion.addEventListener('submit', async (e) => {
                            e.preventDefault();
                              const formData = new FormData(formEditarAsignacion as HTMLFormElement);
                            const tipoAsignacion = formData.get('tipoAsignacion') as string;
                            
                            let carrerasSeleccionadas: string[] = [];
                            
                            // Obtener carreras según el tipo de asignación
                            if (tipoAsignacion === 'CARRERA' || tipoAsignacion === 'EXTERNO') {
                                carrerasSeleccionadas = recopilarCarrerasSeleccionadas('editarCarrerasAsignacion');
                            } else if (tipoAsignacion === 'FACULTAD') {
                                carrerasSeleccionadas = recopilarCarrerasSeleccionadas('editarCarrerasAsignacion');
                            }
                            // Para GENERAL no se necesitan carreras específicas
                            
                            const asignacionData = {
                                id_asignacion: formData.get('asignacionId') as string,
                                nom_asi: formData.get('nombreAsignacion') as string,
                                des_asi: formData.get('descripcionAsignacion') as string,
                                tip_asi: tipoAsignacion,
                                carreras: carrerasSeleccionadas
                            };
                              try {
                                const { data, error } = await actions.modificarAsignacionCompleta(asignacionData);
                                
                                if (error || !data?.success) {
                                    await Swal.fire({
                                        icon: "error",
                                        title: "Error",
                                        text: data?.error || "No se pudo actualizar la asignación",
                                        confirmButtonColor: "#dc2626",
                                    });
                                } else {
                                    await Swal.fire({
                                        icon: "success",
                                        title: "¡Éxito!",
                                        text: "Asignación actualizada correctamente",
                                        confirmButtonColor: "#059669",
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                    cerrarModalEditarAsignacion();
                                }
                            } catch (error) {
                                console.error("Error:", error);
                                await Swal.fire({
                                    icon: "error",
                                    title: "Error",
                                    text: "Error al procesar la solicitud",
                                    confirmButtonColor: "#dc2626",
                                });
                            }
                        });
                    }
    
                    // Cerrar modales al hacer clic fuera
                    window.addEventListener('click', (event) => {
                        const modalNueva = document.getElementById('modalNuevaAsignacion');
                        const modalEditar = document.getElementById('modalEditarAsignacion');
                        
                        if (event.target === modalNueva) {
                            cerrarModalNuevaAsignacion();
                        }
                        if (event.target === modalEditar) {
                            cerrarModalEditarAsignacion();                        }
                    });
                });

            // Hacer funciones disponibles globalmente
                declare global {
                    interface Window {
                        abrirModalNuevaAsignacion: () => void;
                        cerrarModalNuevaAsignacion: () => void;
                        abrirModalEditarAsignacion: () => void;
                        cerrarModalEditarAsignacion: () => void;
                        editarAsignacion: (asignacionId: string) => Promise<void>;
                        eliminarAsignacion: (asignacionId: string) => Promise<void>;
                        manejarCambioTipo: (contexto: 'nueva' | 'editar') => void;
                        actualizarCarrerasPorFacultad: (contexto: 'nueva' | 'editar') => void;
                    }
                }

                (window as any).abrirModalNuevaAsignacion = abrirModalNuevaAsignacion;
                (window as any).cerrarModalNuevaAsignacion = cerrarModalNuevaAsignacion;
                (window as any).abrirModalEditarAsignacion = abrirModalEditarAsignacion;
                (window as any).cerrarModalEditarAsignacion = cerrarModalEditarAsignacion;
                (window as any).editarAsignacion = editarAsignacion;
                (window as any).eliminarAsignacion = eliminarAsignacion;
                (window as any).manejarCambioTipo = manejarCambioTipo;
                (window as any).actualizarCarrerasPorFacultad = actualizarCarrerasPorFacultad;
            </script>
    </body>
</Layout>