---
import "../../styles/global.css";
import Header from "@components/Header.astro";
import MenuAdmin from "../../components/MenuAdministrador.astro";
import Layout from "../../layouts/Layout.astro";
import ModalDetallesEvento from "../../components/Admin/EventosCRUD/ModalDetallesEvento.astro";
import ModalModificarEvento from "../../components/Admin/EventosCRUD/ModalModificarEvento.astro";
import ModalNuevoEvento from "../../components/Admin/EventosCRUD/ModalNuevoEvento.astro";
import "../../styles/Admin/EventosCRUD.css";

import { actions } from "astro:actions";

const searchParams = Astro.url.searchParams;
const categoriaFiltro = searchParams.get("categoria");

// Obtener eventos con información relacionada
const { data, error } = await Astro.callAction(actions.getEventos, {
    categoria: categoriaFiltro || undefined,
});

// Obtener categorías para el filtro
const { data: categoriasData } = await Astro.callAction(actions.getAllCategorias, {});
const { data: organizadoresData } = await Astro.callAction(actions.getOrganizadoresCR, {});

if (error) {
    console.error("Error al obtener eventos:", error);
}

const eventos = data?.eventos || [];
const categorias = categoriasData?.categorias || [];
const organizadores = organizadoresData?.organizadores || [];

// Los eventos ya vienen con la información completa desde la acción getEventos
const eventosCompletos = eventos;

// Calcular estadísticas básicas
const totalEventos = eventosCompletos.length;
const eventosGratuitos = eventosCompletos.filter((e: any) => e.es_gratuito).length;
const eventosPagos = totalEventos - eventosGratuitos;
const fechaHoy = new Date();
const eventosActivos = eventosCompletos.filter((e: any) => {
    const fechaInicio = new Date(e.fec_ini_eve);
    const fechaFin = e.fec_fin_eve ? new Date(e.fec_fin_eve) : fechaInicio;
    return fechaInicio <= fechaHoy && fechaFin >= fechaHoy;
}).length;

---

<Layout>
    <body>
        <Header />
        <MenuAdmin />        <ModalDetallesEvento />
        <ModalModificarEvento categorias={categorias} organizadores={organizadores} />
        <ModalNuevoEvento categorias={categorias} organizadores={organizadores} /><main class="registros">
            <!-- Panel de estadísticas -->
            

            <div class="registros-grid">
                <div class="registros-superior">
                    <div class="registros-superior-izquierdo">
                        Eventos                        <select
                            id="filtroCategoria"
                            class="select-estado"
                            onchange="window.location.href = `?categoria=${this.value}`"
                        >
                            <option value="" selected={!categoriaFiltro}>
                                Todos los eventos
                            </option>
                            {categorias.map((categoria: any) => (
                                <option
                                    value={categoria.id_cat}
                                    selected={categoriaFiltro === categoria.id_cat}
                                >
                                    {categoria.nom_cat}
                                </option>
                            ))}
                        </select>
                    </div>
                    <div class="registros-superior-derecho">
                        <a
                            onclick="window.abrirModalNuevoEvento()"
                            class="contenedor-boton-nuevo-registro"
                        >
                            <button class="boton-nuevo-registro" title="Nuevo">
                                Nuevo Evento
                            </button>
                            <p class="anadir-icon">+</p>
                        </a>
                    </div>
                </div>                <div class="registros-inferior-titulos">
                    <div class="registro-fila">
                        <div class="parte-izquierda-registro-encabezado">
                            Nombre
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Categoría
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Organizador
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Fecha Inicio
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Precio
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Asignación
                        </div>
                        <div class="parte-derecha-registro-encabezado">
                            Opciones
                        </div>
                    </div>
                </div><div class="registros-inferior">
                    {
                        eventosCompletos.map((evento: any) => (
                            <input
                                type="hidden"
                                name="evento"
                                value={JSON.stringify(evento)}
                            />                            <div class="registro-fila">
                                <div class="parte-izquierda-registro-fila">
                                    {evento.nom_eve}
                                </div>
                                <div class="parte-izquierda-registro-fila">
                                    {evento.categorias_eventos?.nom_cat || "N/A"}
                                </div>
                                <div class="parte-izquierda-registro-fila">
                                    {evento.organizadores ? 
                                        `${evento.organizadores.tit_aca_org} ${evento.organizadores.nom_org1} ${evento.organizadores.ape_org1}` 
                                        : "N/A"}
                                </div>
                                <div class="parte-izquierda-registro-fila">
                                    {new Date(evento.fec_ini_eve)
                                        .toLocaleDateString('es-ES', {
                                            year: 'numeric',
                                            month: '2-digit',
                                            day: '2-digit'
                                        })}
                                </div>
                                <div class="parte-izquierda-registro-fila">
                                    {evento.es_gratuito 
                                        ? "Gratuito" 
                                        : `$${Number(evento.precio || 0).toFixed(2)}`}
                                </div>
                                <div class="parte-izquierda-registro-fila">
                                    {evento.asignaciones?.nom_asi || "General"}
                                </div>                                <div class="registro-opciones">
                                    <button
                                        title="Detalles"
                                        onclick={`mostrarDetallesEvento('${evento.id_eve}')`}
                                    >
                                        <img
                                            src="/img/CRUD/mostrar-detalles.svg"
                                            alt="boton mostrar detalles"
                                            class="imagen-boton-registro"
                                        />
                                    </button>
                                    
                                    <button
                                        title="Modificar"
                                        onclick={`window.abrirModalModificarEvento('${evento.id_eve}')`}
                                    >
                                        <img
                                            src="/img/CRUD/modificar-registro.svg"
                                            alt="boton modificar"
                                            class="imagen-boton-modificar"
                                        />
                                    </button>
                                    
                                    <button
                                        title="Eliminar"
                                        onclick={`eliminarEvento('${evento.id_eve}')`}
                                        style="background-color: #dc2626;"
                                    >
                                        <img
                                            src="/img/CRUD/eliminar-registro.svg"
                                            alt="boton eliminar registro"
                                            class="imagen-boton-registro"
                                        />
                                    </button>
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
        </main>

        <style>
            .registro-opciones button {
                margin: 0 2px;
                border-radius: 4px;
                transition: all 0.2s ease;
            }
            
            .registro-opciones button:hover {
                transform: scale(1.05);
                box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            }
            
            .parte-izquierda-registro-fila {
                font-size: 0.9rem;
                padding: 8px 4px;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            
            .estado-evento {
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 0.75rem;
                font-weight: bold;
                color: white;
            }
            
            .evento-activo { background-color: #059669; }
            .evento-finalizado { background-color: #6b7280; }
            .evento-proximo { background-color: #3b82f6; }
        </style>

        <script>
            import { actions } from "astro:actions";
            import Swal from "sweetalert2";            // Interfaces para tipado simplificadas

            async function eliminarEvento(eventoId: string) {
                try {
                    const resultado = await Swal.fire({
                        title: "¿Estás seguro?",
                        text: "No podrás revertir esta acción",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#dc2626",
                        cancelButtonColor: "#6b7280",
                        confirmButtonText: "Sí, eliminar",
                        cancelButtonText: "Cancelar",
                    });

                    if (resultado.isConfirmed) {
                        const { data, error } = await actions.eliminarEvento({
                            id_evento: eventoId,
                        });

                        if (error || !data?.success) {
                            await Swal.fire({
                                icon: "error",
                                title: "Error",
                                text: data?.error || "No se pudo eliminar el evento",
                                confirmButtonColor: "#dc2626",
                            });
                        } else {
                            await Swal.fire({
                                icon: "success",
                                title: "Eliminado",
                                text: "El evento ha sido eliminado correctamente",
                                confirmButtonColor: "#059669",
                            }).then(() => {
                                window.location.reload();
                            });
                        }
                    }
                } catch (error) {
                    console.error("Error:", error);
                    await Swal.fire({
                        icon: "error",
                        title: "Error",
                        text: "Error al procesar la solicitud",
                        confirmButtonColor: "#dc2626",
                    });
                }
            }            function mostrarDetallesEvento(eventoId: string) {
                const eventos = Array.from(document.querySelectorAll('input[name="evento"]'))
                    .map(input => JSON.parse((input as HTMLInputElement).value));
                
                const evento = eventos.find((e: any) => e.id_eve === eventoId);
                
                if (!evento) {
                    console.error('Evento no encontrado:', eventoId);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No se pudo encontrar la información del evento',
                        confirmButtonColor: '#dc2626'
                    });
                    return;
                }

                // Preparar datos del evento para el modal
                const eventoDetallado = {
                    ...evento,
                    // Formatear fechas para mejor visualización
                    fec_ini_eve_formatted: new Date(evento.fec_ini_eve).toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    }),
                    fec_fin_eve_formatted: evento.fec_fin_eve ? new Date(evento.fec_fin_eve).toLocaleDateString('es-ES', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    }) : 'No especificada',
                    // Formatear precio
                    precio_formatted: evento.es_gratuito ? 'Gratuito' : `$${Number(evento.precio || 0).toFixed(2)}`,
                    // Formatear organizador
                    organizador_completo: evento.organizadores ? 
                        `${evento.organizadores.tit_aca_org} ${evento.organizadores.nom_org1} ${evento.organizadores.nom_org2 || ''} ${evento.organizadores.ape_org1} ${evento.organizadores.ape_org2 || ''}`.trim()
                        : 'No asignado'
                };

                // Llamar a la función del modal
                if (window.abrirModalDetallesEvento) {
                    window.abrirModalDetallesEvento(eventoDetallado);
                } else {
                    console.error('La función abrirModalDetallesEvento no está disponible');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'No se pudo abrir el modal de detalles',
                        confirmButtonColor: '#dc2626'
                    });
                }
            }            function abrirModalAsignacionesEvento(eventoId: string, nombreEvento: string) {
                // Función removida - ya no se usa gestión de asignaciones desde eventos
                console.log('Función de asignaciones removida');
            }            // Hacer funciones disponibles globalmente
            declare global {
                interface Window {
                    eliminarEvento: (eventoId: string) => Promise<void>;
                    mostrarDetallesEvento: (eventoId: string) => void;
                    abrirModalNuevoEvento: () => void;
                    abrirModalModificarEvento: (eventoId: string) => void;
                    abrirModalDetallesEvento: (evento: any) => void;
                    refrescarPagina: () => void;
                    mostrarNotificacionExito: (mensaje: string) => void;
                    mostrarNotificacionError: (mensaje: string) => void;
                }
            }

            window.eliminarEvento = eliminarEvento;
            window.mostrarDetallesEvento = mostrarDetallesEvento;
            window.refrescarPagina = refrescarPagina;
            window.mostrarNotificacionExito = mostrarNotificacionExito;
            window.mostrarNotificacionError = mostrarNotificacionError;
            // La función abrirModalAsignaciones se expone desde el componente ModalAsignaciones
            
            // Función para refrescar la página después de operaciones exitosas
            function refrescarPagina() {
                window.location.reload();
            }

            // Función para mostrar notificaciones de éxito
            function mostrarNotificacionExito(mensaje: string) {
                Swal.fire({
                    icon: 'success',
                    title: '¡Éxito!',
                    text: mensaje,
                    confirmButtonColor: '#059669',
                    timer: 2000,
                    timerProgressBar: true
                });
            }

            // Función para mostrar notificaciones de error
            function mostrarNotificacionError(mensaje: string) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: mensaje,
                    confirmButtonColor: '#dc2626'
                });
            }
        </script>
    </body>
</Layout>
