---
import Header from "@components/Header.astro";
import MenuAdmin from "../../components/MenuAdministrador.astro";
import Layout from "../../layouts/Layout.astro";
import "../../styles/AprobacionesInscripciones.css";
import { actions } from "astro:actions";

// Lógica para obtener participantes del evento específico
const { eventoId } = Astro.params;

if (!eventoId) {
    Astro.redirect("/");
}

const { data: inscripcion, error } = await Astro.callAction(
    actions.getByIdInscripcion,
    {
        id: eventoId || "default-event-id",
    },
);

if (error) {
    console.error("Error al obtener inscripciones:", error);
}

// Filtrar solo participantes aprobados (con estado 'Aprobado' en inscripción)
const participantes =
    inscripcion?.inscripciones?.filter(
        (ins: any) => ins.est_ins === "Aprobado",
    ) || [];

console.log("Participantes obtenidos:", participantes.length);

// Log detallado de cada participante para verificar estados
if (participantes.length > 0) {
    console.log("=== ESTADOS ACTUALES DE PARTICIPANTES ===");
    participantes.forEach((p: any, index: number) => {
        console.log(`Participante ${index + 1}:`, {
            id: p.id_ins,
            nombre: `${p.usuarios?.nom_usu1} ${p.usuarios?.ape_usu1}`,
            est_par: p.est_par,
            asi_par: p.asi_par,
            not_par: p.not_par,
        });
    });
    console.log("=========================================");
}

// Obtener información del evento y sus asignaciones
const eventoInfo = participantes.length > 0 ? participantes[0].eventos : null;

// Log para verificar los datos de la categoría
console.log("=== DEBUG CATEGORÍA ===");
console.log("Evento info:", eventoInfo);
if (eventoInfo) {
    console.log("Categorías del evento:", eventoInfo.categorias_eventos);
    if (eventoInfo.categorias_eventos) {
        console.log(
            "Requiere asistencia:",
            eventoInfo.categorias_eventos.requiere_asistencia,
        );
        console.log("Nombre categoría:", eventoInfo.categorias_eventos.nom_cat);
        console.log(
            "Descripción categoría:",
            eventoInfo.categorias_eventos.des_cat,
        );
    } else {
        console.log("❌ No se encontraron datos de categorías_eventos");
    }
}

// Log para verificar datos de participantes
if (participantes.length > 0) {
    console.log("=== DEBUG PRIMER PARTICIPANTE ===");
    console.log("Primer participante completo:", participantes[0]);
    console.log("Eventos del primer participante:", participantes[0].eventos);
    console.log(
        "Categoría del evento del participante:",
        participantes[0].eventos?.categorias_eventos,
    );
}
console.log("=== FIN DEBUG ===");

// Función para formatear la asistencia
function formatearAsistencia(
    asiPar: number | null | undefined,
    requiereAsistencia: boolean,
): {
    texto: string;
    clase: string;
} {
    if (!requiereAsistencia) {
        return { texto: "No aplicable", clase: "no-aplicable" };
    }

    if (asiPar === null || asiPar === undefined) {
        return { texto: "Sin registrar", clase: "sin-registrar" };
    }

    if (asiPar === 0) {
        return { texto: "No asistió (0%)", clase: "no" };
    }

    if (asiPar >= 1 && asiPar <= 100) {
        return { texto: `${asiPar}%`, clase: asiPar >= 70 ? "si" : "parcial" };
    }

    return { texto: "Sin registrar", clase: "sin-registrar" };
}

// Función para formatear la nota
function formatearNota(
    nota: number | string | null | undefined,
    requierePuntaje: boolean,
    puntajeAprobacion: number = 7.0,
): {
    texto: string;
    clase: string;
} {
    if (!requierePuntaje) {
        return { texto: "No aplicable", clase: "no-aplicable" };
    }

    if (nota === null || nota === undefined || nota === "") {
        return { texto: "Sin calificar", clase: "sin-calificar" };
    }

    const numeroNota = typeof nota === "string" ? parseFloat(nota) : nota;

    if (isNaN(numeroNota)) {
        return { texto: "Sin calificar", clase: "sin-calificar" };
    }

    if (numeroNota >= puntajeAprobacion) {
        return { texto: numeroNota.toFixed(1), clase: "aprobado" };
    } else {
        return { texto: numeroNota.toFixed(1), clase: "reprobado" };
    }
}

// Función para formatear el estado de participación
function formatearEstadoParticipacion(estado: string): {
    texto: string;
    clase: string;
} {
    switch (estado) {
        case "APROBADA":
            return { texto: "Aprobada", clase: "aprobada" };
        case "REPROBADA":
            return { texto: "Reprobada", clase: "reprobada" };
        case "PENDIENTE":
            return { texto: "Pendiente", clase: "pendiente" };
        case "ASISTIO":
            return { texto: "Solo Asistió", clase: "asistio" };
        default:
            return { texto: estado, clase: "pendiente" };
    }
}

// Función para calcular el estado dinámicamente según los requisitos de la categoría
function calcularEstadoParticipacion(
    asiPar: number | null | undefined,
    notPar: number | null | undefined,
    requiereAsistencia: boolean,
    requierePuntaje: boolean,
    puntajeAprobacion: number = 7.0,
    porcentajeAsistenciaMinimo: number = 70,
): {
    estado: string;
    motivo: string;
} {
    console.log("=== CALCULANDO ESTADO ===");
    console.log("Asistencia:", asiPar);
    console.log("Nota:", notPar);
    console.log("Requiere asistencia:", requiereAsistencia);
    console.log("Requiere puntaje:", requierePuntaje);
    console.log("Puntaje aprobación:", puntajeAprobacion);

    // Si no requiere nada, está aprobado por defecto
    if (!requiereAsistencia && !requierePuntaje) {
        return {
            estado: "APROBADA",
            motivo: "No requiere asistencia ni puntaje",
        };
    }

    let cumpleAsistencia = true;
    let cumplePuntaje = true;
    let motivoRechazo = [];

    // Verificar asistencia si es requerida
    if (requiereAsistencia) {
        if (asiPar === null || asiPar === undefined) {
            cumpleAsistencia = false;
            motivoRechazo.push("falta asistencia");
        } else if (asiPar < porcentajeAsistenciaMinimo) {
            cumpleAsistencia = false;
            motivoRechazo.push(
                `asistencia insuficiente (${asiPar}% < ${porcentajeAsistenciaMinimo}%)`,
            );
        }
    }

    // Verificar puntaje si es requerido
    if (requierePuntaje) {
        if (notPar === null || notPar === undefined) {
            cumplePuntaje = false;
            motivoRechazo.push("falta calificación");
        } else {
            const nota =
                typeof notPar === "string" ? parseFloat(notPar) : notPar;
            if (isNaN(nota) || nota < puntajeAprobacion) {
                cumplePuntaje = false;
                motivoRechazo.push(
                    `nota insuficiente (${nota} < ${puntajeAprobacion})`,
                );
            }
        }
    }

    // Determinar estado final
    if (cumpleAsistencia && cumplePuntaje) {
        return { estado: "APROBADA", motivo: "Cumple todos los requisitos" };
    } else if (!cumpleAsistencia && !cumplePuntaje) {
        return { estado: "REPROBADA", motivo: motivoRechazo.join(", ") };
    } else if (!cumpleAsistencia) {
        return { estado: "REPROBADA", motivo: motivoRechazo.join(", ") };
    } else if (!cumplePuntaje) {
        return { estado: "REPROBADA", motivo: motivoRechazo.join(", ") };
    } else {
        return { estado: "PENDIENTE", motivo: "En evaluación" };
    }
}

const links = [
    { label: "Eventos", href: "/Admin/EventosCRUD" },
    { label: "Usuarios", href: "/perfil" },
    { label: "Organizadores", href: "/historial" },
    { label: "Inscripciones", href: "AprobacionInscripciones" },
    { label: "Categorías", href: "/historial" },
    { label: "Carreras", href: "/historial" },
];
---

<Layout>
    <body>
        <Header />
        <MenuAdmin links={links} />

        <!-- Modal para editar calificaciones -->
        <div id="modalCalificaciones" class="modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-header">
                    <h3>Gestionar Calificación</h3>
                    <span class="close">&times;</span>
                </div>
                <div class="modal-body">
                    <form id="formCalificacion">
                        <div class="form-group">
                            <label for="participante">Participante:</label>
                            <input type="text" id="participante" readonly />
                        </div>
                        <div class="form-group">
                            <label for="asistencia">Asistencia:</label>
                            <div id="asistencia-container">
                                <!-- Campo dinámico que cambiará según la categoría del evento -->
                                <select
                                    id="asistencia-select"
                                    name="asistencia"
                                    style="display: none;"
                                >
                                    <option value="100">Asistió</option>
                                    <option value="0">No Asistió</option>
                                </select>
                                <input
                                    type="number"
                                    id="asistencia-number"
                                    name="asistencia"
                                    min="0"
                                    max="100"
                                    step="1"
                                    placeholder="Porcentaje de asistencia (0-100)"
                                    style="display: none;"
                                />
                                <p
                                    id="asistencia-no-aplicable"
                                    style="display: none; color: #6c757d; font-style: italic;"
                                >
                                    Este evento no requiere registro de
                                    asistencia
                                </p>
                            </div>
                        </div>
                        <div class="form-group">
                            <div id="nota-container">
                                <!-- Campo dinámico que cambiará según la categoría del evento -->
                                <label for="nota">Nota (0-10):</label>
                                <input
                                    type="number"
                                    id="nota-number"
                                    name="nota"
                                    min="0"
                                    max="10"
                                    step="0.1"
                                    placeholder="Calificación (0.0 - 10.0)"
                                    style="display: none;"
                                />
                                <p
                                    id="nota-no-aplicable"
                                    style="display: none; color: #6c757d; font-style: italic;"
                                >
                                    Este evento no requiere calificación
                                </p>
                                <small
                                    id="nota-info"
                                    style="display: none; color: #6c757d; font-size: 0.8rem;"
                                >
                                    Puntaje mínimo de aprobación: <span
                                        id="puntaje-min"></span>
                                </small>
                            </div>
                        </div>
                        <!-- El estado se calcula automáticamente según los requisitos de la categoría -->
                        <div
                            class="form-group"
                            id="estado-info"
                            style="display: none; visibility: hidden; height: 0; padding: 0; margin: 0;"
                        >
                            <label>Estado actual:</label>
                            <div id="estado-calculado" class="estado-preview">
                                <span id="estado-texto" class="badge-estado"
                                ></span>
                                <small
                                    id="estado-motivo"
                                    style="display: block; margin-top: 0.5rem; color: #6c757d; font-style: italic;"
                                ></small>
                            </div>
                        </div>

                        <div class="modal-actions">
                            <button type="button" class="btn-cancelar"
                                >Cancelar</button
                            >
                            <button type="submit" class="btn-guardar"
                                >Guardar</button
                            >
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <main class="registros">
            <div class="registros-grid">
                <div class="registros-superior">
                    <div class="registros-superior-izquierdo">
                        {
                            eventoInfo && (
                                <span class="evento-nombre">
                                    {eventoInfo.nom_eve}
                                </span>
                            )
                        }

                        {
                            eventoInfo?.asignaciones && (
                                <div class="info-asignacion" />
                            )
                        }
                        {
                            eventoInfo?.categorias_eventos && (
                                <div class="info-requisitos">
                                    <small>
                                        <strong>Requisitos:</strong>{" "}
                                        {!eventoInfo.categorias_eventos
                                            .requiere_asistencia &&
                                        !eventoInfo.categorias_eventos
                                            .requiere_puntaje ? (
                                            <span class="sin-requisitos">
                                                No requiere asistencia ni
                                                calificación - Aprobación
                                                automática
                                            </span>
                                        ) : (
                                            <>
                                                {eventoInfo.categorias_eventos
                                                    .requiere_asistencia && (
                                                    <span class="requisito">
                                                        Asistencia (
                                                        {eventoInfo
                                                            .categorias_eventos
                                                            .asi_cat || 70}
                                                        % mín.)
                                                    </span>
                                                )}
                                                {eventoInfo.categorias_eventos
                                                    .requiere_asistencia &&
                                                    eventoInfo
                                                        .categorias_eventos
                                                        .requiere_puntaje && (
                                                        <span> | </span>
                                                    )}
                                                {eventoInfo.categorias_eventos
                                                    .requiere_puntaje && (
                                                    <span class="requisito">
                                                        Calificación (
                                                        {eventoInfo
                                                            .categorias_eventos
                                                            .pun_apr_cat ||
                                                            7.0}{" "}
                                                        mín.)
                                                    </span>
                                                )}
                                            </>
                                        )}
                                    </small>
                                </div>
                            )
                        }
                    </div>
                    <div class="registros-superior-derecho">
                        <select
                            name="filtroEstado"
                            id="filtroEstado"
                            class="select-estado-par"
                        >
                            <option value="todos">Todos</option>
                            <option value="PENDIENTE">Pendientes</option>
                            <option value="APROBADA">Aprobadas</option>
                            <option value="REPROBADA">Reprobadas</option>
                            <option value="ASISTIO">Solo Asistió</option>
                        </select>

                        {/* Mostrar estado del evento */}
                        <span
                            class={`estado-evento ${eventoInfo?.estado_evento?.toLowerCase()}`}
                        >
                            Estado: {eventoInfo?.estado_evento || "ACTIVO"}
                        </span>

                        {
                            /* Botón finalizar evento - solo visible si está ACTIVO */
                        }
                        {
                            eventoInfo?.estado_evento === "ACTIVO" && (
                                <button
                                    class="btn-finalizar"
                                    onclick="finalizarEvento()"
                                    title="Finalizar evento - bloqueará la edición de participaciones"
                                >
                                    🏁 Finalizar Evento
                                </button>
                            )
                        }

                        {
                            /* Botones de exportar - solo visibles si el evento está FINALIZADO */
                        }
                        {
                            eventoInfo?.estado_evento === "FINALIZADO" && (
                                <>
                                    Exportar
                                    <button
                                        class="btn-exportar"
                                        onclick="exportarCalificaciones()"
                                    >
                                        SVG
                                    </button>
                                    <button
                                        class="btn-pdf"
                                        onclick="exportarPDF()"
                                    >
                                        PDF
                                    </button>
                                </>
                            )
                        }

                        {/* Botón recalcular - solo visible si está ACTIVO */}
                        {
                            eventoInfo?.estado_evento === "ACTIVO" && (
                                <button
                                    class="btn-recalcular"
                                    onclick="recalcularTodosLosEstados()"
                                >
                                    Recalcular Estados
                                </button>
                            )
                        }
                    </div>
                </div>
                <div class="registros-inferior-titulos">
                    <div class="registro-fila">
                        <div class="parte-izquierda-registro-encabezado">
                            Nombres
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Apellidos
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Carrera
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Asistencia
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Nota
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Estado
                        </div>
                        <div class="parte-derecha-registro-encabezado">
                            Opciones
                        </div>
                    </div>
                </div>
                <div class="registros-inferior">
                    {
                        participantes.length > 0 ? (
                            participantes.map((participante: any) => {
                                const requiereAsistencia =
                                    participante.eventos?.categorias_eventos
                                        ?.requiere_asistencia || false;
                                const requierePuntaje =
                                    participante.eventos?.categorias_eventos
                                        ?.requiere_puntaje || false;
                                const puntajeAprobacion =
                                    participante.eventos?.categorias_eventos
                                        ?.pun_apr_cat || 7.0;
                                const porcentajeAsistenciaMinimo =
                                    participante.eventos?.categorias_eventos
                                        ?.asi_cat || 70;

                                // Log para cada participante
                                console.log(
                                    `=== PARTICIPANTE ${participante.id_ins} ===`,
                                );
                                console.log(
                                    "Datos categoría del participante:",
                                    participante.eventos?.categorias_eventos,
                                );
                                console.log(
                                    "Requiere asistencia:",
                                    requiereAsistencia,
                                );
                                console.log(
                                    "Requiere puntaje:",
                                    requierePuntaje,
                                );
                                console.log(
                                    "Puntaje aprobación:",
                                    puntajeAprobacion,
                                );
                                console.log(
                                    "Porcentaje asistencia mínimo:",
                                    porcentajeAsistenciaMinimo,
                                );
                                console.log(
                                    "Asistencia actual:",
                                    participante.asi_par,
                                );
                                console.log(
                                    "Nota actual:",
                                    participante.not_par,
                                );

                                const asistencia = formatearAsistencia(
                                    participante.asi_par,
                                    requiereAsistencia,
                                );
                                const notaFormateada = formatearNota(
                                    participante.not_par,
                                    requierePuntaje,
                                    puntajeAprobacion,
                                );
                                console.log(
                                    "Asistencia formateada:",
                                    asistencia,
                                );
                                console.log("Nota formateada:", notaFormateada); // Calcular estado dinámicamente según requisitos de la categoría
                                const estadoCalculado =
                                    calcularEstadoParticipacion(
                                        participante.asi_par,
                                        participante.not_par,
                                        requiereAsistencia,
                                        requierePuntaje,
                                        puntajeAprobacion,
                                        porcentajeAsistenciaMinimo,
                                    );
                                console.log(
                                    "Estado calculado:",
                                    estadoCalculado,
                                );

                                const estadoParticipacion =
                                    formatearEstadoParticipacion(
                                        estadoCalculado.estado,
                                    );
                                return (
                                    <div
                                        class="registro-fila"
                                        data-estado={estadoCalculado.estado}
                                        data-participante-id={
                                            participante.id_ins
                                        }
                                        data-asistencia={
                                            participante.asi_par || 0
                                        }
                                        data-nota={participante.not_par || ""}
                                        data-requiere-asistencia={
                                            requiereAsistencia
                                        }
                                        data-requiere-puntaje={requierePuntaje}
                                        data-puntaje-aprobacion={
                                            puntajeAprobacion
                                        }
                                        data-porcentaje-asistencia-minimo={
                                            porcentajeAsistenciaMinimo
                                        }
                                        data-motivo={estadoCalculado.motivo}
                                    >
                                        <div class="parte-izquierda-registro-fila">
                                            {participante.usuarios?.nom_usu1}{" "}
                                            {participante.usuarios?.nom_usu2 ||
                                                ""}
                                        </div>
                                        <div class="parte-izquierda-registro-fila">
                                            {participante.usuarios?.ape_usu1}{" "}
                                            {participante.usuarios?.ape_usu2}
                                        </div>
                                        <div class="parte-izquierda-registro-fila">
                                            <span
                                                class="carrera-info"
                                                title={
                                                    participante.usuarios
                                                        ?.carreras?.des_car ||
                                                    ""
                                                }
                                            >
                                                {participante.usuarios?.carreras
                                                    ? `${participante.usuarios.carreras.nom_car} (${participante.usuarios.carreras.facultades?.nom_fac || "Sin facultad"})`
                                                    : "Sin carrera asignada"}
                                            </span>
                                        </div>
                                        <div class="parte-izquierda-registro-fila">
                                            <span
                                                class={`badge-asistencia ${asistencia.clase}`}
                                            >
                                                {asistencia.texto}
                                            </span>
                                        </div>{" "}
                                        <div class="parte-izquierda-registro-fila">
                                            <span
                                                class={`badge-nota ${notaFormateada.clase}`}
                                            >
                                                {notaFormateada.texto}
                                            </span>
                                        </div>
                                        <div class="parte-izquierda-registro-fila">
                                            <span
                                                class={`badge-estado ${estadoParticipacion.clase}`}
                                            >
                                                {estadoParticipacion.texto}
                                            </span>
                                        </div>{" "}
                                        <div class="registro-opciones">
                                            <button
                                                onclick={
                                                    eventoInfo?.estado_evento ===
                                                    "FINALIZADO"
                                                        ? ""
                                                        : `abrirModalCalificacion('${participante.id_ins}', '${participante.usuarios?.nom_usu1} ${participante.usuarios?.nom_usu2 || ""} ${participante.usuarios?.ape_usu1} ${participante.usuarios?.ape_usu2}', ${requiereAsistencia}, ${requierePuntaje})`
                                                }
                                                title={
                                                    eventoInfo?.estado_evento ===
                                                    "FINALIZADO"
                                                        ? "Evento finalizado - No se pueden editar calificaciones"
                                                        : requiereAsistencia ||
                                                            requierePuntaje
                                                          ? "Editar Calificación"
                                                          : "Este evento no requiere calificación"
                                                }
                                                class={`btn-calificar ${(!requiereAsistencia && !requierePuntaje) || eventoInfo?.estado_evento === "FINALIZADO" ? "btn-disabled" : ""}`}
                                            >
                                                <img
                                                    class="imagen-boton-registro"
                                                    src="/img/CRUD/modificar-registro.svg"
                                                    alt="Calificar"
                                                />
                                            </button>
                                        </div>
                                    </div>
                                );
                            })
                        ) : (
                            <div class="sin-participantes">
                                <p>
                                    No hay participantes aprobados para este
                                    evento.
                                </p>
                            </div>
                        )
                    }
                </div>
            </div>
        </main>
    </body>

    <style>
        /* Estilos para información de carrera */
        .carrera-info {
            font-size: 0.9rem;
            color: #495057;
            cursor: help;
        } /* Estilos para información de asignación */
        .info-asignacion {
            margin-top: 0.5rem;
            color: #6c757d;
            font-style: italic;
        }

        .info-asignacion small {
            font-size: 0.8rem;
        }

        /* Estilos para información de requisitos */
        .info-requisitos {
            margin-top: 0.3rem;
            color: #495057;
        }

        .info-requisitos small {
            font-size: 0.8rem;
        }

        .info-requisitos .sin-requisitos {
            color: #28a745;
            font-weight: bold;
        }

        .info-requisitos .requisito {
            color: #b01025;
            font-weight: 500;
        }

        /* Estilos para badges de asistencia */
        .badge-asistencia {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        .badge-asistencia.si {
            background-color: #28a745;
            color: white;
        }

        .badge-asistencia.parcial {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-asistencia.no {
            background-color: #dc3545;
            color: white;
        }

        .badge-asistencia.sin-registrar {
            background-color: #6c757d;
            color: white;
        }
        .badge-asistencia.no-aplicable {
            background-color: #e9ecef;
            color: #6c757d;
            font-style: italic;
        }

        /* Estilos para badges de nota */
        .badge-nota {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
        }

        .badge-nota.aprobado {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .badge-nota.reprobado {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .badge-nota.sin-calificar {
            background-color: #e2e3e5;
            color: #6c757d;
            border: 1px solid #d6d8db;
        }

        .badge-nota.no-aplicable {
            background-color: #e9ecef;
            color: #6c757d;
            font-style: italic;
            border: 1px solid #dee2e6;
        }

        /* Estilos para badges de estado */
        .badge-estado {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: bold;
            text-transform: uppercase;
        }

        .badge-estado.pendiente {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-estado.aprobada {
            background-color: #28a745;
            color: white;
        }

        .badge-estado.reprobada {
            background-color: #dc3545;
            color: white;
        }

        .badge-estado.asistio {
            background-color: #17a2b8;
            color: white;
        }

        /* Estilos para la nota */
        .nota-display {
            font-weight: bold;
            font-size: 1.1rem;
            color: #333;
        }

        /* Botón exportar */
        .btn-exportar {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }

        .btn-exportar:hover {
            background-color: #218838;
        }

        .btn-pdf {
            background-color: var(--color-fuerte-uta);
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }
        .btn-pdf:hover {
            background-color: var(--color-oscuro-uta);
        }

        .btn-recalcular {
            background-color: #17a2b8;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
        }
        .btn-recalcular:hover {
            background-color: #138496;
        }

        /* Estilos para botón finalizar evento */
        .btn-finalizar {
            background-color: #fd7e14;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 5px;
            margin-left: 0.5rem;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s ease;
        }

        .btn-finalizar:hover {
            background-color: #e8670e;
            transform: translateY(-2px);
        }

        /* Estilos para estado del evento */
        .estado-evento {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.85rem;
            font-weight: bold;
            margin-left: 1rem;
            margin-right: 0.5rem;
        }

        .estado-evento.activo {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .estado-evento.finalizado {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .estado-evento.cancelado {
            background-color: #e2e3e5;
            color: #6c757d;
            border: 1px solid #d6d8db;
        }
        /* Modal styles */
        .modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            border-bottom: 1px solid #eee;
        }

        .modal-header h3 {
            margin: 0;
            color: #333;
        }

        .close {
            font-size: 1.5rem;
            cursor: pointer;
            color: #999;
        }

        .close:hover {
            color: #333;
        }

        .modal-body {
            padding: 1.5rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: #333;
        }

        .form-group input,
        .form-group select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        } /* Estilos para el campo de asistencia dinámico */
        #asistencia-container input[type="number"],
        #nota-container input[type="number"] {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }

        #asistencia-container input[type="number"]:focus,
        #nota-container input[type="number"]:focus {
            outline: none;
            border-color: #b01025;
            box-shadow: 0 0 0 2px rgba(176, 16, 37, 0.1);
        }

        .modal-actions {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 1.5rem;
        }

        .btn-cancelar,
        .btn-guardar {
            padding: 0.5rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.2s ease;
        }

        .btn-cancelar {
            background-color: #a3a9ae;
            color: white;
        }

        .btn-guardar {
            background-color: #b01025;
            color: white;
        }

        .btn-cancelar:hover {
            background-color: #6c757d;
            transform: translateY(-2px);
        }

        .btn-guardar:hover {
            background-color: #880f1f;
            transform: translateY(-2px);
        }

        .btn-calificar {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
        } /* Estilos adicionales para mejorar la apariencia */
        .sin-participantes {
            text-align: center;
            padding: 2rem;
            color: #6c757d;
            font-style: italic;
        }

        /*
        .evento-nombre {
            color: #007bff;
            font-weight: bold;
        }
        */

        .total-participantes {
            color: #6c757d;
            font-size: 0.9rem;
        }

        .select-estado {
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-right: 0.5rem;
        }

        .registro-fila[data-estado] {
            transition: opacity 0.3s ease;
        }
        .btn-calificar:hover {
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        /* Estilos para botón deshabilitado */
        .btn-calificar.btn-disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-calificar.btn-disabled:hover {
            background-color: transparent;
            transform: none;
        }

        .btn-calificar.btn-disabled img {
            filter: grayscale(100%);
        }

        /* Estilos para la vista previa del estado calculado */
        .estado-preview {
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }

        #estado-motivo {
            font-size: 0.85rem;
            line-height: 1.4;
        }

        /* Estilos para información de carrera */
        .carrera-info {
            font-size: 0.9rem;
            color: #495057;
            cursor: help;
        }

        /* Estilos para información de asignación */
        .info-asignacion {
            margin-top: 0.5rem;
            color: #6c757d;
            font-style: italic;
        }

        .info-asignacion small {
            font-size: 0.8rem;
        }

        @media (max-width: 768px) {
            .modal-content {
                width: 95%;
                margin: 1rem;
            }

            .modal-actions {
                flex-direction: column;
            }

            .btn-cancelar,
            .btn-guardar {
                width: 100%;
            }
        }
    </style>
    <script>
        import { actions } from "astro:actions";
        import Swal from "sweetalert2";
        import jsPDF from "jspdf";
        import autoTable from "jspdf-autotable";

        // Extiende la interfaz Window para evitar errores de TypeScript
        declare global {
            interface Window {
                abrirModalCalificacion?: any;
                exportarCalificaciones?: any;
                exportarPDF?: any;
                recalcularTodosLosEstados?: any;
                finalizarEvento?: any;
                limpiarMarcaRecalculo?: any;
            }
        }

        // Función para calcular el estado dinámicamente (versión JavaScript)
        function calcularEstadoModal(
            asistencia: number | null,
            nota: number | null,
            requiereAsistencia: boolean,
            requierePuntaje: boolean,
            puntajeAprobacion: number = 7.0,
            porcentajeAsistenciaMinimo: number = 70,
        ): { estado: string; motivo: string; clase: string } {
            console.log("=== CALCULANDO ESTADO EN MODAL ===");
            console.log("Asistencia:", asistencia);
            console.log("Nota:", nota);
            console.log("Requiere asistencia:", requiereAsistencia);
            console.log("Requiere puntaje:", requierePuntaje);

            // Si no requiere nada, está aprobado por defecto
            if (!requiereAsistencia && !requierePuntaje) {
                return {
                    estado: "APROBADA",
                    motivo: "No requiere asistencia ni puntaje",
                    clase: "aprobada",
                };
            }

            let cumpleAsistencia = true;
            let cumplePuntaje = true;
            let motivoRechazo = [];

            // Verificar asistencia si es requerida
            if (requiereAsistencia) {
                if (asistencia === null || asistencia === undefined) {
                    cumpleAsistencia = false;
                    motivoRechazo.push("falta asistencia");
                } else if (asistencia < porcentajeAsistenciaMinimo) {
                    cumpleAsistencia = false;
                    motivoRechazo.push(
                        `asistencia insuficiente (${asistencia}% < ${porcentajeAsistenciaMinimo}%)`,
                    );
                }
            }

            // Verificar puntaje si es requerido
            if (requierePuntaje) {
                if (nota === null || nota === undefined) {
                    cumplePuntaje = false;
                    motivoRechazo.push("falta calificación");
                } else if (nota < puntajeAprobacion) {
                    cumplePuntaje = false;
                    motivoRechazo.push(
                        `nota insuficiente (${nota} < ${puntajeAprobacion})`,
                    );
                }
            }

            // Determinar estado final
            if (cumpleAsistencia && cumplePuntaje) {
                return {
                    estado: "APROBADA",
                    motivo: "Cumple todos los requisitos",
                    clase: "aprobada",
                };
            } else {
                return {
                    estado: "REPROBADA",
                    motivo: motivoRechazo.join(", "),
                    clase: "reprobada",
                };
            }
        } // Función para actualizar la vista previa del estado
        function actualizarEstadoPreview(
            requiereAsistencia: boolean,
            requierePuntaje: boolean,
            puntajeAprobacion: number,
            porcentajeAsistenciaMinimo: number = 70,
        ) {
            const asistenciaNumber = document.getElementById(
                "asistencia-number",
            ) as HTMLInputElement;
            const notaNumber = document.getElementById(
                "nota-number",
            ) as HTMLInputElement;
            const estadoTexto = document.getElementById(
                "estado-texto",
            ) as HTMLElement;
            const estadoMotivo = document.getElementById(
                "estado-motivo",
            ) as HTMLElement;
            const estadoInfo = document.getElementById(
                "estado-info",
            ) as HTMLElement;

            if (!estadoTexto || !estadoMotivo || !estadoInfo) return;

            // Obtener valores actuales
            const asistenciaValor = requiereAsistencia
                ? asistenciaNumber?.value
                    ? parseFloat(asistenciaNumber.value)
                    : null
                : 100; // Si no requiere asistencia, consideramos que "asistió"

            const notaValor = requierePuntaje
                ? notaNumber?.value
                    ? parseFloat(notaNumber.value)
                    : null
                : puntajeAprobacion; // Si no requiere nota, consideramos que "aprobó"            // Calcular estado
            const resultado = calcularEstadoModal(
                asistenciaValor,
                notaValor,
                requiereAsistencia,
                requierePuntaje,
                puntajeAprobacion,
                porcentajeAsistenciaMinimo,
            );

            // Actualizar interfaz
            estadoTexto.textContent =
                resultado.estado === "APROBADA" ? "Aprobada" : "Reprobada";
            estadoTexto.className = `badge-estado ${resultado.clase}`;
            estadoMotivo.textContent = resultado.motivo;
            estadoInfo.style.display = "block";
        } // Función para abrir modal de calificación        // Función para resetear el modal antes de abrirlo
        function resetearModal() {
            console.log("=== RESETEANDO MODAL ===");

            const modal = document.getElementById(
                "modalCalificaciones",
            ) as HTMLElement;
            const asistenciaSelect = document.getElementById(
                "asistencia-select",
            ) as HTMLSelectElement;
            const asistenciaNumber = document.getElementById(
                "asistencia-number",
            ) as HTMLInputElement;
            const asistenciaNoAplicable = document.getElementById(
                "asistencia-no-aplicable",
            ) as HTMLElement;
            const notaNumber = document.getElementById(
                "nota-number",
            ) as HTMLInputElement;
            const notaNoAplicable = document.getElementById(
                "nota-no-aplicable",
            ) as HTMLElement;
            const notaInfo = document.getElementById(
                "nota-info",
            ) as HTMLElement;
            const estadoInfo = document.getElementById(
                "estado-info",
            ) as HTMLElement;

            // Limpiar el data-participante-id del modal para evitar conflictos
            if (modal) {
                modal.removeAttribute("data-participante-id");
                delete modal.dataset.participanteId;
            }

            // Resetear todos los campos a su estado inicial
            if (asistenciaSelect) {
                asistenciaSelect.style.display = "none";
                asistenciaSelect.removeAttribute("name");
                asistenciaSelect.disabled = false;
                asistenciaSelect.value = "100";
            }

            if (asistenciaNumber) {
                asistenciaNumber.style.display = "none";
                asistenciaNumber.removeAttribute("name");
                asistenciaNumber.disabled = false;
                asistenciaNumber.value = "";
            }

            if (asistenciaNoAplicable) {
                asistenciaNoAplicable.style.display = "none";
            }

            if (notaNumber) {
                notaNumber.style.display = "none";
                notaNumber.removeAttribute("name");
                notaNumber.disabled = false;
                notaNumber.value = "";
            }

            if (notaNoAplicable) {
                notaNoAplicable.style.display = "none";
            }

            if (notaInfo) {
                notaInfo.style.display = "none";
            }

            if (estadoInfo) {
                estadoInfo.style.display = "none";
            }

            console.log("Modal reseteado completamente");
        }

        //@ts-ignore
        window.abrirModalCalificacion = function (
            participanteId: string,
            nombreCompleto: string,
            requiereAsistencia: boolean,
            requierePuntaje: boolean,
        ) {
            console.log("=== VALIDANDO APERTURA DEL MODAL ===");
            console.log("Participante ID:", participanteId);
            console.log("Requiere asistencia:", requiereAsistencia);
            console.log("Requiere puntaje:", requierePuntaje);

            // Verificar si el evento está finalizado
            const estadoEventoElement =
                document.querySelector(".estado-evento");
            const estadoEvento =
                estadoEventoElement?.textContent?.includes("FINALIZADO");

            if (estadoEvento) {
                Swal.fire({
                    title: "Evento finalizado",
                    text: "No se pueden editar las calificaciones porque el evento ya está finalizado.",
                    icon: "warning",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#b01025",
                });
                return;
            }

            // Validar si el evento requiere al menos asistencia o puntaje
            if (!requiereAsistencia && !requierePuntaje) {
                // Mostrar mensaje informativo y no abrir el modal
                Swal.fire({
                    title: "No se requiere calificación",
                    text: "Este evento no requiere registro de asistencia ni calificación. Los participantes están aprobados automáticamente.",
                    icon: "info",
                    confirmButtonText: "Entendido",
                    confirmButtonColor: "#b01025",
                });
                return;
            }

            console.log("Validación pasada, abriendo modal...");

            // IMPORTANTE: Resetear el modal antes de configurarlo
            resetearModal();

            const modal = document.getElementById(
                "modalCalificaciones",
            ) as HTMLElement;
            const participanteInput = document.getElementById(
                "participante",
            ) as HTMLInputElement;
            const asistenciaSelect = document.getElementById(
                "asistencia-select",
            ) as HTMLSelectElement;
            const asistenciaNumber = document.getElementById(
                "asistencia-number",
            ) as HTMLInputElement;
            const asistenciaNoAplicable = document.getElementById(
                "asistencia-no-aplicable",
            ) as HTMLElement;
            const notaNumber = document.getElementById(
                "nota-number",
            ) as HTMLInputElement;
            const notaNoAplicable = document.getElementById(
                "nota-no-aplicable",
            ) as HTMLElement;
            const notaInfo = document.getElementById(
                "nota-info",
            ) as HTMLElement;
            const puntajeMin = document.getElementById(
                "puntaje-min",
            ) as HTMLElement;

            if (modal && participanteInput) {
                participanteInput.value = nombreCompleto;

                // Buscar los datos actuales del participante en la tabla
                // Ser específico para evitar seleccionar el modal que también tiene el mismo data-participante-id
                const filaParticipante = document.querySelector(
                    `.registros-inferior .registro-fila[data-participante-id="${participanteId}"]`,
                ) as HTMLElement;
                let requiereAsistencia = false;
                let requierePuntaje = false;
                let puntajeAprobacion = 7.0;
                let porcentajeAsistenciaMinimo = 70;
                let asistenciaActual = "0";
                let notaActual = "0";
                if (filaParticipante) {
                    // Log para debug del modal
                    console.log("=== DEBUG MODAL ===");
                    console.log("Participante ID:", participanteId);
                    console.log("Fila encontrada:", filaParticipante);
                    console.log(
                        "Dataset completo de la fila:",
                        filaParticipante.dataset,
                    ); // Extraer datos actuales de la fila
                    asistenciaActual =
                        filaParticipante.dataset.asistencia || "0";
                    notaActual = filaParticipante.dataset.nota || "0";
                    requiereAsistencia =
                        filaParticipante.dataset.requiereAsistencia === "true";
                    requierePuntaje =
                        filaParticipante.dataset.requierePuntaje === "true";
                    puntajeAprobacion = parseFloat(
                        filaParticipante.dataset.puntajeAprobacion || "7.0",
                    );
                    porcentajeAsistenciaMinimo = parseFloat(
                        filaParticipante.dataset.porcentajeAsistenciaMinimo ||
                            "70",
                    );
                    console.log("Datos extraídos:");
                    console.log("- Asistencia actual:", asistenciaActual);
                    console.log("- Nota actual:", notaActual);
                    console.log("- Requiere asistencia:", requiereAsistencia);
                    console.log("- Requiere puntaje:", requierePuntaje);
                    console.log("- Puntaje aprobación:", puntajeAprobacion);
                    console.log("=== FIN DEBUG MODAL ===");
                } // Configurar el campo de asistencia según la categoría del evento
                console.log("=== CONFIGURACIÓN DEL MODAL ===");
                console.log(
                    "Configurando campos con requiereAsistencia:",
                    requiereAsistencia,
                );
                console.log(
                    "Configurando campos con requierePuntaje:",
                    requierePuntaje,
                );

                if (!requiereAsistencia) {
                    // Evento no requiere asistencia
                    console.log(
                        "Configurando modal para evento SIN asistencia",
                    );
                    asistenciaSelect.style.display = "none";
                    asistenciaNumber.style.display = "none";
                    asistenciaNoAplicable.style.display = "block";
                    asistenciaSelect.removeAttribute("name");
                    asistenciaNumber.removeAttribute("name");
                } else {
                    // Evento requiere asistencia - usar campo numérico
                    console.log(
                        "Configurando modal para evento CON asistencia, valor:",
                        asistenciaActual,
                    );
                    asistenciaSelect.style.display = "none";
                    asistenciaNumber.style.display = "block";
                    asistenciaNoAplicable.style.display = "none";
                    asistenciaSelect.removeAttribute("name");
                    asistenciaNumber.setAttribute("name", "asistencia");
                    asistenciaNumber.value = asistenciaActual;
                }

                // Configurar el campo de nota según la categoría del evento
                if (!requierePuntaje) {
                    // Evento no requiere puntaje
                    console.log("Configurando modal para evento SIN puntaje");
                    notaNumber.style.display = "none";
                    notaNoAplicable.style.display = "block";
                    notaInfo.style.display = "none";
                    notaNumber.removeAttribute("name");
                } else {
                    // Evento requiere puntaje - usar campo numérico
                    console.log(
                        "Configurando modal para evento CON puntaje, valor:",
                        notaActual,
                    );
                    notaNumber.style.display = "block";
                    notaNoAplicable.style.display = "none";
                    notaInfo.style.display = "block";
                    notaNumber.setAttribute("name", "nota");
                    notaNumber.value =
                        notaActual === "Sin calificar" ? "" : notaActual;
                    puntajeMin.textContent = puntajeAprobacion.toString();
                }
                console.log("=== FIN CONFIGURACIÓN ===");

                // Guardar el ID del participante en el modal para usarlo al enviar
                modal.dataset.participanteId = participanteId; // Actualizar la vista previa del estado calculado
                actualizarEstadoPreview(
                    requiereAsistencia,
                    requierePuntaje,
                    puntajeAprobacion,
                    porcentajeAsistenciaMinimo,
                );

                modal.style.display = "flex";
            }
        }; // Cerrar modal
        document.addEventListener("DOMContentLoaded", function () {
            // Ejecutar recálculo automático al cargar la página
            ejecutarRecalculoAutomatico();

            const closeBtn = document.querySelector(".close") as HTMLElement;
            const cancelBtn = document.querySelector(
                ".btn-cancelar",
            ) as HTMLElement;
            const modal = document.getElementById(
                "modalCalificaciones",
            ) as HTMLElement;
            const form = document.getElementById(
                "formCalificacion",
            ) as HTMLFormElement;
            const filtroEstado = document.getElementById(
                "filtroEstado",
            ) as HTMLSelectElement;

            if (closeBtn && modal) {
                closeBtn.addEventListener("click", function () {
                    modal.style.display = "none";
                    resetearModal(); // Resetear cuando se cierre
                });
            }

            if (cancelBtn && modal) {
                cancelBtn.addEventListener("click", function () {
                    modal.style.display = "none";
                    resetearModal(); // Resetear cuando se cancele
                });
            } // Guardar calificación
            if (form && modal) {
                form.addEventListener("submit", async function (e) {
                    e.preventDefault();

                    const participanteId = modal.dataset.participanteId;
                    if (!participanteId) {
                        alert("Error: No se pudo identificar al participante");
                        return;
                    }

                    const formData = new FormData(this);
                    formData.append("inscripcionId", participanteId);

                    try {
                        const { data, error } =
                            await actions.updateParticipante(formData);

                        if (data?.success) {
                            await Swal.fire({
                                title: "¡Éxito!",
                                text: "Calificación actualizada exitosamente",
                                icon: "success",
                                confirmButtonText: "OK",
                            });
                            modal.style.display = "none";
                            resetearModal(); // Resetear después del éxito
                            window.location.reload();
                        } else {
                            await Swal.fire({
                                title: "Error",
                                text:
                                    error?.message ||
                                    "Error al actualizar la calificación",
                                icon: "error",
                                confirmButtonText: "OK",
                            });
                        }
                    } catch (error) {
                        console.error("Error al enviar calificación:", error);
                        alert(
                            "Error de conexión al actualizar la calificación",
                        );
                    }
                });
            } // Filtrar por estado
            if (filtroEstado) {
                filtroEstado.addEventListener("change", function () {
                    const filtro = this.value;
                    const filas = document.querySelectorAll(
                        ".registros-inferior .registro-fila",
                    ) as NodeListOf<HTMLElement>;

                    filas.forEach((fila) => {
                        const estado = fila.dataset.estado;
                        if (filtro === "todos" || estado === filtro) {
                            fila.style.display = "flex";
                        } else {
                            fila.style.display = "none";
                        }
                    });
                });
            }

            // Agregar eventos para actualizar la vista previa del estado cuando cambien los valores
            const asistenciaNumber = document.getElementById(
                "asistencia-number",
            ) as HTMLInputElement;
            const notaNumber = document.getElementById(
                "nota-number",
            ) as HTMLInputElement;
            if (asistenciaNumber) {
                asistenciaNumber.addEventListener("input", function () {
                    const modal = document.getElementById(
                        "modalCalificaciones",
                    ) as HTMLElement;
                    const filaParticipante = document.querySelector(
                        `.registros-inferior .registro-fila[data-participante-id="${modal.dataset.participanteId}"]`,
                    ) as HTMLElement;

                    if (filaParticipante) {
                        const requiereAsistencia =
                            filaParticipante.dataset.requiereAsistencia ===
                            "true";
                        const requierePuntaje =
                            filaParticipante.dataset.requierePuntaje === "true";
                        const puntajeAprobacion = parseFloat(
                            filaParticipante.dataset.puntajeAprobacion || "7.0",
                        );
                        const porcentajeAsistenciaMinimo = parseFloat(
                            filaParticipante.dataset
                                .porcentajeAsistenciaMinimo || "70",
                        );

                        actualizarEstadoPreview(
                            requiereAsistencia,
                            requierePuntaje,
                            puntajeAprobacion,
                            porcentajeAsistenciaMinimo,
                        );
                    }
                });
            }
            if (notaNumber) {
                notaNumber.addEventListener("input", function () {
                    const modal = document.getElementById(
                        "modalCalificaciones",
                    ) as HTMLElement;
                    const filaParticipante = document.querySelector(
                        `.registros-inferior .registro-fila[data-participante-id="${modal.dataset.participanteId}"]`,
                    ) as HTMLElement;

                    if (filaParticipante) {
                        const requiereAsistencia =
                            filaParticipante.dataset.requiereAsistencia ===
                            "true";
                        const requierePuntaje =
                            filaParticipante.dataset.requierePuntaje === "true";
                        const puntajeAprobacion = parseFloat(
                            filaParticipante.dataset.puntajeAprobacion || "7.0",
                        );
                        const porcentajeAsistenciaMinimo = parseFloat(
                            filaParticipante.dataset
                                .porcentajeAsistenciaMinimo || "70",
                        );

                        actualizarEstadoPreview(
                            requiereAsistencia,
                            requierePuntaje,
                            puntajeAprobacion,
                            porcentajeAsistenciaMinimo,
                        );
                    }
                });
            }
        }); // Función para exportar calificaciones
        //@ts-ignore
        window.exportarCalificaciones = function () {
            console.log("Exportando calificaciones...");

            // Obtener información del evento
            const eventoNombre =
                document
                    .querySelector(".evento-nombre")
                    ?.textContent?.replace("- ", "") || "Evento"; // Crear encabezados CSV
            const headers = [
                "Nombres",
                "Apellidos",
                "Carrera",
                "Asistencia",
                "Nota",
                "Estado",
            ];

            // Obtener datos de participantes visibles (respetando filtros)
            const participantesVisibles = Array.from(
                document.querySelectorAll(
                    '.registro-fila[data-estado]:not([style*="display: none"])',
                ),
            );

            const csvData = participantesVisibles.map((row) => {
                const cells = Array.from(
                    row.querySelectorAll(".parte-izquierda-registro-fila"),
                );
                return cells.map((cell) => {
                    const text =
                        (cell as HTMLElement).textContent?.trim() || "";
                    // Escapar comillas y envolver en comillas si contiene comas
                    return text.includes(",")
                        ? `"${text.replace(/"/g, '""')}"`
                        : text;
                });
            });

            // Combinar encabezados y datos
            const csvContent = [
                `Calificaciones del Evento: ${eventoNombre}`,
                `Fecha de exportación: ${new Date().toLocaleDateString("es-ES")}`,
                "", // Línea vacía
                headers.join(","),
                ...csvData.map((row) => row.join(",")),
            ].join("\n");

            // Crear y descargar archivo
            const blob = new Blob([csvContent], {
                type: "text/csv;charset=utf-8;",
            });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `calificaciones_${eventoNombre.replace(/\s+/g, "_")}_${new Date().toISOString().split("T")[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        };

        //@ts-ignore
        window.exportarPDF = () => {
            const logoFISEI = new Image();
            const logoUTA = new Image();

            logoFISEI.src = "/logo-fisei.png";
            logoUTA.src = "/logo-uta.png";

            // Esperar a que ambos logos estén listos
            logoFISEI.onload = () => {
                logoUTA.onload = () => {
                    const doc = new jsPDF();

                    const eventoNombre =
                        document
                            .querySelector(".evento-nombre")
                            ?.textContent?.replace("- ", "") || "Evento";

                    // Insertar logos
                    const anchoLogoFISEI = 60;
                    const altoLogoFISEI = 20.4;
                    const anchoLogoUTA = 21.1;
                    const altoLogoUTA = 20.4;

                    // Logo FISEI izquierda
                    doc.addImage(
                        logoFISEI,
                        "PNG",
                        14,
                        10,
                        anchoLogoFISEI,
                        altoLogoFISEI,
                    );

                    // Logo UTA derecha
                    doc.addImage(
                        logoUTA,
                        "PNG",
                        172,
                        10,
                        anchoLogoUTA,
                        altoLogoUTA,
                    );

                    // Espaciado base
                    const baseY = 40;

                    doc.setFontSize(14);
                    doc.text("Calificaciones del Evento:", 14, baseY);

                    doc.setFontSize(12);
                    doc.text(eventoNombre, 14, baseY + 4);
                    doc.text(
                        `Fecha de exportación: ${new Date().toLocaleDateString("es-ES")}`,
                        14,
                        baseY + 16,
                    ); // Tabla
                    const head = [
                        [
                            "Nombres",
                            "Apellidos",
                            "Carrera",
                            "Asistencia",
                            "Nota",
                            "Estado",
                        ],
                    ];
                    const body: string[][] = [];

                    const filas = document.querySelectorAll(
                        '.registro-fila[data-estado]:not([style*="display: none"])',
                    );

                    filas.forEach((fila) => {
                        const celdas = fila.querySelectorAll(
                            ".parte-izquierda-registro-fila",
                        );
                        const filaTexto = Array.from(celdas).map((celda) =>
                            (celda.textContent ?? "").trim(),
                        );
                        body.push(filaTexto);
                    });

                    if (body.length === 0) {
                        alert("No hay datos visibles para exportar.");
                        return;
                    }

                    autoTable(doc, {
                        head,
                        body,
                        startY: baseY + 25,
                        headStyles: { fillColor: [176, 16, 37] },
                        styles: { fontSize: 10 },
                    });

                    const fecha = new Date().toISOString().split("T")[0];
                    doc.save(
                        `calificaciones_${eventoNombre.replace(/\s+/g, "_")}_${fecha}.pdf`,
                    );
                };

                logoUTA.onerror = () => {
                    alert("No se pudo cargar el logo de UTA.");
                };
            };

            logoFISEI.onerror = () => {
                alert("No se pudo cargar el logo de FISEI.");
            };
        }; // Función para recalcular todos los estados de participación
        //@ts-ignore
        window.recalcularTodosLosEstados = async function () {
            const resultado = await Swal.fire({
                title: "¿Recalcular todos los estados?",
                text: "Esto actualizará el estado de todos los participantes según los requisitos actuales de la categoría.",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#17a2b8",
                cancelButtonColor: "#dc2626",
                confirmButtonText: "Sí, recalcular",
                cancelButtonText: "Cancelar",
            });

            if (!resultado.isConfirmed) return;

            try {
                // Mostrar loader
                Swal.fire({
                    title: "Recalculando estados...",
                    text: "Por favor espera mientras se actualizan los estados.",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                });

                // Obtener todas las filas de participantes
                const filasParticipantes = document.querySelectorAll(
                    ".registro-fila[data-participante-id]",
                );
                let actualizados = 0;
                let errores = 0;

                for (const fila of filasParticipantes) {
                    try {
                        const participanteId = (fila as HTMLElement).dataset
                            .participanteId;
                        const asistencia = (fila as HTMLElement).dataset
                            .asistencia;
                        const nota = (fila as HTMLElement).dataset.nota;

                        console.log(
                            `Recalculando participante ${participanteId}:`,
                            { asistencia, nota },
                        );

                        const formData = new FormData();
                        formData.append("inscripcionId", participanteId || "");
                        if (
                            asistencia &&
                            asistencia !== "null" &&
                            asistencia !== "undefined"
                        ) {
                            formData.append("asistencia", asistencia);
                        }
                        if (
                            nota &&
                            nota !== "null" &&
                            nota !== "undefined" &&
                            nota !== "Sin calificar"
                        ) {
                            formData.append("nota", nota);
                        }

                        const { data, error } =
                            await actions.updateParticipante(formData);

                        if (data?.success) {
                            actualizados++;
                        } else {
                            console.error(
                                `Error al actualizar participante ${participanteId}:`,
                                error,
                            );
                            errores++;
                        }
                    } catch (error) {
                        console.error("Error al procesar participante:", error);
                        errores++;
                    }
                }

                // Mostrar resultado
                await Swal.fire({
                    title: "Recálculo completado",
                    text: `Se actualizaron ${actualizados} participantes. ${errores > 0 ? `${errores} errores encontrados.` : ""}`,
                    icon: errores > 0 ? "warning" : "success",
                    confirmButtonText: "OK",
                });

                // Recargar la página para mostrar los cambios
                window.location.reload();
            } catch (error) {
                console.error("Error durante el recálculo:", error);
                await Swal.fire({
                    title: "Error",
                    text: "Ocurrió un error durante el recálculo de estados.",
                    icon: "error",
                    confirmButtonText: "OK",
                });
            }
        }; // Función para ejecutar recálculo automático sin confirmación al cargar la página
        async function ejecutarRecalculoAutomatico() {
            // Obtener el ID del evento actual
            const eventoId = window.location.pathname.split("/").pop();
            const storageKey = `recalculo_ejecutado_${eventoId}`;

            // Verificar si ya se ejecutó el recálculo para este evento
            const yaEjecutado = localStorage.getItem(storageKey);
            if (yaEjecutado) {
                console.log(
                    "ℹ️ Recálculo automático ya ejecutado para este evento, saltando...",
                );
                return;
            }

            console.log(
                "🔄 Iniciando recálculo automático de estados (primera vez)...",
            );

            try {
                // Obtener todas las filas de participantes
                const filasParticipantes = document.querySelectorAll(
                    ".registro-fila[data-participante-id]",
                );

                if (filasParticipantes.length === 0) {
                    console.log("ℹ️ No hay participantes para recalcular");
                    return;
                }

                let actualizados = 0;
                let errores = 0;

                console.log(
                    `📊 Procesando ${filasParticipantes.length} participantes...`,
                );

                for (const fila of filasParticipantes) {
                    try {
                        const participanteId = (fila as HTMLElement).dataset
                            .participanteId;
                        const asistencia = (fila as HTMLElement).dataset
                            .asistencia;
                        const nota = (fila as HTMLElement).dataset.nota;

                        console.log(
                            `🔄 Recalculando participante ${participanteId}:`,
                            { asistencia, nota },
                        );

                        const formData = new FormData();
                        formData.append("inscripcionId", participanteId || "");
                        if (
                            asistencia &&
                            asistencia !== "null" &&
                            asistencia !== "undefined"
                        ) {
                            formData.append("asistencia", asistencia);
                        }
                        if (
                            nota &&
                            nota !== "null" &&
                            nota !== "undefined" &&
                            nota !== "Sin calificar"
                        ) {
                            formData.append("nota", nota);
                        }

                        const { data, error } =
                            await actions.updateParticipante(formData);

                        if (data?.success) {
                            actualizados++;
                        } else {
                            console.error(
                                `❌ Error al actualizar participante ${participanteId}:`,
                                error,
                            );
                            errores++;
                        }
                    } catch (error) {
                        console.error(
                            "❌ Error al procesar participante:",
                            error,
                        );
                        errores++;
                    }
                }
                console.log(
                    `✅ Recálculo automático completado: ${actualizados} actualizados, ${errores} errores`,
                );

                // Marcar como ejecutado en localStorage
                localStorage.setItem(storageKey, "true");
                console.log(
                    "💾 Recálculo marcado como ejecutado para este evento",
                );

                // Si hubo actualizaciones, recargar la página para mostrar los cambios
                if (actualizados > 0) {
                    console.log("🔄 Recargando página para mostrar cambios...");
                    window.location.reload();
                }
            } catch (error) {
                console.error(
                    "❌ Error durante el recálculo automático:",
                    error,
                );
            }
        }

        // Función para finalizar evento
        //@ts-ignore
        window.finalizarEvento = async function () {
            const resultado = await Swal.fire({
                title: "¿Finalizar el evento?",
                text: "Esta acción finalizará el evento y bloqueará la edición de participaciones. ¿Estás seguro?",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#fd7e14",
                cancelButtonColor: "#6c757d",
                confirmButtonText: "Sí, finalizar evento",
                cancelButtonText: "Cancelar",
            });

            if (!resultado.isConfirmed) return;

            try {
                // Mostrar loader
                Swal.fire({
                    title: "Finalizando evento...",
                    text: "Por favor espera mientras se finaliza el evento.",
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    },
                });

                const eventoId = window.location.pathname.split("/").pop();
                const formData = new FormData();
                formData.append("eventoId", eventoId || "");

                const { data, error } = await actions.finalizarEvento(formData);

                if (data?.success) {
                    await Swal.fire({
                        title: "¡Evento finalizado!",
                        text: data.message,
                        icon: "success",
                        confirmButtonText: "OK",
                    });

                    // Recargar la página para mostrar los cambios
                    window.location.reload();
                } else {
                    await Swal.fire({
                        title: "Error",
                        text: error?.message || "Error al finalizar el evento",
                        icon: "error",
                        confirmButtonText: "OK",
                    });
                }
            } catch (error) {
                console.error("Error al finalizar evento:", error);
                await Swal.fire({
                    title: "Error",
                    text: "Ocurrió un error durante la finalización del evento.",
                    icon: "error",
                    confirmButtonText: "OK",
                });
            }
        };

        // Función de utilidad para limpiar la marca de recálculo (para debugging o forzar nuevo recálculo)
        //@ts-ignore
        window.limpiarMarcaRecalculo = function () {
            const eventoId = window.location.pathname.split("/").pop();
            const storageKey = `recalculo_ejecutado_${eventoId}`;
            localStorage.removeItem(storageKey);
            console.log(
                "🧹 Marca de recálculo limpiada. El próximo recálculo se ejecutará automáticamente.",
            );
        };

        // Cerrar modal al hacer clic fuera
        window.addEventListener("click", function (event) {
            const modal = document.getElementById(
                "modalCalificaciones",
            ) as HTMLElement;
            if (event.target === modal && modal) {
                modal.style.display = "none";
                resetearModal(); // Resetear cuando se cierre haciendo clic fuera
            }
        });
    </script>
</Layout>
