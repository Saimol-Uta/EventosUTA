---
import Header from "../components/Header.astro";
import NavBar from "../components/Navbar.astro";
import Avatar from "../components/Avatar.astro";
import Button from "../components/Button.astro";
import DocumentButton from "../components/DocumentButton.astro";
import Card from "../components/Card.astro";
import { actions } from "astro:actions";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

const { data: cuenta } = await Astro.callAction(
    actions.getCuentaByIdSingle,
    session?.user?.id || "",
);


const idUsuario = session?.user?.id;


let eventosUsuario: any[] = [];
let upcomingEvents: any[] = [];
let certificates: any[] = [];

if (idUsuario && typeof idUsuario === "string") {
    const { data: eventosData } = await Astro.callAction(
        actions.getEventosPorUsuario,
        {
            idUsuario,
        },
    );
    eventosUsuario = eventosData?.eventos ?? [];

    // CORRECCIÓN: Leemos la propiedad 'certificados' que ahora devuelve la action
    const { data: resultCertificados } = await Astro.callAction(
        actions.getCertificadosPorUsuario,
        { idUsuario },
    );
    certificates = resultCertificados?.certificados ?? [];
}

const { data: resultProximos } = await Astro.callAction(
    actions.getEventosProximos,
    {},
);
upcomingEvents = resultProximos?.eventos ?? [];
---

<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <style>
            body {
                background: #fff;
            }
            .modal-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.75);
                justify-content: center;
                align-items: center;
                z-index: 1000;
            }
            .modal-content {
                position: relative;
                background-color: #fff;
                padding: 8px;
                border-radius: 8px;
                width: 90%;
                height: 90%;
                max-width: 1000px;
                display: flex;
                flex-direction: column;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            }
            .modal-close-btn {
                position: absolute;
                top: -15px;
                right: -15px;
                background-color: #333;
                color: white;
                border: 2px solid white;
                border-radius: 50%;
                width: 35px;
                height: 35px;
                font-size: 24px;
                line-height: 30px;
                text-align: center;
                cursor: pointer;
                z-index: 1001;
            }
            #pdf-iframe {
                width: 100%;
                height: 100%;
                border: none;
            }
            .event-card {
                background: #fff;
                border: 2px solid #b91c1c;
                border-radius: 1rem;
                box-shadow: 0 2px 8px rgba(185,28,28,0.08);
                padding: 1.25rem;
                color: #991b1b;
                transition: box-shadow 0.2s, border 0.2s;
            }
            .event-card strong {
                color: #b91c1c;
                font-size: 1.1rem;
            }
            .event-card span {
                color: #991b1b;
            }
            .cert-link {
                color: #b91c1c;
                text-decoration: underline;
                font-weight: 500;
                transition: color 0.2s;
                display: block;
                text-align: center;
                word-break: break-word;
                max-width: 100%;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }
            .cert-link:hover {
                color: #fff;
                background: #b91c1c;
                border-radius: 0.5rem;
                padding: 0 0.5rem;
            }
            .ver-mas-link {
                color: #fff;
                background: #b91c1c;
                border-radius: 0.5rem;
                padding: 0.25rem 0.75rem;
                font-size: 0.95rem;
                font-weight: 600;
                text-decoration: none;
                display: inline-block;
                margin-top: 0.5rem;
                transition: background 0.2s, color 0.2s;
            }
            .ver-mas-link:hover {
                background: #991b1b;
                color: #fff;
            }
            .card-title {
                color: #b91c1c;
                font-weight: bold;
                font-size: 1.2rem;
                margin-bottom: 0.5rem;
            }
            .historial-title {
                color: #b91c1c;
                font-size: 1.3rem;
                font-weight: bold;
                margin-top: 2rem;
            }
            .historial-card {
                background: #fff;
                border: 2px solid #b91c1c;
                border-radius: 1rem;
                box-shadow: 0 2px 8px rgba(185,28,28,0.08);
                padding: 1.25rem;
                color: #991b1b;
                margin-bottom: 0.5rem;
            }
            .no-eventos {
                color: #991b1b;
                background: #fff0f0;
                border: 1px dashed #b91c1c;
                border-radius: 0.75rem;
                padding: 1rem;
                text-align: center;
            }
            .main-container {
                max-width: 98vw;
                width: 100%;
                margin: 0 auto;
                padding: 1.2rem 0.5rem 1.2rem 0.5rem;
                display: flex;
                flex-direction: column;
                gap: 1.2rem;
            }
            .perfil-section {
                background: #fff;
                border-radius: 1.5rem;
                box-shadow: 0 2px 12px rgba(185,28,28,0.07);
                padding: 2rem 1rem 1.5rem 1rem;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 1.2rem;
                min-width: 220px;
            }
            .perfil-section .text-red-800 {
                margin-bottom: 0.5rem;
                text-align: center;
                width: 100%;
                word-break: break-word;
            }
            .perfil-section .flex {
                justify-content: center;
            }
            .content-section {
                flex: 1;
                display: flex;
                flex-direction: column;
                gap: 1.2rem;
            }
            .cards-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 1.2rem;
            }
            .card {
                min-height: 220px;
                display: flex;
                flex-direction: column;
                justify-content: flex-start;
                background: #fff;
                border-radius: 1.2rem;
                box-shadow: 0 2px 12px rgba(185,28,28,0.07);
                padding: 1.2rem 0.7rem;
            }
            .event-card, .historial-card {
                min-height: 70px;
            }
            @media (max-width: 900px) {
                .main-container {
                    padding: 0.5rem 0.1rem;
                }
                .cards-grid {
                    grid-template-columns: 1fr;
                }
            }
            @media (max-width: 700px) {
                .main-container {
                    gap: 0.5rem;
                }
                .perfil-section {
                    padding: 1rem 0.2rem;
                }
                .card {
                    padding: 0.7rem 0.2rem;
                }
            }
        </style>
    </head>
    <body>
        <Header />
        <NavBar />
        <div class="main-container">
            <div class="flex flex-col md:flex-row gap-8">
                <!-- Perfil del Usuario -->
                <div class="perfil-section w-full md:w-1/4">
                    <Avatar
                        defaultSrc={cuenta?.img_user || "/PerfilDefault.png"}
                        size="w-50 h-50"
                    />
                    <p class="text-red-800 font-semibold text-lg">
                        {(cuenta?.nom_usu1 || "") + " " + (cuenta?.nom_usu2 || "") + " " + (cuenta?.ape_usu1 || "") + " " + (cuenta?.ape_usu2 || "")}
                    </p>
                    <Button text="Editar Perfil" href="../PerfilUserDos" />
                    <div class="text-center mt-4 text-red-800">Documentos</div>
                    <div class="flex gap-2 mt-2">
                        <DocumentButton
                            label="Cédula"
                            cuentaId={session?.user?.id}
                            currentImage={cuenta?.enl_ced_cue}
                            fieldName="enl_ced_cue"
                            size="w-24 h-24"
                        />
                        <DocumentButton
                            label="Matrícula"
                            cuentaId={session?.user?.id}
                            currentImage={cuenta?.enl_mat_cue}
                            fieldName="enl_mat_cue"
                            size="w-24 h-24"
                        />
                    </div>
                </div>
                <!-- Contenido principal -->
                <div class="content-section w-full md:w-3/4">
                    <div class="cards-grid">
                        <div class="card">
                            <Card title="Eventos Próximos">
                                <div class="flex flex-col gap-y-4">
                                    {
                                        upcomingEvents.slice(0, 4).map((evento) => (
                                            <div class="event-card">
                                                <>
                                                    <strong>{evento.nom_eve}</strong>
                                                    <br />
                                                </>
                                                <span class="text-sm">
                                                    Inicio: {new Date(evento.fec_ini_eve).toLocaleDateString()}
                                                </span>
                                            </div>
                                        ))
                                    }
                                    {
                                        upcomingEvents.length > 4 && (
                                            <a
                                                href="/eventosProximos"
                                                class="ver-mas-link"
                                            >
                                                Ver más...
                                            </a>
                                        )
                                    }
                                </div>
                            </Card>
                        </div>
                        <div class="card">
                            <Card title="Certificados">
                                <div class="flex flex-col gap-y-4">
                                    {
                                        certificates.length > 0 ? (
                                            certificates
                                                .slice(0, 4)
                                                .map((certificado) => (
                                                    <div class="event-card">
                                                        <a
                                                            href={certificado.enl_cer_par}
                                                            class="cert-link js-view-cert"
                                                            title={certificado.eventos.nom_eve}
                                                        >
                                                            {certificado.eventos.nom_eve}
                                                        </a>
                                                    </div>
                                                ))
                                        ) : (
                                            <p class="no-eventos">
                                                No tienes certificados para mostrar.
                                            </p>
                                        )
                                    }
                                    {
                                        certificates.length > 4 && (
                                            <a
                                                href="/User/certificadosUsuario"
                                                class="ver-mas-link"
                                            >
                                                Ver más...
                                            </a>
                                        )
                                    }
                                </div>
                            </Card>
                        </div>
                    </div>
                    <h1 class="historial-title">
                        Historial de Eventos
                    </h1>
                    <div class="flex flex-col gap-6">
                        {
                            Array.isArray(eventosUsuario) && eventosUsuario.length > 0 ? (
                                eventosUsuario.map((evento) => (
                                    <div class="historial-card">
                                        <div class="font-bold text-lg">
                                            {evento?.nombre || evento?.nom_eve || "Sin nombre"}
                                        </div>
                                        <div class="text-sm mt-1">
                                            Fecha: {evento?.fecha || evento?.fec_ini_eve || "Sin fecha"}
                                        </div>
                                        <div class="text-sm">
                                            Estado: {evento?.estado || evento?.estado_inscripcion || "Inscrito"}
                                        </div>
                                    </div>
                                ))
                            ) : (
                                <div class="no-eventos">
                                    No tienes eventos registrados.
                                </div>
                            )
                        }
                    </div>
                </div>
            </div>
        </div>
        <div id="pdf-modal-overlay" class="modal-overlay">
            <div class="modal-content">
                <button
                    id="pdf-modal-close"
                    class="modal-close-btn"
                    title="Cerrar">&times;</button
                >
                <iframe
                    id="pdf-iframe"
                    src=""
                    frameborder="0"
                    title="Visor de PDF"></iframe>
            </div>
        </div>

        <script>
            import { actions } from "astro:actions";
            import Swal from "sweetalert2";

            const modalOverlay = document.getElementById("pdf-modal-overlay");
            const modalCloseBtn = document.getElementById("pdf-modal-close");
            const pdfIframe = document.getElementById(
                "pdf-iframe",
            ) as HTMLIFrameElement;

            function openModalWithPdf(url: string) {
                if (pdfIframe && modalOverlay) {
                    pdfIframe.src = url;
                    modalOverlay.style.display = "flex";
                }
            }

            function closeModal() {
                if (modalOverlay && pdfIframe) {
                    modalOverlay.style.display = "none";
                    if (pdfIframe.src.startsWith("blob:")) {
                        URL.revokeObjectURL(pdfIframe.src);
                    }
                    pdfIframe.src = "";
                }
            }

            modalCloseBtn?.addEventListener("click", closeModal);
            modalOverlay?.addEventListener("click", (event) => {
                if (event.target === modalOverlay) closeModal();
            });

            // Buscamos todos los enlaces de certificados y les añadimos la funcionalidad
            document.querySelectorAll(".js-view-cert").forEach((link) => {
                link.addEventListener("click", async (event) => {
                    event.preventDefault();
                    const targetLink = event.currentTarget as HTMLAnchorElement;
                    const pdfUrl = targetLink.href;

                    if (!pdfUrl) {
                        alert("Este certificado no tiene un enlace válido.");
                        return;
                    }

                    const originalText = targetLink.textContent;

                    try {
                        // Llamamos a la nueva action, pasándole la URL del enlace
                        const result =
                            await actions.recuperarCertificadoDesdeUrl({
                                url: pdfUrl,
                            });

                        if (
                            result.data?.success &&
                            result.data.data?.pdfBase64
                        ) {
                            // Convertimos el base64 a un Blob y lo mostramos
                            const base64 = result.data.data.pdfBase64;
                            const byteCharacters = atob(base64);
                            const byteNumbers = new Array(
                                byteCharacters.length,
                            );
                            for (let i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            const byteArray = new Uint8Array(byteNumbers);
                            const blob = new Blob([byteArray], {
                                type: "application/pdf",
                            });
                            const blobUrl = URL.createObjectURL(blob);

                            openModalWithPdf(blobUrl);
                        } else {
                            Swal.fire(
                                "Error",
                                result.error?.message ||
                                    "No se pudo cargar el certificado.",
                                "error",
                            );
                        }
                    } catch (error) {
                        console.error(error);
                        Swal.fire(
                            "Error",
                            error instanceof Error
                                ? error.message
                                : "Error inesperado.",
                            "error",
                        );
                    } finally {
                        targetLink.textContent = originalText;
                    }
                });
            });
        </script>
    </body>
</html>
