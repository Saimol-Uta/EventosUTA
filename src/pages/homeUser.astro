---
import Header from "../components/Header.astro";
import NavBar from "../components/Navbar.astro";
import Avatar from "../components/Avatar.astro";
import Button from "../components/Button.astro";
import DocumentButton from "../components/DocumentButton.astro";
import Card from "../components/Card.astro";
import { actions } from "astro:actions";
import { getSession } from "auth-astro/server";

const session = await getSession(Astro.request);

const { data: cuenta } = await Astro.callAction(
    actions.getCuentaByIdSingle,
    session?.user?.id || "",
);


const idUsuario = session?.user?.id;


let eventosUsuario: any[] = [];
let upcomingEvents: any[] = [];
let certificates: any[] = [];

if (idUsuario && typeof idUsuario === "string") {
    const { data: eventosData } = await Astro.callAction(
        actions.getEventosPorUsuario,
        {
            idUsuario,
        },
    );
    eventosUsuario = eventosData?.eventos ?? [];

    // CORRECCIÓN: Leemos la propiedad 'certificados' que ahora devuelve la action
    const { data: resultCertificados } = await Astro.callAction(
        actions.getCertificadosPorUsuario,
        { idUsuario },
    );
    certificates = resultCertificados?.certificados ?? [];
}

const { data: resultProximos } = await Astro.callAction(
    actions.getEventosProximos,
    {},
);
upcomingEvents = resultProximos?.eventos ?? [];
---

<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <style>
            .modal-overlay {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.75);
                justify-content: center;
                align-items: center;
                z-index: 1000;
            }
            .modal-content {
                position: relative;
                background-color: #fff;
                padding: 8px;
                border-radius: 8px;
                width: 90%;
                height: 90%;
                max-width: 1000px;
                display: flex;
                flex-direction: column;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            }
            .modal-close-btn {
                position: absolute;
                top: -15px;
                right: -15px;
                background-color: #333;
                color: white;
                border: 2px solid white;
                border-radius: 50%;
                width: 35px;
                height: 35px;
                font-size: 24px;
                line-height: 30px;
                text-align: center;
                cursor: pointer;
                z-index: 1001;
            }
            #pdf-iframe {
                width: 100%;
                height: 100%;
                border: none;
            }
        </style>
    </head>
    <body>
        <Header />
        <NavBar />

<div class="flex flex-col md:flex-row gap-6 p-6">
    <!-- Perfil del Usuario -->
    <div class="flex flex-col items-center gap-4 w-full md:w-1/4">
        <Avatar
            defaultSrc={cuenta?.img_user || "/PerfilDefault.png"}
            size="w-50 h-50"
        />
        <p class="text-red-800 font-semibold text-lg">
            {session?.user?.name || "Usuario Anónimo"}
        </p>
        <Button text="Editar Perfil" href="../PerfilUserDos" />
        <div class="text-center mt-4 text-red-800">Documentos</div>
        <div class="flex gap-2 mt-2">
            <DocumentButton
                label="Cédula"
                cuentaId={session?.user?.id}
                currentImage={cuenta?.enl_ced_cue}
                fieldName="enl_ced_cue"
                size="w-24 h-24"
            />
            <DocumentButton
                label="Matrícula"
                cuentaId={session?.user?.id}
                currentImage={cuenta?.enl_mat_cue}
                fieldName="enl_mat_cue"
                size="w-24 h-24"
            />
            <!-- Extensión no disponible en la nueva estructura -->
        </div>
    </div>

                </div>
            </div>

            <!-- Contenido principal -->
            <div class="w-full md:w-3/4 flex flex-col gap-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-y-4 gap-x-8">
                    <!-- Eventos Próximos -->
                    <Card title="Eventos Próximos">
                        <div class="flex flex-col gap-y-4">
                            {
                                upcomingEvents.slice(0, 4).map((evento) => (
                                    <div class="bg-white border rounded-xl shadow-md p-4 text-gray-800">
                                        <>
                                            <strong>{evento.nom_eve}</strong>
                                            <br />
                                        </>
                                        <span class="text-sm text-gray-600">
                                            Inicio:{" "}
                                            {new Date(
                                                evento.fec_ini_eve,
                                            ).toLocaleDateString()}
                                        </span>
                                    </div>
                                ))
                            }
                            {
                                upcomingEvents.length > 4 && (
                                    <a
                                        href="/eventosProximos"
                                        class="text-red-800 underline text-sm mt-2"
                                    >
                                        Ver más...
                                    </a>
                                )
                            }
                        </div>
                    </Card>
                    <!-- Certificados -->
                    <Card title="Certificados">
                        <div class="flex flex-col gap-y-4">
                            {
                                certificates.length > 0 ? (
                                    certificates
                                        .slice(0, 4)
                                        .map((certificado) => (
                                            <div class="bg-white border rounded-xl shadow-md p-4 text-gray-800">
                                                <a
                                                    href={
                                                        certificado.enl_cer_par
                                                    }
                                                    class="text-red-800 underline js-view-cert"
                                                >
                                                    {
                                                        certificado.eventos
                                                            .nom_eve
                                                    }
                                                </a>
                                            </div>
                                        ))
                                ) : (
                                    <p class="text-sm text-gray-500">
                                        No tienes certificados para mostrar.
                                    </p>
                                )
                            }

                            {
                                certificates.length > 4 && (
                                    <a
                                        href="/User/certificadosUsuario"
                                        class="text-red-800 underline text-sm mt-2"
                                    >
                                        Ver más...
                                    </a>
                                )
                            }
                        </div>
                    </Card>
                </div>

                <!-- Historial de Eventos -->
                <h1 class="text-xl font-semibold mt-8 text-red-800">
                    Historial de Eventos
                </h1>
                <div class="flex flex-col gap-6">
                    {
                        Array.isArray(eventosUsuario) &&
                        eventosUsuario.length > 0 ? (
                            eventosUsuario.map((evento) => (
                                <div class="bg-white border rounded-xl shadow-md p-4">
                                    <div class="font-bold text-lg text-gray-800">
                                        {evento?.nombre ||
                                            evento?.nom_eve ||
                                            "Sin nombre"}
                                    </div>
                                    <div class="text-gray-600 text-sm mt-1">
                                        Fecha:{" "}
                                        {evento?.fecha ||
                                            evento?.fec_ini_eve ||
                                            "Sin fecha"}
                                    </div>
                                    <div class="text-gray-600 text-sm">
                                        Estado:{" "}
                                        {evento?.estado ||
                                            evento?.estado_inscripcion ||
                                            "Inscrito"}
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div class="text-gray-500">
                                No tienes eventos registrados.
                            </div>
                        )
                    }
                </div>
            </div>
        </div>
        <div id="pdf-modal-overlay" class="modal-overlay">
            <div class="modal-content">
                <button
                    id="pdf-modal-close"
                    class="modal-close-btn"
                    title="Cerrar">&times;</button
                >
                <iframe
                    id="pdf-iframe"
                    src=""
                    frameborder="0"
                    title="Visor de PDF"></iframe>
            </div>
        </div>

        <script>
            import { actions } from "astro:actions";
            import Swal from "sweetalert2";

            const modalOverlay = document.getElementById("pdf-modal-overlay");
            const modalCloseBtn = document.getElementById("pdf-modal-close");
            const pdfIframe = document.getElementById(
                "pdf-iframe",
            ) as HTMLIFrameElement;

            function openModalWithPdf(url: string) {
                if (pdfIframe && modalOverlay) {
                    pdfIframe.src = url;
                    modalOverlay.style.display = "flex";
                }
            }

            function closeModal() {
                if (modalOverlay && pdfIframe) {
                    modalOverlay.style.display = "none";
                    if (pdfIframe.src.startsWith("blob:")) {
                        URL.revokeObjectURL(pdfIframe.src);
                    }
                    pdfIframe.src = "";
                }
            }

            modalCloseBtn?.addEventListener("click", closeModal);
            modalOverlay?.addEventListener("click", (event) => {
                if (event.target === modalOverlay) closeModal();
            });

            // Buscamos todos los enlaces de certificados y les añadimos la funcionalidad
            document.querySelectorAll(".js-view-cert").forEach((link) => {
                link.addEventListener("click", async (event) => {
                    event.preventDefault();
                    const targetLink = event.currentTarget as HTMLAnchorElement;
                    const pdfUrl = targetLink.href;

                    if (!pdfUrl) {
                        alert("Este certificado no tiene un enlace válido.");
                        return;
                    }

                    const originalText = targetLink.textContent;

                    try {
                        // Llamamos a la nueva action, pasándole la URL del enlace
                        const result =
                            await actions.recuperarCertificadoDesdeUrl({
                                url: pdfUrl,
                            });

                        if (
                            result.data?.success &&
                            result.data.data?.pdfBase64
                        ) {
                            // Convertimos el base64 a un Blob y lo mostramos
                            const base64 = result.data.data.pdfBase64;
                            const byteCharacters = atob(base64);
                            const byteNumbers = new Array(
                                byteCharacters.length,
                            );
                            for (let i = 0; i < byteCharacters.length; i++) {
                                byteNumbers[i] = byteCharacters.charCodeAt(i);
                            }
                            const byteArray = new Uint8Array(byteNumbers);
                            const blob = new Blob([byteArray], {
                                type: "application/pdf",
                            });
                            const blobUrl = URL.createObjectURL(blob);

                            openModalWithPdf(blobUrl);
                        } else {
                            Swal.fire(
                                "Error",
                                result.error?.message ||
                                    "No se pudo cargar el certificado.",
                                "error",
                            );
                        }
                    } catch (error) {
                        console.error(error);
                        Swal.fire(
                            "Error",
                            error instanceof Error
                                ? error.message
                                : "Error inesperado.",
                            "error",
                        );
                    } finally {
                        targetLink.textContent = originalText;
                    }
                });
            });
        </script>
    </body>
</html>
