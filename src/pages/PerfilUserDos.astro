---
import FormularioRegistroUsuario from "../components/FormularioRegistroUsuario.astro";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Navbar from "../components/Navbar.astro";
import { actions } from "astro:actions";
import type { Usuario } from "../actions/Users/getUserByCedula.action";
import { getSession } from "auth-astro/server";

type SafeResult<T> = {
  success: boolean;
  value?: T | null;
  error?: string;
};
type CampoFormulario = {
  titulo: string;
  valor: string;
  name: string;
  tipo?: "select" | "email"; 
  opciones?: { valor: string; texto: string }[];
};


type ResultadoSetUser = {
  success?: boolean;
  created?: boolean;
  requireReauth?: boolean;
  error?: string;
};

type UsuarioParcial = Omit<Usuario, "id_usu"> & { id_usu?: string; cor_cue?: string; cor_rec?: string };

let usuario: UsuarioParcial | null = null;
let mensajeGuardado: string | null = null;
let mostrarError = false;

const session = await getSession(Astro.request);
const { isLoggedIn } = Astro.locals;
const user = session?.user;

if (!isLoggedIn || !user?.id || !user.ci_pas) {
  return Astro.redirect("/login");
}




const id_usu = user.id;
const method = Astro.request.method;

function formatDate(date: string | Date | null): string {
  if (!date) return "";
  const d = typeof date === "string" ? new Date(date) : date;
  return d.toISOString().substring(0, 10);
}


// Diccionario para mostrar nombres amigables en los errores
const nombresCampos: Record<string, string> = {
  ced_usu: "Cédula",
  nom_usu1: "Primer nombre",
  nom_usu2: "Segundo nombre",
  ape_usu1: "Primer apellido",
  ape_usu2: "Segundo apellido",
  fec_nac_usu: "Fecha de nacimiento",
  num_tel_usu: "Teléfono",
  id_car_per: "Carrera",
  cor_rec: "Correo de recuperación",
};


if (method === "POST") {
  const formData = await Astro.request.formData();
  const accion = formData.get("action")?.toString();

if (accion === "guardarInfo" && formData.has("nom_usu1")) {
  const errores: string[] = [];

  // Validaciones obligatorias
  const camposObligatorios = ["ced_usu", "nom_usu1", "ape_usu1", "fec_nac_usu"];
  const correoForm = formData.get("cor_cue")?.toString() ?? "";
  if (correoForm.endsWith("@uta.edu.ec")) {
    camposObligatorios.push("id_car_per");
  }
  for (const campo of camposObligatorios) {
    if (!formData.get(campo)) {
      errores.push(`El campo ${nombresCampos[campo] || campo} es obligatorio.`);
    }
  }
  
  const correoRec = formData.get("cor_rec")?.toString() ?? "";
  if (correoRec && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(correoRec)) {
    errores.push("El correo de recuperación no tiene un formato válido.");
  }

  // Validación de cédula: exactamente 10 dígitos numéricos
  const cedula = formData.get("ced_usu")?.toString() ?? "";
  if (!/^\d{10}$/.test(cedula)) {
    errores.push("La cédula debe tener exactamente 10 dígitos numéricos.");
  }

  // Validación de nombres y apellidos: solo letras y espacios, máximo 20 caracteres
  const camposTexto = [
    { campo: "nom_usu1", label: "Primer nombre" },
    { campo: "nom_usu2", label: "Segundo nombre" },
    { campo: "ape_usu1", label: "Primer apellido" },
    { campo: "ape_usu2", label: "Segundo apellido" },
  ];
  for (const { campo, label } of camposTexto) {
    const valor = formData.get(campo)?.toString() ?? "";
    if (valor.length > 20) {
      errores.push(`El campo ${label} no debe superar los 20 caracteres.`);
    }
    if (valor && !/^[A-Za-zÁÉÍÓÚáéíóúÑñ\s]+$/.test(valor)) {
      errores.push(`El campo ${label} solo debe contener letras y espacios.`);
    }
  }

  // Validación de fecha válida y mayor de 16 años
  const fechaRaw = formData.get("fec_nac_usu")?.toString() ?? "";
  const fechaNac = new Date(fechaRaw);
  if (isNaN(fechaNac.getTime())) {
    errores.push("La fecha de nacimiento no es válida.");
  } else {
    const hoy = new Date();
    const edad = hoy.getFullYear() - fechaNac.getFullYear();
    const cumpleEsteAño = hoy.getMonth() > fechaNac.getMonth() || 
                          (hoy.getMonth() === fechaNac.getMonth() && hoy.getDate() >= fechaNac.getDate());
    const edadFinal = cumpleEsteAño ? edad : edad - 1;
    if (edadFinal < 16) {
      errores.push("Debes tener al menos 16 años.");
    }
  }

  // Validación de teléfono: exactamente 10 dígitos numéricos
  const telefono = formData.get("num_tel_usu")?.toString() ?? "";
  if (!/^\d{10}$/.test(telefono)) {
    errores.push("El número de teléfono debe tener exactamente 10 dígitos.");
  }

  // Validación de carrera seleccionada SOLO si el correo es institucional
  const carrera = formData.get("id_car_per")?.toString() ?? "";
  if (correoForm.endsWith("@uta.edu.ec") && !carrera) {
    errores.push("Debes seleccionar una carrera.");
  }

  // Mostrar errores o guardar
  if (errores.length > 0) {
    mostrarError = true;
    mensajeGuardado = errores.join(" ");
  } else {
    formData.set("id_usu", id_usu);
    const resultadoGuardarRaw = await Astro.callAction(actions.setUser, formData);
    const resultadoGuardar = resultadoGuardarRaw?.data as SafeResult<ResultadoSetUser> | undefined;

    if (resultadoGuardar?.success) {
      mensajeGuardado = resultadoGuardar.value?.created
        ? "Se guardó con éxito."
        : "Usuario actualizado correctamente.";
    } else {
      mostrarError = true;
      mensajeGuardado = resultadoGuardar?.error || "No se pudo guardar.";
    }
  }
}


}

// Simula obtener datos del usuario actual (como se hace en CompletarPerfilUser)
const resultadoUsuario = await Astro.callAction(actions.getUserByCedula, { ced_usu: user?.ci_pas });
usuario = (resultadoUsuario?.data?.usuario as UsuarioParcial | null) ?? null;
// Obtener carreras desde la base de datos
const resultadoCarreras = await Astro.callAction(actions.getCarreras, {});
const listaCarreras = resultadoCarreras?.data?.carreras ?? [];

const correo = usuario?.cor_cue ?? ""; // o user?.email si así se llama el campo

const camposFormulario: CampoFormulario[] = [
  { titulo: "Cédula", valor: usuario?.ced_usu ?? "", name: "ced_usu" },
  { titulo: "Primer nombre", valor: usuario?.nom_usu1 ?? "", name: "nom_usu1" },
  { titulo: "Segundo nombre", valor: usuario?.nom_usu2 ?? "", name: "nom_usu2" },
  { titulo: "Primer apellido", valor: usuario?.ape_usu1 ?? "", name: "ape_usu1" },
  { titulo: "Segundo apellido", valor: usuario?.ape_usu2 ?? "", name: "ape_usu2" },
  { titulo: "Fecha de nacimiento", valor: formatDate(usuario?.fec_nac_usu ?? null), name: "fec_nac_usu" },
  { titulo: "Teléfono", valor: usuario?.num_tel_usu ?? "", name: "num_tel_usu" },
  { titulo: "Correo de recuperación", valor: usuario?.cor_rec ?? "", name: "cor_rec", tipo: "email" },
];

// Solo agregar carrera si el correo es institucional
if (correo.endsWith("@uta.edu.ec")) {
  camposFormulario.push({
    titulo: "Carrera",
    valor: usuario?.id_car_per ?? "",
    name: "id_car_per",

    tipo: "select",
    opciones: listaCarreras.map((car: any) => ({
      valor: car.id_car,
      texto: car.nom_car,
    })),
  });
}

const textoGuardarInfo = "Guardar Información";
const textoCancelar = "Cancelar";
const textoMasTarde = "Más Tarde";
const textoAsociar = "Asociar este usuario a la cuenta";
---

<Layout>
  <Header />
  <Navbar />
  <div class="bg-gray-100 min-h-screen py-10">
    <div class="max-w-3xl mx-auto px-4 text-center">
      <div class="mensaje-guardado-centrado">
        {mensajeGuardado && (
          <div class={`mensaje-guardado-bonito ${mostrarError ? "mensaje-error-bonito" : "mensaje-exito-bonito"}`}>
            {mostrarError ? (
              <span style="font-size:1.5rem;margin-right:0.5rem;">❌</span>
            ) : (
              <span style="font-size:1.5rem;margin-right:0.5rem;">✅</span>
            )}
            {mensajeGuardado}
          </div>
        )}
      </div>

      <FormularioRegistroUsuario
        camposFormulario={camposFormulario}
        cedula={usuario?.ced_usu ?? ""}
        mostrarBotones={true}
        textoBotonGuardarInfo={textoGuardarInfo}
        textoBotonCancelar={textoCancelar}
        textoBotonMasTarde={textoMasTarde}
        textoBotonAsociar={textoAsociar}
      />
    </div>
  </div>
  {!mostrarError && mensajeGuardado && (
    <script>
      setTimeout(() => { window.location.replace('/homeUser'); }, 2000);
    </script>
  )}
</Layout>

<style>
.mensaje-guardado-centrado {
  display: flex;
  justify-content: center;
  margin-bottom: 1.5rem;
}
.mensaje-guardado-bonito {
  display: flex;
  align-items: center;
  padding: 1rem 1.5rem;
  border-radius: 10px;
  font-weight: 600;
  font-size: 1.1rem;
  box-shadow: 0 2px 8px rgba(185,28,28,0.08);
  max-width: 90vw;
}
.mensaje-error-bonito {
  background: #fff0f0;
  color: #b91c1c;
  border: 1.5px solid #b91c1c;
}
.mensaje-exito-bonito {
  background: #d1fae5;
  color: #065f46;
  border: 1.5px solid #10b981;
}
</style>
