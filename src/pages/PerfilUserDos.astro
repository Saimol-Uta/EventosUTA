---
import FormularioRegistroUsuario from "../components/FormularioRegistroUsuario.astro";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Navbar from "../components/Navbar.astro";
import { actions } from "astro:actions";
import type { Usuario } from "../actions/Users/getUserByCedula.action";
import { getSession } from "auth-astro/server";

type SafeResult<T> = {
  success: boolean;
  value?: T | null;
  error?: string;
};

type ResultadoSetUser = {
  success?: boolean;
  created?: boolean;
  requireReauth?: boolean;
  error?: string;
};

type UsuarioParcial = Omit<Usuario, "id_usu"> & { id_usu?: string };

let usuario: UsuarioParcial | null = null;
let mensajeGuardado: string | null = null;
let mostrarError = false;

const session = await getSession(Astro.request);
const { isLoggedIn } = Astro.locals;
const user = session?.user;

if (!isLoggedIn || !user?.id || !user.ci_pas) {
  return Astro.redirect("/login");
}




const id_usu = user.id;
const method = Astro.request.method;

function formatDate(date: string | Date | null): string {
  if (!date) return "";
  const d = typeof date === "string" ? new Date(date) : date;
  return d.toISOString().substring(0, 10);
}

if (method === "POST") {
  const formData = await Astro.request.formData();
  const accion = formData.get("action")?.toString();

  if (accion === "guardarInfo" && formData.has("nom_usu1")) {
    formData.set("id_usu", id_usu); // Aseguramos que actualiza el usuario actual

    const resultadoGuardarRaw = await Astro.callAction(actions.setUser, formData);
    const resultadoGuardar = resultadoGuardarRaw.data as SafeResult<ResultadoSetUser>;

    if (resultadoGuardar.success) {
      mensajeGuardado = resultadoGuardar.value?.created
        ? "Se guardó con éxito."
        : "Usuario actualizado correctamente.";
    } else {
      mostrarError = true;
      mensajeGuardado = resultadoGuardar.error || "No se pudo guardar.";
    }
  }
}

// Simula obtener datos del usuario actual (como se hace en CompletarPerfilUser)
const resultadoUsuario = await Astro.callAction(actions.getUserByCedula, { ced_usu: user?.ci_pas });
usuario = resultadoUsuario?.data?.usuario ?? null;
// Obtener carreras desde la base de datos
const resultadoCarreras = await Astro.callAction(actions.getCarreras, {});
const listaCarreras = resultadoCarreras?.data?.carreras ?? [];


const camposFormulario = [
  { titulo: "Cédula", valor: usuario?.ced_usu ?? "", name: "ced_usu" },
  { titulo: "Primer nombre", valor: usuario?.nom_usu1 ?? "", name: "nom_usu1" },
  { titulo: "Segundo nombre", valor: usuario?.nom_usu2 ?? "", name: "nom_usu2" },
  { titulo: "Primer apellido", valor: usuario?.ape_usu1 ?? "", name: "ape_usu1" },
  { titulo: "Segundo apellido", valor: usuario?.ape_usu2 ?? "", name: "ape_usu2" },
  { titulo: "Fecha de nacimiento", valor: formatDate(usuario?.fec_nac_usu ?? null), name: "fec_nac_usu" },
  { titulo: "Teléfono", valor: usuario?.num_tel_usu ?? "", name: "num_tel_usu" },
{ titulo: "Carrera", valor: usuario?.id_car_per ?? "", name: "id_car_per" },

];

const textoGuardarInfo = "Guardar Información";
const textoCancelar = "Cancelar";
const textoMasTarde = "Más Tarde";
const textoAsociar = "Asociar este usuario a la cuenta";
---

<Layout>
  <Header />
  <Navbar />
  <div class="bg-gray-100 min-h-screen py-10">
    <div class="max-w-3xl mx-auto px-4 text-center">
      {mensajeGuardado && (
        <p class={`mensaje-guardado ${mostrarError ? "mensaje-error" : "mensaje-exito"}`}>
          {mensajeGuardado}
        </p>
      )}
      <FormularioRegistroUsuario
        camposFormulario={camposFormulario}
        cedula={usuario?.ced_usu ?? ""}
        mostrarBotones={true}
        textoBotonGuardarInfo={textoGuardarInfo}
        textoBotonCancelar={textoCancelar}
        textoBotonMasTarde={textoMasTarde}
        textoBotonAsociar={textoAsociar}
      />
    </div>
  </div>
</Layout>
