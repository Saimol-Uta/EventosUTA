---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Navbar from "../../components/Navbar.astro";
import TarjetaEvento from "../../components/TarjetaEvento.astro";
import { getSession } from "auth-astro/server";
import prisma from "../../db";
import type { Decimal } from "@prisma/client/runtime/library";

type TarjetaEventoProps = {
    nombre: string;
    fecha: string;
    calificacion: string;
    asistencia: number;
    estado: string;
    certificadoDisponible: boolean;
    eventoId: string;
    inscripcionId: string; // <-- Propiedad añadida
    estadoPago: string; // <-- Propiedad añadida
    mensajeCertificado?: string; // <-- Nueva propiedad para el mensaje
    asistenciaMinimaRequerida?: number; // <-- Nueva propiedad
    puntajeMinimoRequerido?: number; // <-- Nueva propiedad
    requiereAsistencia?: boolean; // <-- Nueva propiedad
    requierePuntaje?: boolean; // <-- Nueva propiedad
    tieneComprobanteDePago?: boolean; // <-- Nueva propiedad opcional
};

const session = await getSession(Astro.request);
const usuarioId = session?.user?.id;

let eventosParaTarjeta: TarjetaEventoProps[] = [];

if (usuarioId) {
    // Ya no necesitamos buscar en la tabla 'cuentas'.
    // Usamos el 'usuarioId' de la sesión para buscar directamente en las inscripciones.
    const inscripciones = await prisma.inscripciones.findMany({
        where: {
            id_usu_ins: usuarioId, // Buscamos por el ID de usuario (su correo)
        },
        include: {
            eventos: {
                include: {
                    categorias_eventos: true, // Incluimos la categoría del evento
                },
            },
        },
        orderBy: {
            eventos: {
                fec_ini_eve: "desc", // Ordenamos por fecha de evento
            },
        },
    });

    eventosParaTarjeta = inscripciones.map((inscripcion) => {
        const asistenciaNum = inscripcion.asi_par ?? 0;
        const calificacionNum =
            (inscripcion.not_par as Decimal)?.toNumber() ?? 0.0;

        // Verificamos si el evento ya finalizó
        const fechaFinEvento = inscripcion.eventos.fec_fin_eve;
        const fechaActual = new Date();
        const eventoFinalizado = fechaFinEvento
            ? fechaFinEvento < fechaActual
            : false;

        // Obtenemos la información de la categoría del evento
        const categoria = inscripcion.eventos.categorias_eventos;
        const requiereAsistencia = categoria.requiere_asistencia ?? false;
        const requierePuntaje = categoria.requiere_puntaje ?? false;
        const tieneComprobanteDePago =
            inscripcion.enl_ord_pag_ins !== null &&
            inscripcion.enl_ord_pag_ins !== undefined &&
            inscripcion.enl_ord_pag_ins !== "";
        const brindaCertificado = categoria.brinda_certificado ?? false;

        // Verificar si el evento es gratuito o de pago
        const esEventoGratuito = inscripcion.eventos.es_gratuito ?? false;
        const eventoTienePrecio =
            inscripcion.eventos.precio &&
            Number(inscripcion.eventos.precio) > 0;
        const esEventoDePago = !esEventoGratuito && eventoTienePrecio;

        // Obtenemos los valores específicos de la categoría
        const asistenciaMinimaRequerida = categoria.asi_cat ?? 70; // Valor por defecto 70% si no está definido
        const puntajeMinimoRequerido =
            (categoria.pun_apr_cat as Decimal)?.toNumber() ?? 7.0; // Valor por defecto 7.0 si no está definido

        // Lógica para determinar si el certificado está disponible
        let esCertificadoDisponible = false;
        let mensajeCertificado = "";
        let estadoEvento = "incompleto";

        const estadoEventoBD = inscripcion.eventos.estado_evento ?? "";
        const eventoRealmenteFinalizado = eventoFinalizado && estadoEventoBD === "FINALIZADO";

        if (inscripcion.est_ins === "DPendiente") {
            mensajeCertificado =
                "⏳ En revisión: Tus documentos están siendo validados por un administrador";
            estadoEvento = "En revisión";
        } else if (inscripcion.est_par !== "APROBADA") {
            mensajeCertificado =
                "❌ Sin certificado: Necesitas estar aprobado para obtener el certificado";
            estadoEvento = "incompleto";
        } else if (!eventoRealmenteFinalizado) {
            let mensaje = "";
            if (estadoEventoBD !== "FINALIZADO") {
                mensaje = "⏳ Sin certificado: El evento aún no ha sido marcado como FINALIZADO por la administración.";
            } else {
                const fechaFin = fechaFinEvento
                    ? fechaFinEvento.toLocaleDateString("es-EC")
                    : "por definir";
                mensaje = `⏳ Sin certificado: El evento aún no ha finalizado (termina el ${fechaFin})`;
            }
            mensajeCertificado = mensaje;
            estadoEvento = "incompleto";
        } else if (
            requiereAsistencia &&
            asistenciaNum < asistenciaMinimaRequerida
        ) {
            mensajeCertificado = `❌ Sin certificado: No cumples la asistencia mínima requerida (tienes ${asistenciaNum}%, necesitas ${asistenciaMinimaRequerida}%)`;
            estadoEvento = "incompleto";
        } else if (
            requierePuntaje &&
            calificacionNum < puntajeMinimoRequerido
        ) {
            mensajeCertificado = `❌ Sin certificado: No cumples la calificación mínima requerida (tienes ${calificacionNum.toFixed(1)}, necesitas ${puntajeMinimoRequerido.toFixed(1)})`;
            estadoEvento = "incompleto";
        } else if (
            esEventoDePago &&
            inscripcion.est_ins === "FPendiente" &&
            tieneComprobanteDePago
        ) {
            mensajeCertificado =
                "⏳ En proceso de revisión: Tu comprobante de pago está siendo revisado";
            estadoEvento = "En proceso de revisión";
        } else {
            estadoEvento = "completo";

            if (!brindaCertificado) {
                mensajeCertificado =
                    "ℹ️ Evento completado: Esta categoría no entrega certificado";
                esCertificadoDisponible = false;
            } else {
                mensajeCertificado =
                    "✅ Certificado disponible: Cumples todos los requisitos";
                esCertificadoDisponible = true;
            }
        }

        return {
            nombre: inscripcion.eventos.nom_eve,
            fecha: inscripcion.eventos.fec_ini_eve.toLocaleDateString("es-EC", {
                year: "numeric",
                month: "long",
                day: "numeric",
            }),
            calificacion: calificacionNum.toFixed(1),
            asistencia: asistenciaNum,
            estado: estadoEvento,
            certificadoDisponible: esCertificadoDisponible,
            eventoId: inscripcion.id_eve_ins,
            inscripcionId: inscripcion.id_ins,
            estadoPago: inscripcion.est_ins,
            mensajeCertificado: mensajeCertificado,
            asistenciaMinimaRequerida: asistenciaMinimaRequerida,
            puntajeMinimoRequerido: puntajeMinimoRequerido,
            requiereAsistencia: requiereAsistencia,
            requierePuntaje: requierePuntaje,
            tieneComprobanteDePago: tieneComprobanteDePago,
        };
    });
}
---

<Layout>
    <Header />
    <Navbar />

    <main class="historial-container">
        <h2 class="titulo">Historial de Eventos</h2>
        <div class="cards-grid">
            {
                eventosParaTarjeta.length > 0 ? (
                    eventosParaTarjeta.map((evento) => (
                        <TarjetaEvento {...evento} />
                    ))
                ) : (
                    <p class="no-eventos">
                        Aún no has participado en ningún evento.
                    </p>
                )
            }
        </div>

        <div id="pdf-modal-overlay" class="modal-overlay">
            <div class="modal-content">
                <button
                    id="pdf-modal-close"
                    class="modal-close-btn"
                    title="Cerrar">&times;</button
                >
                <iframe
                    id="pdf-iframe"
                    src=""
                    frameborder="0"
                    title="Visor de PDF"></iframe>
            </div>
        </div>
    </main>

    <style>
        :root {
            --color-fuerte-uta: #b01025;
            --color-oscuro-uta: #d51d35;
        }
        .historial-container {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 1rem 2rem;
            font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        }
        .titulo {
            font-size: 2rem;
            text-align: center;
            margin-bottom: 2rem;
            background: linear-gradient(
                90deg,
                var(--color-oscuro-uta),
                var(--color-fuerte-uta)
            );
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 800;
        }
        .cards-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
        }
        .no-eventos {
            grid-column: 1 / -1;
            text-align: center;
            font-size: 1.2rem;
            color: #666;
            padding: 3rem;
        }

        .modal-overlay {
            display: none; /* Oculto por defecto */
            position: fixed; /* Se queda fijo en la pantalla */
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(
                0,
                0,
                0,
                0.75
            ); /* Fondo oscuro semitransparente */
            justify-content: center;
            align-items: center;
            z-index: 1000; /* Se asegura de que esté por encima de todo */
        }

        .modal-content {
            position: relative;
            background-color: #fff;
            padding: 8px;
            border-radius: 8px;
            width: 90%;
            height: 90%;
            max-width: 900px; /* Ancho máximo del visor */
            display: flex;
            flex-direction: column;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .modal-close-btn {
            position: absolute;
            top: -15px;
            right: -15px;
            background-color: #4b1818;
            color: white;
            border: 2px solid white;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            font-size: 24px;
            line-height: 30px;
            text-align: center;
            cursor: pointer;
            z-index: 1001;
        }

        #pdf-iframe {
            width: 100%;
            height: 100%;
            border: none;
        }
    </style>
    <script>
        import { actions } from "astro:actions";

        const modalOverlay = document.getElementById("pdf-modal-overlay");
        const modalCloseBtn = document.getElementById("pdf-modal-close");
        const pdfIframe = document.getElementById(
            "pdf-iframe",
        ) as HTMLIFrameElement;

        function mostrarPdfEnModal(base64: string, fileName: string) {
            if (!pdfIframe || !modalOverlay) return;

            const byteCharacters = atob(base64);
            const byteArrays = [];
            for (
                let offset = 0;
                offset < byteCharacters.length;
                offset += 512
            ) {
                const slice = byteCharacters.slice(offset, offset + 512);
                const byteNumbers = new Array(slice.length);
                for (let i = 0; i < slice.length; i++) {
                    byteNumbers[i] = slice.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                byteArrays.push(byteArray);
            }
            const blob = new Blob(byteArrays, { type: "application/pdf" });
            const pdfUrl = URL.createObjectURL(blob);

            // Cargamos la URL del PDF en el iframe y mostramos el modal
            pdfIframe.src = pdfUrl;
            modalOverlay.style.display = "flex";
        }

        function closeModal() {
            if (modalOverlay && pdfIframe) {
                modalOverlay.style.display = "none";
                pdfIframe.src = "";
            }
        }

        // Añadimos los listeners para cerrar el modal
        modalCloseBtn?.addEventListener("click", closeModal);
        modalOverlay?.addEventListener("click", (event) => {
            if (event.target === modalOverlay) {
                closeModal();
            }
        });

        document
            .querySelectorAll(".js-generate-cert, .js-download-order")
            .forEach((button) => {
                if (!(button instanceof HTMLButtonElement)) return;

                button.addEventListener("click", async (event) => {
                    const isCertificado =
                        button.classList.contains("js-generate-cert");
                    const originalText = button.textContent || "";
                    let result;

                    button.disabled = true;
                    button.textContent = "Generando...";

                    try {
                        if (isCertificado) {
                            const eventoId = button.dataset.eventoid;
                            if (!eventoId)
                                throw new Error("ID de evento no encontrado.");

                            result = await actions.GenerarCertificado({
                                eventoId,
                            });
                        } else {
                            const inscripcionId = button.dataset.inscripcionid;
                            if (!inscripcionId)
                                throw new Error(
                                    "ID de inscripción no encontrado.",
                                );

                            result = await actions.GenerarOrdenDePago({
                                inscripcionId,
                            });
                        }

                        if (
                            result.data?.success &&
                            result.data?.data?.pdfBase64
                        ) {
                            mostrarPdfEnModal(
                                result.data.data.pdfBase64,
                                result.data.data.fileName,
                            );
                        } else {
                            alert(
                                `Error: ${result.error?.message || "desconocido"}`,
                            );
                        }
                    } catch (error) {
                        console.error(error);
                        alert(
                            error instanceof Error
                                ? error.message
                                : "Error inesperado al contactar con el servidor.",
                        );
                    } finally {
                        button.disabled = false;
                        button.textContent = originalText;
                    }
                });
            });
    </script>
</Layout>
