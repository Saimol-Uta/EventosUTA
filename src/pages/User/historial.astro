---
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/Header.astro";
import Navbar from "../../components/Navbar.astro";
import TarjetaEvento from "../../components/TarjetaEvento.astro";
import { getSession } from "auth-astro/server";
import prisma from "../../db";
import type { Decimal } from "@prisma/client/runtime/library";

type TarjetaEventoProps = {
  nombre: string;
  fecha: string;
  calificacion: string;
  asistencia: number;
  estado: string;
  certificadoDisponible: boolean;
  eventoId: string;
};

const session = await getSession(Astro.request);
const accountId = session?.user?.id;

let eventosParaTarjeta: TarjetaEventoProps[] = [];

if (accountId) {
  const cuenta = await prisma.cuentas.findUnique({
    where: {
      id_cue: accountId,
    },
  });

  if (cuenta && cuenta.id_usu_per) {
    const userId = cuenta.id_usu_per;

    const inscripciones = await prisma.inscripciones.findMany({
      where: {
        id_usu_ins: userId,
      },
      include: {
        eventos: true,
      },
      orderBy: {
        eventos: {
          fec_ini_eve: "desc",
        },
      },
    });

    eventosParaTarjeta = inscripciones.map((inscripcion) => {
      const asistenciaNum = inscripcion.asi_par ?? 0;
      const calificacionNum =
        (inscripcion.not_par as Decimal)?.toNumber() ?? 0.0;

      const esCertificadoDisponible =
        asistenciaNum >= 70 &&
        calificacionNum >= 7.0 &&
        inscripcion.est_par === "APROBADA";

      const estadoEvento = esCertificadoDisponible ? "completo" : "incompleto";

      return {
        nombre: inscripcion.eventos.nom_eve,
        fecha: inscripcion.eventos.fec_ini_eve.toLocaleDateString("es-EC", {
          year: "numeric",
          month: "long",
          day: "numeric",
        }),
        calificacion: calificacionNum.toFixed(1),
        asistencia: asistenciaNum,
        estado: estadoEvento,
        certificadoDisponible: esCertificadoDisponible,
        eventoId: inscripcion.id_eve_ins,
        inscripcionId: inscripcion.id_ins,
        estadoPago: inscripcion.est_ins,
      };
    });
  }
}
---

<Layout>
  <Header />
  <Navbar />

  <main class="historial-container">
    <h2 class="titulo">Historial de Eventos</h2>
    <div class="cards-grid">
      {
        eventosParaTarjeta.length > 0 ? (
          eventosParaTarjeta.map((evento) => <TarjetaEvento {...evento} />)
        ) : (
          <p class="no-eventos">Aún no has participado en ningún evento.</p>
        )
      }
    </div>

    <div id="pdf-modal-overlay" class="modal-overlay">
      <div class="modal-content">
        <button id="pdf-modal-close" class="modal-close-btn" title="Cerrar"
          >&times;</button
        >
        <iframe id="pdf-iframe" src="" frameborder="0" title="Visor de PDF"
        ></iframe>
      </div>
    </div>
  </main>

  <style>
    :root {
      --color-fuerte-uta: #b01025;
      --color-oscuro-uta: #d51d35;
    }
    .historial-container {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 1rem 2rem;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    }
    .titulo {
      font-size: 2rem;
      text-align: center;
      margin-bottom: 2rem;
      background: linear-gradient(
        90deg,
        var(--color-oscuro-uta),
        var(--color-fuerte-uta)
      );
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      font-weight: 800;
    }
    .cards-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
    }
    .no-eventos {
      grid-column: 1 / -1;
      text-align: center;
      font-size: 1.2rem;
      color: #666;
      padding: 3rem;
    }

    .modal-overlay {
      display: none; /* Oculto por defecto */
      position: fixed; /* Se queda fijo en la pantalla */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.75); /* Fondo oscuro semitransparente */
      justify-content: center;
      align-items: center;
      z-index: 1000; /* Se asegura de que esté por encima de todo */
    }

    .modal-content {
      position: relative;
      background-color: #fff;
      padding: 8px;
      border-radius: 8px;
      width: 90%;
      height: 90%;
      max-width: 900px; /* Ancho máximo del visor */
      display: flex;
      flex-direction: column;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .modal-close-btn {
      position: absolute;
      top: -15px;
      right: -15px;
      background-color: #4b1818;
      color: white;
      border: 2px solid white;
      border-radius: 50%;
      width: 35px;
      height: 35px;
      font-size: 24px;
      line-height: 30px;
      text-align: center;
      cursor: pointer;
      z-index: 1001;
    }

    #pdf-iframe {
      width: 100%;
      height: 100%;
      border: none;
    }
  </style>
  <script>
    import { actions } from "astro:actions";

    const modalOverlay = document.getElementById('pdf-modal-overlay');
  const modalCloseBtn = document.getElementById('pdf-modal-close');
  const pdfIframe = document.getElementById('pdf-iframe') as HTMLIFrameElement;

  function mostrarPdfEnModal(base64: string, fileName: string) {
    if (!pdfIframe || !modalOverlay) return;

    const byteCharacters = atob(base64);
    const byteArrays = [];
    for (let offset = 0; offset < byteCharacters.length; offset += 512) {
      const slice = byteCharacters.slice(offset, offset + 512);
      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }
    const blob = new Blob(byteArrays, { type: "application/pdf" });
    const pdfUrl = URL.createObjectURL(blob);

    // Cargamos la URL del PDF en el iframe y mostramos el modal
    pdfIframe.src = pdfUrl;
    modalOverlay.style.display = 'flex';
  }
  
  function closeModal() {
    if (modalOverlay && pdfIframe) {
      modalOverlay.style.display = 'none';
      pdfIframe.src = '';
    }
  }

  // Añadimos los listeners para cerrar el modal
  modalCloseBtn?.addEventListener('click', closeModal);
  modalOverlay?.addEventListener('click', (event) => {
    if (event.target === modalOverlay) {
      closeModal();
    }
  });

  document.querySelectorAll(".js-generate-cert, .js-download-order").forEach((button) => {
    if (!(button instanceof HTMLButtonElement)) return;

    button.addEventListener("click", async (event) => {
      const isCertificado = button.classList.contains('js-generate-cert');
      const originalText = button.textContent || '';
      let result;

      button.disabled = true;
      button.textContent = "Generando...";

      try {
        if (isCertificado) {
          const eventoId = button.dataset.eventoid;
          if (!eventoId) throw new Error("ID de evento no encontrado.");
          
          result = await actions.GenerarCertificado({ eventoId });

        } else {
          const inscripcionId = button.dataset.inscripcionid;
          if (!inscripcionId) throw new Error("ID de inscripción no encontrado.");

          result = await actions.GenerarOrdenDePago({ inscripcionId });
        }

        if (result.data?.success && result.data?.data?.pdfBase64) {
          mostrarPdfEnModal(result.data.data.pdfBase64, result.data.data.fileName);
        } else {
          alert(`Error: ${result.error?.message || 'desconocido'}`);
        }

      } catch (error) {
        console.error(error);
        alert(error instanceof Error ? error.message : "Error inesperado al contactar con el servidor.");
      } finally {
        button.disabled = false;
        button.textContent = originalText;
      }
    });
  });
  </script>
</Layout>
