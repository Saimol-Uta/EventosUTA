---
---
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <title>Registro - Talleres Tecnológicos</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      .login-container {
        border: 1px solid #ccc;
        padding: 30px 40px;
        text-align: center;
        max-width: 350px;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
      }

      .login-container img {
        width: 100%;
        max-width: 280px;
        margin-bottom: 20px;
      }

      .login-container input {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .login-container button {
        background-color: #a00;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
      }

      .login-container button:hover {
        background-color: #800000;
      }

      .login-container a {
        display: block;
        margin-top: 10px;
        font-size: 14px;
        text-decoration: none;
        color: #800000;
      }

      .login-container a:hover {
        text-decoration: underline;
      }

      .volver {
        position: absolute;
        top: 10px;
        right: 20px;
        font-size: 14px;
        color: #800000;
      }

      .volver:hover {
        text-decoration: underline;
      }
    </style>
  </head>
  <body>
    <a class="volver" href="/">Regresar</a>

    <div class="login-container">
      <img src="/img/logoFisei.png" alt="Logo Facultad de Ingeniería" />
      <form id="registroForm">
        <input type="text" name="nombre" placeholder="Nombre" required />
        <input type="text" name="apellido" placeholder="Apellido" required />
        <input type="email" name="correo" placeholder="Correo" required />
        <input type="password" name="contrasena" placeholder="Contraseña" required />
        <input type="date" id="fechNac" name="fechNac" required />
        <p id="edadResultado"></p>
        <button type="submit">Registrarse</button>
        <p>¿Ya tiene una cuenta?</p>
        <a href="/login">Inicia sesión aquí</a>
      </form>
    </div>
    <script>
      import { actions } from 'astro:actions';
      import Swal from 'sweetalert2';
      import 'sweetalert2/dist/sweetalert2.min.css';

      document.addEventListener("DOMContentLoaded", () => {
        const fechaInput = document.getElementById("fechNac") as HTMLInputElement;
        const form = document.getElementById("registroForm") as HTMLFormElement;
        const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement | null;

        if (!fechaInput || !form || !submitButton) {
            console.error("No se encontraron elementos esenciales del formulario.");
            return;
        }

        const hoy = new Date();
        const añoActual = hoy.getFullYear();
        const mesActual = (hoy.getMonth() + 1).toString().padStart(2, "0");
        const diaActual = hoy.getDate().toString().padStart(2, "0");

        const fechaMax = `${añoActual - 18}-${mesActual}-${diaActual}`;
        const fechaMin = `${añoActual - 100}-${mesActual}-${diaActual}`;

        fechaInput.setAttribute("max", fechaMax);
        fechaInput.setAttribute("min", fechaMin);

        form.addEventListener('submit', async (event) => {
          event.preventDefault();
          submitButton.disabled = true;

          const formData = new FormData(form);
          const nombre = formData.get('nombre') as string;
          const apellido = formData.get('apellido') as string;
          const correo = formData.get('correo') as string;
          const contrasena = formData.get('contrasena') as string;
          const fechNac = formData.get('fechNac') as string;

          if (!nombre || !apellido || !correo || !contrasena || !fechNac) {
            Swal.fire({
              icon: 'error',
              title: 'Campos incompletos',
              text: 'Por favor, rellena todos los campos obligatorios.',
              confirmButtonColor: '#a00',
              heightAuto: false // <-- AÑADIDO
            }).then(() => {
                submitButton.disabled = false; 
            });
            return;
          }

          const nacimiento = new Date(fechNac);
          if (isNaN(nacimiento.getTime())) {
              Swal.fire({
                  icon: 'error',
                  title: 'Fecha inválida',
                  text: 'Por favor, ingresa una fecha de nacimiento válida.',
                  confirmButtonColor: '#a00',
                  heightAuto: false // <-- AÑADIDO
              }).then(() => {
                submitButton.disabled = false; 
            });
              return;
          }

          let edad = hoy.getFullYear() - nacimiento.getFullYear();
          const m = hoy.getMonth() - nacimiento.getMonth();
          if (m < 0 || (m === 0 && hoy.getDate() < nacimiento.getDate())) {
            edad--;
          }

          if (edad < 18) {
            Swal.fire({
              icon: 'error',
              title: 'Menor de edad',
              text: 'Debes tener al menos 18 años para registrarte.',
              confirmButtonColor: '#a00',
              heightAuto: false // <-- AÑADIDO
            }).then(() => {
                submitButton.disabled = false; 
            });
            return;
          }
          
          Swal.fire({
            title: 'Registrando...',
            text: 'Por favor espera.',
            didOpen: () => { Swal.showLoading(); },
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            heightAuto: false // <-- AÑADIDO
          });

          try {
            const { data: response, error: directActionError } = await actions.SignIn({
              nombre, apellido, correo, contrasena, fechNac,
            });

            if (directActionError) {
              let swalTitle = 'Error de Acción';
              let errorMessagesToShow = [directActionError.message || 'No se pudo procesar la acción.'];
              
              // @ts-ignore
              const validationErrorObject = directActionError.validationError; 
              if (validationErrorObject) {
                swalTitle = 'Por favor, corrige lo siguiente:';
                let collectedMessages: string[] = [];
                
                if (validationErrorObject.formErrors && validationErrorObject.formErrors.length > 0) {
                  collectedMessages.push(...validationErrorObject.formErrors);
                }
                if (validationErrorObject.fieldErrors) {
                  for (const field in validationErrorObject.fieldErrors) {
                    // @ts-ignore
                    if (validationErrorObject.fieldErrors[field] && validationErrorObject.fieldErrors[field].length > 0) {
                      // @ts-ignore
                      collectedMessages.push(...validationErrorObject.fieldErrors[field]);
                    }
                  }
                }
                if (collectedMessages.length > 0) {
                  errorMessagesToShow = collectedMessages;
                } else if (directActionError.message) {
                    errorMessagesToShow = [directActionError.message];
                }

              } else if (directActionError.message && directActionError.message.startsWith("Failed to validate: ")) {
                swalTitle = 'Por favor, corrige lo siguiente:';
                const zodErrorPrefix = "Failed to validate: ";
                try {
                  const jsonString = directActionError.message.substring(zodErrorPrefix.length);
                  const errors = JSON.parse(jsonString);
                  if (Array.isArray(errors) && errors.length > 0) {
                    const parsedMessages = errors.map(err => err.message).filter(msg => msg);
                    if (parsedMessages.length > 0) {
                      errorMessagesToShow = parsedMessages;
                    } else {
                      errorMessagesToShow = ['Error de validación. Revisa los datos ingresados.'];
                    }
                  } else {
                    errorMessagesToShow = ['Error de validación. Revisa los datos ingresados.'];
                  }
                } catch (parseError) {
                  console.error("Failed to parse Zod error JSON string:", parseError);
                }
              }

              Swal.fire({
                icon: 'error',
                title: swalTitle,
                html: errorMessagesToShow.join('<br/>'),
                confirmButtonColor: '#a00',
                heightAuto: false
              }).then(() => {
                submitButton.disabled = false;
              });

            } else if (response && response.success === false && response.error && typeof response.error === 'object' && 'message' in response.error) {
              Swal.fire({
                icon: 'error',
                title: 'Error en el registro',
                text: response.error.message,
                confirmButtonColor: '#a00',
                heightAuto: false
              }).then(() => {
                submitButton.disabled = false;
              });
            } else if (response && response.success) {
              Swal.fire({
                icon: 'success',
                title: '¡Registro exitoso!',
                text: 'Ahora serás redirigido.',
                timer: 2000,
                timerProgressBar: true,
                showConfirmButton: false,
                heightAuto: false,
                willClose: () => {
                  window.location.href = '/login'; 
                }
              });
            } else {
              Swal.fire({
                icon: 'warning',
                title: 'Respuesta del servidor no reconocida',
                text: 'La estructura de la respuesta no fue la esperada.',
                confirmButtonColor: '#a00',
                heightAuto: false
              }).then(() => {
                submitButton.disabled = false;
              });
              console.log('Respuesta inesperada del servidor:', response);
            }
          } catch (e: any) {
            Swal.fire({
              icon: 'error',
              title: 'Error de conexión',
              text: e.message || 'No se pudo conectar con el servidor. Inténtalo de nuevo.',
              confirmButtonColor: '#a00',
              heightAuto: false
            }).then(() => {
                submitButton.disabled = false;
            });
            console.error("Error en el submit (catch general):", e);
          }
        });
      });
    </script>
  </body>
</html>