---
import EventoCard from "./EventoCard.astro";
import { getEventosFiltrados } from "../actions/Eventos/getFiltros";
import type { Eventos } from "../interface/eventosSimple";

const { filtros = {}, page = 1, cursosPorPagina = 6 } = Astro.props;

const { data, error } = await Astro.callAction(getEventosFiltrados, filtros);

const listaEventos = (data?.eventos || []) as Eventos[];

// Total de eventos y páginas
const totalEventos = listaEventos.length;
const totalPaginas = Math.ceil(totalEventos / cursosPorPagina);

// Limitar page dentro del rango válido
const paginaActual = Math.min(Math.max(page, 1), totalPaginas || 1);

// Obtener eventos para la página actual
const inicio = (paginaActual - 1) * cursosPorPagina;
const fin = inicio + cursosPorPagina;
const eventosPagina = listaEventos.slice(inicio, fin);

// Función para construir url manteniendo filtros y página
function construirUrl(pagina: number) {
  const url = new URL("/cursosCompleto", "http://dummybase"); // base dummy para usar URL
  if (filtros.categoria) url.searchParams.set("categoria", filtros.categoria);
  if (filtros.duracion) url.searchParams.set("duracion", filtros.duracion);
  url.searchParams.set("page", pagina.toString());
  return url.pathname + url.search;
}
---

<div class="contenedor">
  {
    eventosPagina.length > 0 ? (
      eventosPagina.map((evento) => (
        <EventoCard
          imagen={evento.img_eve}
          titulo={evento.nom_eve}
          estado={evento.asignaciones?.length?.toString() || "0"}
          horas={evento.dur_eve ?? 0}
          slug={evento.id_eve}
        />
      ))
    ) : (
      <div class="sin-resultados">
        <svg class="icono-vacio" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 64 64" fill="none">
          <circle cx="32" cy="32" r="30" stroke="#8A1538" stroke-width="3" fill="#fff8f8"/>
          <circle cx="22" cy="24" r="4" fill="#8A1538"/>
          <circle cx="42" cy="24" r="4" fill="#8A1538"/>
          <path d="M22 44c2.5-4 9.5-4 12 0" stroke="#8A1538" stroke-width="2.5" stroke-linecap="round"/>
        </svg>
        <p class="titulo-vacio">¡Ups! No se encontraron resultados</p>
        <p class="texto-vacio">Prueba cambiando los filtros o ajustando tu búsqueda</p>
      </div>
    )
  }
</div>

<!-- Paginación -->
{totalPaginas > 1 && (
  <nav class="paginacion" role="navigation" aria-label="Paginación de cursos">
    {/* Botón Anterior */}
    {paginaActual > 1 ? (
      <a href={construirUrl(paginaActual - 1)} aria-label="Página anterior">Anterior</a>
    ) : (
      <span aria-disabled="true" style="opacity: 0.5; cursor: default;">Anterior</span>
    )}

    {/* Números de página */}
    {Array.from({ length: totalPaginas }, (_, i) => i + 1).map((num) =>
      num === paginaActual ? (
        <span key={num} class="activo" aria-current="page">{num}</span>
      ) : (
        <a key={num} href={construirUrl(num)}>{num}</a>
      )
    )}

    {/* Botón Siguiente */}
    {paginaActual < totalPaginas ? (
      <a href={construirUrl(paginaActual + 1)} aria-label="Página siguiente">Siguiente</a>
    ) : (
      <span aria-disabled="true" style="opacity: 0.5; cursor: default;">Siguiente</span>
    )}
  </nav>
)}
