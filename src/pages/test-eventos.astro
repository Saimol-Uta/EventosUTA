---
import Header from "@components/Header.astro";
import NavBar from "../components/Navbar.astro";
import Layout from "../layouts/Layout.astro";
import ModalDetallesEvento from "../components/ModalDetallesEvento.astro";
import ModalModificarEvento from "../components/ModalModificarEvento.astro";
import ModalNuevoEvento from "../components/ModalNuevoEvento.astro";
import "../styles/EventosCRUD.css";
import { actions } from "astro:actions";

// Obtener eventos con información relacionada
const { data, error } = await Astro.callAction(actions.getEventos, {});

// Obtener categorías para el filtro
const { data: categoriasData } = await Astro.callAction(actions.getCategorias, {});
const { data: organizadoresData } = await Astro.callAction(actions.getOrganizadores, {});

if (error) {
    console.error("Error al obtener eventos:", error);
}

const eventos = data?.eventos || [];
const categorias = categoriasData?.categorias || [];
const organizadores = organizadoresData?.organizadores || [];

// Obtener información completa de cada evento
const eventosCompletos = await Promise.all(
    eventos.map(async (evento: any) => {
        const organizador = await Astro.callAction(
            actions.getOrganizadorByEvento,
            { id_evento: evento.id_eve }
        );

        const categoria = await Astro.callAction(
            actions.getCategoriaById,
            { id_categoria: evento.id_cat_eve }
        );

        return {
            ...evento,
            organizador: organizador.data,
            categoria: categoria.data,
        };
    })
);
---

<Layout title="Test Eventos CRUD">
    <Header />
    <NavBar />
    
    <main class="main">
        <div class="titulo-seccion">
            <h1>Test - Sistema CRUD de Eventos</h1>
        </div>

        <div class="contenedor-formularios">
            <div class="registros-grid">
                <div class="registros-superior">
                    <div class="registros-superior-izquierdo">
                        Eventos de Prueba
                    </div>
                    <div class="registros-superior-derecho">
                        <a
                            onclick="window.abrirModalNuevo()"
                            class="contenedor-boton-nuevo-registro"
                        >
                            <button class="boton-nuevo-registro" title="Nuevo">
                                Nuevo Evento
                            </button>
                            <p class="anadir-icon">+</p>
                        </a>
                    </div>
                </div>

                <div class="registros-inferior-titulos">
                    <div class="registro-fila">
                        <div class="parte-izquierda-registro-encabezado">
                            Nombre
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Categoría
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Área
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Fecha Inicio
                        </div>
                        <div class="parte-izquierda-registro-encabezado">
                            Ubicación
                        </div>
                        <div class="parte-derecha-registro-encabezado">
                            Opciones
                        </div>
                    </div>
                </div>
                <div class="registros-inferior">
                    {
                        eventosCompletos.map((evento) => (
                            <input
                                type="hidden"
                                name="evento"
                                value={JSON.stringify(evento)}
                            />
                            <div class="registro-fila">
                                <div class="registro-datos">
                                    {evento.nom_eve}
                                </div>
                                <div class="registro-datos">
                                    {evento.categoria?.nom_cat || 'Sin categoría'}
                                </div>
                                <div class="registro-datos">
                                    {evento.are_eve || 'N/A'}
                                </div>
                                <div class="registro-datos">
                                    {new Date(evento.fec_ini_eve).toLocaleDateString()}
                                </div>
                                <div class="registro-datos">
                                    {evento.ubi_eve}
                                </div>
                                <div class="registro-opciones">
                                    <button
                                        title="Detalles"
                                        onclick={`mostrarDetallesEvento('${evento.id_eve}')`}
                                    >
                                        <img
                                            src="/img/CRUD/mostrar-detalles.svg"
                                            alt="boton mostrar detalles"
                                            class="imagen-boton-registro"
                                        />
                                    </button>
                                    <button
                                        title="Eliminar"
                                        onclick={`eliminarEvento('${evento.id_eve}')`}
                                    >
                                        <img
                                            src="/img/CRUD/eliminar-registro.svg"
                                            alt="boton eliminar registro"
                                            class="imagen-boton-registro"
                                        />
                                    </button>
                                    <button
                                        title="Modificar"
                                        onclick={`window.abrirModal('${evento.id_eve}')`}
                                    >
                                        <img
                                            src="/img/CRUD/modificar-registro.svg"
                                            alt="boton modificar"
                                            class="imagen-boton-modificar"
                                        />
                                    </button>
                                </div>
                            </div>
                        ))
                    }
                </div>
            </div>
        </div>
    </main>

    <!-- Modales -->
    <ModalNuevoEvento />
    <ModalModificarEvento />
    <ModalDetallesEvento />

    <script>
        import { actions } from "astro:actions";
        import Swal from "sweetalert2";

        // Interfaces para tipado
        interface Organizador {
            ced_org: string;
            nom_org1: string;
            nom_org2?: string;
            ape_org1: string;
            ape_org2?: string;
        }

        interface Categoria {
            id_cat: string;
            nom_cat: string;
            des_cat?: string;
        }

        interface EventoCompleto {
            id_eve: string;
            nom_eve: string;
            des_eve: string;
            fec_ini_eve: string;
            fec_fin_eve?: string;
            hor_ini_eve: string;
            hor_fin_eve?: string;
            dur_eve?: number;
            are_eve?: string;
            ubi_eve: string;
            img_eve?: string;
            precio: number;
            ced_org_eve: string;
            id_cat_eve: string;
            organizador?: Organizador;
            categoria?: Categoria;
        }

        async function eliminarEvento(eventoId: string) {
            try {
                const resultado = await Swal.fire({
                    title: "¿Estás seguro?",
                    text: "No podrás revertir esta acción",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#dc2626",
                    cancelButtonColor: "#6b7280",
                    confirmButtonText: "Sí, eliminar",
                    cancelButtonText: "Cancelar",
                });

                if (resultado.isConfirmed) {
                    const { data, error } = await actions.eliminarEvento({
                        id_evento: eventoId,
                    });

                    if (error || !data?.success) {
                        await Swal.fire({
                            icon: "error",
                            title: "Error",
                            text: data?.error || "No se pudo eliminar el evento",
                            confirmButtonColor: "#dc2626",
                        });
                    } else {
                        await Swal.fire({
                            icon: "success",
                            title: "Eliminado",
                            text: "El evento ha sido eliminado correctamente",
                            confirmButtonColor: "#059669",
                        }).then(() => {
                            window.location.reload();
                        });
                    }
                }
            } catch (error) {
                console.error("Error:", error);
                await Swal.fire({
                    icon: "error",
                    title: "Error",
                    text: "Error al procesar la solicitud",
                    confirmButtonColor: "#dc2626",
                });
            }
        }

        function mostrarDetallesEvento(eventoId: string) {
            const modal = document.getElementById("modalDetallesReserva");
            if (!modal) return;

            // Buscar el evento correspondiente
            const eventosInputs = document.querySelectorAll('input[name="evento"]');
            const eventos = Array.from(eventosInputs).map((input) =>
                JSON.parse((input as HTMLInputElement).value),
            );
            const evento = eventos.find((e: EventoCompleto) => e.id_eve === eventoId);

            if (!evento) return;

            // Implementar la lógica para mostrar detalles
            window.abrirModalDetalles(evento);
        }

        // Hacer las funciones globales
        window.eliminarEvento = eliminarEvento;
        window.mostrarDetallesEvento = mostrarDetallesEvento;
    </script>
</Layout>
